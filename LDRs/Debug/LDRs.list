
LDRs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006fd8  08006fd8  00016fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007404  08007404  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007404  08007404  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007404  08007404  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001d4  080075e0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  080075e0  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d48f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d3  00000000  00000000  0002d6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  0002f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ada  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018edd  00000000  00000000  0003116a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff58  00000000  00000000  0004a047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f531  00000000  00000000  00059f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c90  00000000  00000000  000e94d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ee160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fbc 	.word	0x08006fbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006fbc 	.word	0x08006fbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__gesf2>:
 8000ce4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ce8:	e006      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cea:	bf00      	nop

08000cec <__lesf2>:
 8000cec:	f04f 0c01 	mov.w	ip, #1
 8000cf0:	e002      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__cmpsf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d011      	beq.n	8000d34 <__cmpsf2+0x40>
 8000d10:	b001      	add	sp, #4
 8000d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d16:	bf18      	it	ne
 8000d18:	ea90 0f01 	teqne	r0, r1
 8000d1c:	bf58      	it	pl
 8000d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d22:	bf88      	it	hi
 8000d24:	17c8      	asrhi	r0, r1, #31
 8000d26:	bf38      	it	cc
 8000d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d2c:	bf18      	it	ne
 8000d2e:	f040 0001 	orrne.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__cmpsf2+0x4c>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d105      	bne.n	8000d4c <__cmpsf2+0x58>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d1e4      	bne.n	8000d10 <__cmpsf2+0x1c>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d0e1      	beq.n	8000d10 <__cmpsf2+0x1c>
 8000d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <__aeabi_cfrcmple>:
 8000d54:	4684      	mov	ip, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	e7ff      	b.n	8000d5c <__aeabi_cfcmpeq>

08000d5c <__aeabi_cfcmpeq>:
 8000d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d5e:	f7ff ffc9 	bl	8000cf4 <__cmpsf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d6c <__aeabi_fcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffd2 	bl	8000d54 <__aeabi_cfrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc8 	bl	8000d54 <__aeabi_cfrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dd4:	b0b8      	sub	sp, #224	; 0xe0
 8000dd6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f000 fd88 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f8d8 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f000 fa5a 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de4:	f000 fa3a 	bl	800125c <MX_DMA_Init>
  MX_ADC1_Init();
 8000de8:	f000 f924 	bl	8001034 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000dec:	f000 f98c 	bl	8001108 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000df0:	f000 fa0a 	bl	8001208 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, LDR_values, 4);
 8000df4:	2204      	movs	r2, #4
 8000df6:	495f      	ldr	r1, [pc, #380]	; (8000f74 <main+0x1a4>)
 8000df8:	485f      	ldr	r0, [pc, #380]	; (8000f78 <main+0x1a8>)
 8000dfa:	f000 feb1 	bl	8001b60 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dfe:	2104      	movs	r1, #4
 8000e00:	485e      	ldr	r0, [pc, #376]	; (8000f7c <main+0x1ac>)
 8000e02:	f002 fb87 	bl	8003514 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e06:	2108      	movs	r1, #8
 8000e08:	485c      	ldr	r0, [pc, #368]	; (8000f7c <main+0x1ac>)
 8000e0a:	f002 fb83 	bl	8003514 <HAL_TIM_PWM_Start>
  TIM2->CCR2 =750;
 8000e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 =750;
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e20:	63da      	str	r2, [r3, #60]	; 0x3c
int iteration=1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	  //----------------------------------------------------

	  // Imprimir la leyenda de la iteración en la UART
	      char iteration_buffer[25];
	      sprintf(iteration_buffer, "\r\n--- Iteracion %d ---\r\n", iteration);
 8000e28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000e30:	4953      	ldr	r1, [pc, #332]	; (8000f80 <main+0x1b0>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 ff76 	bl	8004d24 <siprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t *)iteration_buffer, strlen(iteration_buffer), HAL_MAX_DELAY);
 8000e38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f987 	bl	8000150 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	484d      	ldr	r0, [pc, #308]	; (8000f84 <main+0x1b4>)
 8000e50:	f003 f8c8 	bl	8003fe4 <HAL_UART_Transmit>

	      // Imprimir los valores en la UART
	      char buffer[50];
	      sprintf(buffer, "LDR0: %lu, LDR1: %lu, LDR2: %lu, LDR3 %lu\r\n",
 8000e54:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <main+0x1a4>)
 8000e56:	6819      	ldr	r1, [r3, #0]
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <main+0x1a4>)
 8000e5a:	685c      	ldr	r4, [r3, #4]
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <main+0x1a4>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <main+0x1a4>)
 8000e62:	68d2      	ldr	r2, [r2, #12]
 8000e64:	4638      	mov	r0, r7
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	4946      	ldr	r1, [pc, #280]	; (8000f88 <main+0x1b8>)
 8000e70:	f003 ff58 	bl	8004d24 <siprintf>
	              LDR_values[0], LDR_values[1], LDR_values[2], LDR_values[3]);
	      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f96a 	bl	8000150 <strlen>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4639      	mov	r1, r7
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	483f      	ldr	r0, [pc, #252]	; (8000f84 <main+0x1b4>)
 8000e88:	f003 f8ac 	bl	8003fe4 <HAL_UART_Transmit>

	      // Calcular promedios de los valores de los LDRs
	      float promedio_arriba = (LDR_values[0] + LDR_values[1]) / 2;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <main+0x1a4>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <main+0x1a4>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fecb 	bl	8000c34 <__aeabi_ui2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	      float promedio_abajo = (LDR_values[2] + LDR_values[3]) / 2;
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <main+0x1a4>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <main+0x1a4>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	085b      	lsrs	r3, r3, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff febf 	bl	8000c34 <__aeabi_ui2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	      float promedio_iz = (LDR_values[0] + LDR_values[2]) / 2;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <main+0x1a4>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <main+0x1a4>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff feb3 	bl	8000c34 <__aeabi_ui2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	      float promedio_der = (LDR_values[1] + LDR_values[3]) / 2;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <main+0x1a4>)
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <main+0x1a4>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fea7 	bl	8000c34 <__aeabi_ui2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	      // Imprimir los valores promedio en la UART
	      char promedio_buffer[100];
	      sprintf(promedio_buffer, "Promedio Arriba: %.2f, Abajo: %.2f, Izquierda: %.2f, Derecha: %.2f\r\n",
 8000eec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000ef0:	f7ff fa9a 	bl	8000428 <__aeabi_f2d>
 8000ef4:	4682      	mov	sl, r0
 8000ef6:	468b      	mov	fp, r1
 8000ef8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8000efc:	f7ff fa94 	bl	8000428 <__aeabi_f2d>
 8000f00:	4604      	mov	r4, r0
 8000f02:	460d      	mov	r5, r1
 8000f04:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000f08:	f7ff fa8e 	bl	8000428 <__aeabi_f2d>
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	4689      	mov	r9, r1
 8000f10:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000f14:	f7ff fa88 	bl	8000428 <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f24:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f28:	e9cd 4500 	strd	r4, r5, [sp]
 8000f2c:	4652      	mov	r2, sl
 8000f2e:	465b      	mov	r3, fp
 8000f30:	4916      	ldr	r1, [pc, #88]	; (8000f8c <main+0x1bc>)
 8000f32:	f003 fef7 	bl	8004d24 <siprintf>
	              promedio_arriba, promedio_abajo, promedio_iz, promedio_der);
	      HAL_UART_Transmit(&huart1, (uint8_t *)promedio_buffer, strlen(promedio_buffer), HAL_MAX_DELAY);
 8000f36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f908 	bl	8000150 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <main+0x1b4>)
 8000f4e:	f003 f849 	bl	8003fe4 <HAL_UART_Transmit>

	      // Mover el seguidor según las lecturas
	      moverSeguidor(promedio_arriba, promedio_abajo, promedio_iz, promedio_der);
 8000f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f5a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8000f5e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000f62:	f000 f9af 	bl	80012c4 <moverSeguidor>

	      iteration++; // Incrementar el contador de iteraciones
 8000f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  {
 8000f70:	e75a      	b.n	8000e28 <main+0x58>
 8000f72:	bf00      	nop
 8000f74:	200002fc 	.word	0x200002fc
 8000f78:	200001f0 	.word	0x200001f0
 8000f7c:	20000264 	.word	0x20000264
 8000f80:	08006fd8 	.word	0x08006fd8
 8000f84:	200002ac 	.word	0x200002ac
 8000f88:	08006ff4 	.word	0x08006ff4
 8000f8c:	08007020 	.word	0x08007020

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 ff23 	bl	8004dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fd2f 	bl	8002a38 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000fe0:	f000 fa2f 	bl	8001442 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 ff9c 	bl	8002f3c <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800100a:	f000 fa1a 	bl	8001442 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800100e:	2302      	movs	r3, #2
 8001010:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001012:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001016:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f91c 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001026:	f000 fa0c 	bl	8001442 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <MX_ADC1_Init+0xd0>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_ADC1_Init+0xcc>)
 800104c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001054:	2201      	movs	r2, #1
 8001056:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_ADC1_Init+0xcc>)
 800105a:	2200      	movs	r2, #0
 800105c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001060:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_ADC1_Init+0xcc>)
 800106e:	2204      	movs	r2, #4
 8001070:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001074:	f000 fc9c 	bl	80019b0 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800107e:	f000 f9e0 	bl	8001442 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001082:	2303      	movs	r3, #3
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800108a:	2306      	movs	r3, #6
 800108c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <MX_ADC1_Init+0xcc>)
 8001094:	f000 fe5e 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 f9d0 	bl	8001442 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_ADC1_Init+0xcc>)
 80010b0:	f000 fe50 	bl	8001d54 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010ba:	f000 f9c2 	bl	8001442 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010be:	2305      	movs	r3, #5
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c2:	2303      	movs	r3, #3
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC1_Init+0xcc>)
 80010cc:	f000 fe42 	bl	8001d54 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010d6:	f000 f9b4 	bl	8001442 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010da:	2306      	movs	r3, #6
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010de:	2304      	movs	r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xcc>)
 80010e8:	f000 fe34 	bl	8001d54 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80010f2:	f000 f9a6 	bl	8001442 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200001f0 	.word	0x200001f0
 8001104:	40012400 	.word	0x40012400

08001108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <MX_TIM2_Init+0xfc>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001142:	220f      	movs	r2, #15
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_TIM2_Init+0xfc>)
 800114e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_TIM2_Init+0xfc>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001160:	4828      	ldr	r0, [pc, #160]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001162:	f002 f92f 	bl	80033c4 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800116c:	f000 f969 	bl	8001442 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117a:	4619      	mov	r1, r3
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <MX_TIM2_Init+0xfc>)
 800117e:	f002 fb27 	bl	80037d0 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001188:	f000 f95b 	bl	8001442 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <MX_TIM2_Init+0xfc>)
 800118e:	f002 f968 	bl	8003462 <HAL_TIM_PWM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001198:	f000 f953 	bl	8001442 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4619      	mov	r1, r3
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011ac:	f002 fe72 	bl	8003e94 <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011b6:	f000 f944 	bl	8001442 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011ba:	2370      	movs	r3, #112	; 0x70
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2204      	movs	r2, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011d2:	f002 fa3b 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011dc:	f000 f931 	bl	8001442 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2208      	movs	r2, #8
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011e8:	f002 fa30 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80011f2:	f000 f926 	bl	8001442 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011f8:	f000 f9de 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 80011fc:	bf00      	nop
 80011fe:	3738      	adds	r7, #56	; 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000264 	.word	0x20000264

08001208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_USART1_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001214:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART1_UART_Init+0x4c>)
 8001240:	f002 fe80 	bl	8003f44 <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800124a:	f000 f8fa 	bl	8001442 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002ac 	.word	0x200002ac
 8001258:	40013800 	.word	0x40013800

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA_Init+0x38>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_DMA_Init+0x38>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6153      	str	r3, [r2, #20]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_DMA_Init+0x38>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	200b      	movs	r0, #11
 8001280:	f001 f839 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001284:	200b      	movs	r0, #11
 8001286:	f001 f852 	bl	800232e <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_GPIO_Init+0x28>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <MX_GPIO_Init+0x28>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <MX_GPIO_Init+0x28>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000

080012c4 <moverSeguidor>:

/* USER CODE BEGIN 4 */

void moverSeguidor(float promedio_arriba, float promedio_abajo, float promedio_iz, float promedio_der) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  // Controlar el movimiento vertical
  if ((promedio_arriba - promedio_abajo) > UMBRAL_LUZ && pos_servoV < LIMITE_VERTICAL_SUP) {
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fbfb 	bl	8000ad0 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd6b 	bl	8000dbc <__aeabi_fcmpgt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00a      	beq.n	8001302 <moverSeguidor+0x3e>
 80012ec:	4b44      	ldr	r3, [pc, #272]	; (8001400 <moverSeguidor+0x13c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80012f4:	da05      	bge.n	8001302 <moverSeguidor+0x3e>
    pos_servoV++;
 80012f6:	4b42      	ldr	r3, [pc, #264]	; (8001400 <moverSeguidor+0x13c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a40      	ldr	r2, [pc, #256]	; (8001400 <moverSeguidor+0x13c>)
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e016      	b.n	8001330 <moverSeguidor+0x6c>
  }
  else if ((promedio_abajo - promedio_arriba) > UMBRAL_LUZ && pos_servoV > LIMITE_VERTICAL_INF) {
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f7ff fbe3 	bl	8000ad0 <__aeabi_fsub>
 800130a:	4603      	mov	r3, r0
 800130c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fd53 	bl	8000dbc <__aeabi_fcmpgt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <moverSeguidor+0x6c>
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <moverSeguidor+0x13c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8001324:	dd04      	ble.n	8001330 <moverSeguidor+0x6c>
    pos_servoV--;
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <moverSeguidor+0x13c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <moverSeguidor+0x13c>)
 800132e:	6013      	str	r3, [r2, #0]
  }

  // Controlar el movimiento horizontal
  if ((promedio_iz - promedio_der) > UMBRAL_LUZ && pos_servoH < LIMITE_HORIZONTAL_SUP) {
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fbcc 	bl	8000ad0 <__aeabi_fsub>
 8001338:	4603      	mov	r3, r0
 800133a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fd3c 	bl	8000dbc <__aeabi_fcmpgt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <moverSeguidor+0x9c>
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <moverSeguidor+0x140>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001352:	da05      	bge.n	8001360 <moverSeguidor+0x9c>
    pos_servoH++;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <moverSeguidor+0x140>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a2a      	ldr	r2, [pc, #168]	; (8001404 <moverSeguidor+0x140>)
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e016      	b.n	800138e <moverSeguidor+0xca>
  }
  else if ((promedio_der - promedio_iz) > UMBRAL_LUZ && pos_servoH > LIMITE_HORIZONTAL_INF) {
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	6838      	ldr	r0, [r7, #0]
 8001364:	f7ff fbb4 	bl	8000ad0 <__aeabi_fsub>
 8001368:	4603      	mov	r3, r0
 800136a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd24 	bl	8000dbc <__aeabi_fcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <moverSeguidor+0xca>
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <moverSeguidor+0x140>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f513 7f48 	cmn.w	r3, #800	; 0x320
 8001382:	dd04      	ble.n	800138e <moverSeguidor+0xca>
    pos_servoH--;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <moverSeguidor+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <moverSeguidor+0x140>)
 800138c:	6013      	str	r3, [r2, #0]
  }

  // Actualizar el PWM para controlar el servomotor vertical según la posición
  	TIM2->CCR2 = round(map(pos_servoV, -90, 90, 500, 1000));
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <moverSeguidor+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800139c:	225a      	movs	r2, #90	; 0x5a
 800139e:	f06f 0159 	mvn.w	r1, #89	; 0x59
 80013a2:	f000 f833 	bl	800140c <map>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f82b 	bl	8000404 <__aeabi_i2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb65 	bl	8000a88 <__aeabi_d2uiz>
 80013be:	4603      	mov	r3, r0
 80013c0:	63a3      	str	r3, [r4, #56]	; 0x38
  // Actualizar el PWM para controlar el servomotor horizontal según la posición
  	TIM2->CCR3 = round(map(pos_servoH, -900, 900, 500, 1000));
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <moverSeguidor+0x140>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <moverSeguidor+0x144>)
 80013d6:	f000 f819 	bl	800140c <map>
 80013da:	4603      	mov	r3, r0
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f811 	bl	8000404 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb4b 	bl	8000a88 <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f4 	.word	0x200002f4
 8001404:	200002f8 	.word	0x200002f8
 8001408:	fffffc7c 	.word	0xfffffc7c

0800140c <map>:


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	69b9      	ldr	r1, [r7, #24]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	1a8a      	subs	r2, r1, r2
 8001426:	fb03 f202 	mul.w	r2, r3, r2
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	fb92 f2f3 	sdiv	r2, r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4413      	add	r3, r2
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001446:	b672      	cpsid	i
}
 8001448:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144a:	e7fe      	b.n	800144a <Error_Handler+0x8>

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_MspInit+0x5c>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_MspInit+0x5c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x5c>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x5c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x5c>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_MspInit+0x60>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_MspInit+0x60>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_ADC_MspInit+0xbc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d149      	bne.n	8001564 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a20      	ldr	r2, [pc, #128]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_ADC_MspInit+0xc0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001500:	2378      	movs	r3, #120	; 0x78
 8001502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001504:	2303      	movs	r3, #3
 8001506:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4819      	ldr	r0, [pc, #100]	; (8001574 <HAL_ADC_MspInit+0xc4>)
 8001510:	f001 f916 	bl	8002740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_ADC_MspInit+0xcc>)
 8001518:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 800153e:	2220      	movs	r2, #32
 8001540:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001544:	2200      	movs	r2, #0
 8001546:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 800154a:	f000 ff0b 	bl	8002364 <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001554:	f7ff ff75 	bl	8001442 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_ADC_MspInit+0xc8>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40012400 	.word	0x40012400
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800
 8001578:	20000220 	.word	0x20000220
 800157c:	40020008 	.word	0x40020008

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001590:	d10b      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_TIM_Base_MspInit+0x34>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_TIM_Base_MspInit+0x34>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_TIM_Base_MspInit+0x34>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d6:	d117      	bne.n	8001608 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_MspPostInit+0x58>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_TIM_MspPostInit+0x58>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_MspPostInit+0x58>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015f0:	2306      	movs	r3, #6
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <HAL_TIM_MspPostInit+0x5c>)
 8001604:	f001 f89c 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800

08001618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_UART_MspInit+0x8c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d131      	bne.n	800169c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0x90>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_UART_MspInit+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_UART_MspInit+0x94>)
 800167e:	f001 f85f 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0x94>)
 8001698:	f001 f852 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010800 	.word	0x40010800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 f93f 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel1_IRQHandler+0x10>)
 8001706:	f000 fee7 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000220 	.word	0x20000220

08001714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <_kill>:

int _kill(int pid, int sig)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800172c:	f003 fbb0 	bl	8004e90 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	2216      	movs	r2, #22
 8001734:	601a      	str	r2, [r3, #0]
  return -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_exit>:

void _exit (int status)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800174a:	f04f 31ff 	mov.w	r1, #4294967295
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffe7 	bl	8001722 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001754:	e7fe      	b.n	8001754 <_exit+0x12>

08001756 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e00a      	b.n	800177e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001768:	f3af 8000 	nop.w
 800176c:	4601      	mov	r1, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	b2ca      	uxtb	r2, r1
 8001776:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	dbf0      	blt.n	8001768 <_read+0x12>
  }

  return len;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e009      	b.n	80017b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	60ba      	str	r2, [r7, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dbf1      	blt.n	80017a2 <_write+0x12>
  }
  return len;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_close>:

int _close(int file)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ee:	605a      	str	r2, [r3, #4]
  return 0;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <_isatty>:

int _isatty(int file)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f003 fb1a 	bl	8004e90 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20002800 	.word	0x20002800
 8001888:	00000400 	.word	0x00000400
 800188c:	2000030c 	.word	0x2000030c
 8001890:	20000460 	.word	0x20000460

08001894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a0:	f7ff fff8 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a6:	490c      	ldr	r1, [pc, #48]	; (80018d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018bc:	4c09      	ldr	r4, [pc, #36]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 fae7 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ce:	f7ff fa7f 	bl	8000dd0 <main>
  bx lr
 80018d2:	4770      	bx	lr
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018dc:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 80018e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018e4:	20000460 	.word	0x20000460

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x28>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x28>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 fcef 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fda0 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fd07 	bl	800234a <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 fccf 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x20>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008
 8001998:	20000310 	.word	0x20000310

0800199c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_GetTick+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000310 	.word	0x20000310

080019b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0be      	b.n	8001b50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fd5e 	bl	80014b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 faff 	bl	8001ff8 <ADC_ConversionStop_Disable>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8099 	bne.w	8001b3e <HAL_ADC_Init+0x18e>
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8095 	bne.w	8001b3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a1c:	f023 0302 	bic.w	r3, r3, #2
 8001a20:	f043 0202 	orr.w	r2, r3, #2
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7b1b      	ldrb	r3, [r3, #12]
 8001a36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a48:	d003      	beq.n	8001a52 <HAL_ADC_Init+0xa2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_ADC_Init+0xa8>
 8001a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_Init+0xaa>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7d1b      	ldrb	r3, [r3, #20]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d119      	bne.n	8001a9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7b1b      	ldrb	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	035a      	lsls	r2, r3, #13
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00b      	b.n	8001a9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f043 0220 	orr.w	r2, r3, #32
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_ADC_Init+0x1a8>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001acc:	d003      	beq.n	8001ad6 <HAL_ADC_Init+0x126>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d104      	bne.n	8001ae0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	051b      	lsls	r3, r3, #20
 8001ade:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_ADC_Init+0x1ac>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d10b      	bne.n	8001b1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b1a:	e018      	b.n	8001b4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f023 0312 	bic.w	r3, r3, #18
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b3c:	e007      	b.n	8001b4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	ffe1f7fd 	.word	0xffe1f7fd
 8001b5c:	ff1f0efe 	.word	0xff1f0efe

08001b60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a64      	ldr	r2, [pc, #400]	; (8001d08 <HAL_ADC_Start_DMA+0x1a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_ADC_Start_DMA+0x24>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_ADC_Start_DMA+0x1ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_Start_DMA+0x32>
 8001b84:	4b60      	ldr	r3, [pc, #384]	; (8001d08 <HAL_ADC_Start_DMA+0x1a8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 80b3 	bne.w	8001cf8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_Start_DMA+0x40>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e0ae      	b.n	8001cfe <HAL_ADC_Start_DMA+0x19e>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f9cb 	bl	8001f44 <ADC_Enable>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 809a 	bne.w	8001cee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_ADC_Start_DMA+0x1ac>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_Start_DMA+0x84>
 8001bd8:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <HAL_ADC_Start_DMA+0x1a8>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d115      	bne.n	8001c10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d026      	beq.n	8001c4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0e:	e01d      	b.n	8001c4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <HAL_ADC_Start_DMA+0x1a8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_ADC_Start_DMA+0xd0>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <HAL_ADC_Start_DMA+0x1ac>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d10d      	bne.n	8001c4c <HAL_ADC_Start_DMA+0xec>
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_ADC_Start_DMA+0x1a8>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	f023 0206 	bic.w	r2, r3, #6
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_ADC_Start_DMA+0x1b0>)
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <HAL_ADC_Start_DMA+0x1b4>)
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_ADC_Start_DMA+0x1b8>)
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0202 	mvn.w	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a18      	ldr	r0, [r3, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	334c      	adds	r3, #76	; 0x4c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f000 fbaf 	bl	8002418 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cc8:	d108      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cd8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cda:	e00f      	b.n	8001cfc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cec:	e006      	b.n	8001cfc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40012400 	.word	0x40012400
 8001d0c:	40012800 	.word	0x40012800
 8001d10:	0800207b 	.word	0x0800207b
 8001d14:	080020f7 	.word	0x080020f7
 8001d18:	08002113 	.word	0x08002113

08001d1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x20>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e0dc      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1da>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b06      	cmp	r3, #6
 8001d82:	d81c      	bhi.n	8001dbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b05      	subs	r3, #5
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b05      	subs	r3, #5
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
 8001dbc:	e03c      	b.n	8001e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d81c      	bhi.n	8001e00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b23      	subs	r3, #35	; 0x23
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4019      	ands	r1, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b23      	subs	r3, #35	; 0x23
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfe:	e01b      	b.n	8001e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b41      	subs	r3, #65	; 0x41
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b41      	subs	r3, #65	; 0x41
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d91c      	bls.n	8001e7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	2207      	movs	r2, #7
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4019      	ands	r1, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6898      	ldr	r0, [r3, #8]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	e019      	b.n	8001eae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6898      	ldr	r0, [r3, #8]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d003      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eba:	2b11      	cmp	r3, #17
 8001ebc:	d132      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d125      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d126      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ee4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d11a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9a      	lsrs	r2, r3, #18
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x1b2>
 8001f12:	e007      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	431bde83 	.word	0x431bde83

08001f44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d040      	beq.n	8001fe4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <ADC_Enable+0xac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <ADC_Enable+0xb0>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9b      	lsrs	r3, r3, #18
 8001f7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f80:	e002      	b.n	8001f88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8e:	f7ff fd05 	bl	800199c <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f94:	e01f      	b.n	8001fd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f96:	f7ff fd01 	bl	800199c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d918      	bls.n	8001fd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d011      	beq.n	8001fd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e007      	b.n	8001fe6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d1d8      	bne.n	8001f96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d12e      	bne.n	8002070 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002022:	f7ff fcbb 	bl	800199c <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002028:	e01b      	b.n	8002062 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202a:	f7ff fcb7 	bl	800199c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d914      	bls.n	8002062 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10d      	bne.n	8002062 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d0dc      	beq.n	800202a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d127      	bne.n	80020e4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020ae:	d115      	bne.n	80020dc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d111      	bne.n	80020dc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fe1d 	bl	8001d1c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020e2:	e004      	b.n	80020ee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff fe12 	bl	8001d2e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f043 0204 	orr.w	r2, r3, #4
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7ff fe01 	bl	8001d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4906      	ldr	r1, [pc, #24]	; (80021e0 <__NVIC_EnableIRQ+0x34>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff90 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff2d 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff42 	bl	8002190 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff90 	bl	8002238 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5f 	bl	80021e4 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff35 	bl	80021ac <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e043      	b.n	8002402 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_DMA_Init+0xa8>)
 8002382:	4413      	add	r3, r2
 8002384:	4a22      	ldr	r2, [pc, #136]	; (8002410 <HAL_DMA_Init+0xac>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_DMA_Init+0xb0>)
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	bffdfff8 	.word	0xbffdfff8
 8002410:	cccccccd 	.word	0xcccccccd
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Start_IT+0x20>
 8002434:	2302      	movs	r3, #2
 8002436:	e04b      	b.n	80024d0 <HAL_DMA_Start_IT+0xb8>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d13a      	bne.n	80024c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f937 	bl	80026e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 020e 	orr.w	r2, r2, #14
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e00f      	b.n	80024b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 020a 	orr.w	r2, r2, #10
 80024ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e005      	b.n	80024ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d04f      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xc8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d04a      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_DMA_IRQHandler+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d029      	beq.n	8002586 <HAL_DMA_IRQHandler+0xae>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a65      	ldr	r2, [pc, #404]	; (80026cc <HAL_DMA_IRQHandler+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_IRQHandler+0xaa>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a63      	ldr	r2, [pc, #396]	; (80026d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01a      	beq.n	800257c <HAL_DMA_IRQHandler+0xa4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a62      	ldr	r2, [pc, #392]	; (80026d4 <HAL_DMA_IRQHandler+0x1fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d012      	beq.n	8002576 <HAL_DMA_IRQHandler+0x9e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_DMA_IRQHandler+0x200>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x98>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5f      	ldr	r2, [pc, #380]	; (80026dc <HAL_DMA_IRQHandler+0x204>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d102      	bne.n	800256a <HAL_DMA_IRQHandler+0x92>
 8002564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002568:	e00e      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 800256a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800256e:	e00b      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002574:	e008      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257a:	e005      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	e002      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002582:	2340      	movs	r3, #64	; 0x40
 8002584:	e000      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002586:	2304      	movs	r3, #4
 8002588:	4a55      	ldr	r2, [pc, #340]	; (80026e0 <HAL_DMA_IRQHandler+0x208>)
 800258a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8094 	beq.w	80026be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800259e:	e08e      	b.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2202      	movs	r2, #2
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d056      	beq.n	800265e <HAL_DMA_IRQHandler+0x186>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d051      	beq.n	800265e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020a 	bic.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_DMA_IRQHandler+0x1f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d029      	beq.n	800263e <HAL_DMA_IRQHandler+0x166>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_DMA_IRQHandler+0x1f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_IRQHandler+0x162>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a35      	ldr	r2, [pc, #212]	; (80026d0 <HAL_DMA_IRQHandler+0x1f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01a      	beq.n	8002634 <HAL_DMA_IRQHandler+0x15c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d012      	beq.n	800262e <HAL_DMA_IRQHandler+0x156>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_DMA_IRQHandler+0x200>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00a      	beq.n	8002628 <HAL_DMA_IRQHandler+0x150>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_DMA_IRQHandler+0x204>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <HAL_DMA_IRQHandler+0x14a>
 800261c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002620:	e00e      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002626:	e00b      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	e008      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	e005      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002638:	e002      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800263a:	2320      	movs	r3, #32
 800263c:	e000      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800263e:	2302      	movs	r3, #2
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_DMA_IRQHandler+0x208>)
 8002642:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d034      	beq.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800265c:	e02f      	b.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2208      	movs	r2, #8
 8002664:	409a      	lsls	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 020e 	bic.w	r2, r2, #14
 8002686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
    }
  }
  return;
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
}
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40020008 	.word	0x40020008
 80026cc:	4002001c 	.word	0x4002001c
 80026d0:	40020030 	.word	0x40020030
 80026d4:	40020044 	.word	0x40020044
 80026d8:	40020058 	.word	0x40020058
 80026dc:	4002006c 	.word	0x4002006c
 80026e0:	40020000 	.word	0x40020000

080026e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d108      	bne.n	8002724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002722:	e007      	b.n	8002734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
	...

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002752:	e161      	b.n	8002a18 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002754:	2201      	movs	r2, #1
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8150 	bne.w	8002a12 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a97      	ldr	r2, [pc, #604]	; (80029d4 <HAL_GPIO_Init+0x294>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d05e      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 800277c:	4a95      	ldr	r2, [pc, #596]	; (80029d4 <HAL_GPIO_Init+0x294>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d875      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 8002782:	4a95      	ldr	r2, [pc, #596]	; (80029d8 <HAL_GPIO_Init+0x298>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d058      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 8002788:	4a93      	ldr	r2, [pc, #588]	; (80029d8 <HAL_GPIO_Init+0x298>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d86f      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 800278e:	4a93      	ldr	r2, [pc, #588]	; (80029dc <HAL_GPIO_Init+0x29c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d052      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 8002794:	4a91      	ldr	r2, [pc, #580]	; (80029dc <HAL_GPIO_Init+0x29c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d869      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 800279a:	4a91      	ldr	r2, [pc, #580]	; (80029e0 <HAL_GPIO_Init+0x2a0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04c      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 80027a0:	4a8f      	ldr	r2, [pc, #572]	; (80029e0 <HAL_GPIO_Init+0x2a0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d863      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 80027a6:	4a8f      	ldr	r2, [pc, #572]	; (80029e4 <HAL_GPIO_Init+0x2a4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d046      	beq.n	800283a <HAL_GPIO_Init+0xfa>
 80027ac:	4a8d      	ldr	r2, [pc, #564]	; (80029e4 <HAL_GPIO_Init+0x2a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d85d      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d82a      	bhi.n	800280c <HAL_GPIO_Init+0xcc>
 80027b6:	2b12      	cmp	r3, #18
 80027b8:	d859      	bhi.n	800286e <HAL_GPIO_Init+0x12e>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <HAL_GPIO_Init+0x80>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	0800283b 	.word	0x0800283b
 80027c4:	08002815 	.word	0x08002815
 80027c8:	08002827 	.word	0x08002827
 80027cc:	08002869 	.word	0x08002869
 80027d0:	0800286f 	.word	0x0800286f
 80027d4:	0800286f 	.word	0x0800286f
 80027d8:	0800286f 	.word	0x0800286f
 80027dc:	0800286f 	.word	0x0800286f
 80027e0:	0800286f 	.word	0x0800286f
 80027e4:	0800286f 	.word	0x0800286f
 80027e8:	0800286f 	.word	0x0800286f
 80027ec:	0800286f 	.word	0x0800286f
 80027f0:	0800286f 	.word	0x0800286f
 80027f4:	0800286f 	.word	0x0800286f
 80027f8:	0800286f 	.word	0x0800286f
 80027fc:	0800286f 	.word	0x0800286f
 8002800:	0800286f 	.word	0x0800286f
 8002804:	0800281d 	.word	0x0800281d
 8002808:	08002831 	.word	0x08002831
 800280c:	4a76      	ldr	r2, [pc, #472]	; (80029e8 <HAL_GPIO_Init+0x2a8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002812:	e02c      	b.n	800286e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e029      	b.n	8002870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	3304      	adds	r3, #4
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e024      	b.n	8002870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	3308      	adds	r3, #8
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e01f      	b.n	8002870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	330c      	adds	r3, #12
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e01a      	b.n	8002870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002842:	2304      	movs	r3, #4
 8002844:	623b      	str	r3, [r7, #32]
          break;
 8002846:	e013      	b.n	8002870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002850:	2308      	movs	r3, #8
 8002852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	611a      	str	r2, [r3, #16]
          break;
 800285a:	e009      	b.n	8002870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800285c:	2308      	movs	r3, #8
 800285e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	615a      	str	r2, [r3, #20]
          break;
 8002866:	e003      	b.n	8002870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
          break;
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x130>
          break;
 800286e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d801      	bhi.n	800287a <HAL_GPIO_Init+0x13a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	e001      	b.n	800287e <HAL_GPIO_Init+0x13e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2bff      	cmp	r3, #255	; 0xff
 8002884:	d802      	bhi.n	800288c <HAL_GPIO_Init+0x14c>
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	e002      	b.n	8002892 <HAL_GPIO_Init+0x152>
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	3b08      	subs	r3, #8
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	210f      	movs	r1, #15
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	6a39      	ldr	r1, [r7, #32]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a9 	beq.w	8002a12 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <HAL_GPIO_Init+0x2ac>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	4a49      	ldr	r2, [pc, #292]	; (80029ec <HAL_GPIO_Init+0x2ac>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6193      	str	r3, [r2, #24]
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_GPIO_Init+0x2ac>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	220f      	movs	r2, #15
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <HAL_GPIO_Init+0x2b4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1e0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_GPIO_Init+0x2b8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1dc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <HAL_GPIO_Init+0x2bc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1d8>
 8002914:	2302      	movs	r3, #2
 8002916:	e004      	b.n	8002922 <HAL_GPIO_Init+0x1e2>
 8002918:	2303      	movs	r3, #3
 800291a:	e002      	b.n	8002922 <HAL_GPIO_Init+0x1e2>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_GPIO_Init+0x1e2>
 8002920:	2300      	movs	r3, #0
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	f002 0203 	and.w	r2, r2, #3
 8002928:	0092      	lsls	r2, r2, #2
 800292a:	4093      	lsls	r3, r2
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002932:	492f      	ldr	r1, [pc, #188]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	492b      	ldr	r1, [pc, #172]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	4927      	ldr	r1, [pc, #156]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 8002964:	4013      	ands	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4921      	ldr	r1, [pc, #132]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	60cb      	str	r3, [r1, #12]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	491d      	ldr	r1, [pc, #116]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 800298c:	4013      	ands	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4917      	ldr	r1, [pc, #92]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4913      	ldr	r1, [pc, #76]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01f      	beq.n	8002a04 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	490d      	ldr	r1, [pc, #52]	; (8002a00 <HAL_GPIO_Init+0x2c0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e01f      	b.n	8002a12 <HAL_GPIO_Init+0x2d2>
 80029d2:	bf00      	nop
 80029d4:	10320000 	.word	0x10320000
 80029d8:	10310000 	.word	0x10310000
 80029dc:	10220000 	.word	0x10220000
 80029e0:	10210000 	.word	0x10210000
 80029e4:	10120000 	.word	0x10120000
 80029e8:	10110000 	.word	0x10110000
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010800 	.word	0x40010800
 80029f8:	40010c00 	.word	0x40010c00
 80029fc:	40011000 	.word	0x40011000
 8002a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_GPIO_Init+0x2f4>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4909      	ldr	r1, [pc, #36]	; (8002a34 <HAL_GPIO_Init+0x2f4>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f47f ae96 	bne.w	8002754 <HAL_GPIO_Init+0x14>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	372c      	adds	r7, #44	; 0x2c
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e272      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a64:	4b8f      	ldr	r3, [pc, #572]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
 8002a70:	4b8c      	ldr	r3, [pc, #560]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x12c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d168      	bne.n	8002b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e24c      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x76>
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xbc>
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002af4:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe ff42 	bl	800199c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe ff3e 	bl	800199c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e200      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe4>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ff2e 	bl	800199c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe ff2a 	bl	800199c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1ec      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x10c>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1c0      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fee3 	bl	800199c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fedf 	bl	800199c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1a1      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fec2 	bl	800199c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fe febe 	bl	800199c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e180      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d03a      	beq.n	8002cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fe fea2 	bl	800199c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fe9e 	bl	800199c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e160      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f000 face 	bl	800321c <RCC_Delay>
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7fe fe88 	bl	800199c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe84 	bl	800199c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d908      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e146      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	42420000 	.word	0x42420000
 8002cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b92      	ldr	r3, [pc, #584]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e9      	bne.n	8002c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a6 	beq.w	8002e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b85      	ldr	r3, [pc, #532]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7e      	ldr	r2, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fe45 	bl	800199c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe fe41 	bl	800199c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e103      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x4c8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x312>
 8002d3c:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	e02d      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d52:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	4b67      	ldr	r3, [pc, #412]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a66      	ldr	r2, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	e01c      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCC_OscConfig+0x356>
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a60      	ldr	r2, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	e00b      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b58      	ldr	r3, [pc, #352]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a57      	ldr	r2, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fdf5 	bl	800199c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fdf1 	bl	800199c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0b1      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	4b4b      	ldr	r3, [pc, #300]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ee      	beq.n	8002db6 <HAL_RCC_OscConfig+0x37e>
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fddf 	bl	800199c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fddb 	bl	800199c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e09b      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e20:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d061      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d146      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fdaf 	bl	800199c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fdab 	bl	800199c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e06d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4921      	ldr	r1, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a19      	ldr	r1, [r3, #32]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	491b      	ldr	r1, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fd7f 	bl	800199c <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fe fd7b 	bl	800199c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
 8002ec0:	e035      	b.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fd68 	bl	800199c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fd64 	bl	800199c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e026      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x498>
 8002eee:	e01e      	b.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e019      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x500>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d0      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4965      	ldr	r1, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d040      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e073      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4936      	ldr	r1, [pc, #216]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7fe fcb6 	bl	800199c <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fe fcb2 	bl	800199c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e053      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d210      	bcs.n	800308c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 0207 	bic.w	r2, r3, #7
 8003072:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4916      	ldr	r1, [pc, #88]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	490e      	ldr	r1, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ca:	f000 f821 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030ce:	4602      	mov	r2, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	490a      	ldr	r1, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	5ccb      	ldrb	r3, [r1, r3]
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1cc>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1d0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fc14 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40021000 	.word	0x40021000
 8003104:	08007068 	.word	0x08007068
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x30>
 800313a:	2b08      	cmp	r3, #8
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x36>
 800313e:	e027      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	613b      	str	r3, [r7, #16]
      break;
 8003144:	e027      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d010      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0c5b      	lsrs	r3, r3, #17
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003172:	fb03 f202 	mul.w	r2, r3, r2
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e004      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	613b      	str	r3, [r7, #16]
      break;
 800318e:	e002      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003196:	693b      	ldr	r3, [r7, #16]
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	08007080 	.word	0x08007080
 80031b0:	08007090 	.word	0x08007090
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff2 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08007078 	.word	0x08007078

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffde 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	08007078 	.word	0x08007078

0800321c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCC_Delay+0x34>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <RCC_Delay+0x38>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a5b      	lsrs	r3, r3, #9
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003238:	bf00      	nop
  }
  while (Delay --);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f9      	bne.n	8003238 <RCC_Delay+0x1c>
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000000 	.word	0x20000000
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003278:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a4b      	ldr	r2, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	61d3      	str	r3, [r2, #28]
 8003290:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d118      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fb70 	bl	800199c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fe fb6c 	bl	800199c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e06d      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032de:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d027      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032fc:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800330c:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003312:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d014      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe fb3b 	bl	800199c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe fb37 	bl	800199c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e036      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ee      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4917      	ldr	r1, [pc, #92]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	4313      	orrs	r3, r2
 800335c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	490b      	ldr	r1, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4904      	ldr	r1, [pc, #16]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
 80033c0:	42420440 	.word	0x42420440

080033c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e041      	b.n	800345a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f8c8 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f000 faac 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e041      	b.n	80034f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f839 	bl	8003500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f000 fa5d 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
	...

08003514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start+0x24>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e022      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start+0x3e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e015      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e008      	b.n	800357e <HAL_TIM_PWM_Start+0x6a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e059      	b.n	800363a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_TIM_PWM_Start+0x82>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003594:	e013      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x92>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a4:	e00b      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_PWM_Start+0xa2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b4:	e003      	b.n	80035be <HAL_TIM_PWM_Start+0xaa>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fc40 	bl	8003e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_TIM_PWM_Start+0x130>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_TIM_PWM_Start+0x130>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_TIM_PWM_Start+0xf0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d004      	beq.n	8003604 <HAL_TIM_PWM_Start+0xf0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_TIM_PWM_Start+0x134>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b06      	cmp	r3, #6
 8003614:	d010      	beq.n	8003638 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	e007      	b.n	8003638 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400

0800364c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003666:	2302      	movs	r3, #2
 8003668:	e0ae      	b.n	80037c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	f200 809f 	bhi.w	80037b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800367a:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	080036b5 	.word	0x080036b5
 8003684:	080037b9 	.word	0x080037b9
 8003688:	080037b9 	.word	0x080037b9
 800368c:	080037b9 	.word	0x080037b9
 8003690:	080036f5 	.word	0x080036f5
 8003694:	080037b9 	.word	0x080037b9
 8003698:	080037b9 	.word	0x080037b9
 800369c:	080037b9 	.word	0x080037b9
 80036a0:	08003737 	.word	0x08003737
 80036a4:	080037b9 	.word	0x080037b9
 80036a8:	080037b9 	.word	0x080037b9
 80036ac:	080037b9 	.word	0x080037b9
 80036b0:	08003777 	.word	0x08003777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f9a8 	bl	8003a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
      break;
 80036f2:	e064      	b.n	80037be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f9ee 	bl	8003adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
      break;
 8003734:	e043      	b.n	80037be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fa37 	bl	8003bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0208 	orr.w	r2, r2, #8
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0204 	bic.w	r2, r2, #4
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	61da      	str	r2, [r3, #28]
      break;
 8003774:	e023      	b.n	80037be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa81 	bl	8003c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	021a      	lsls	r2, r3, #8
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	61da      	str	r2, [r3, #28]
      break;
 80037b6:	e002      	b.n	80037be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	75fb      	strb	r3, [r7, #23]
      break;
 80037bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_ConfigClockSource+0x1c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e0b4      	b.n	8003956 <HAL_TIM_ConfigClockSource+0x186>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800380a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d03e      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382a:	f200 8087 	bhi.w	800393c <HAL_TIM_ConfigClockSource+0x16c>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	f000 8086 	beq.w	8003942 <HAL_TIM_ConfigClockSource+0x172>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d87f      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b70      	cmp	r3, #112	; 0x70
 800383e:	d01a      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0xa6>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d87b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b60      	cmp	r3, #96	; 0x60
 8003846:	d050      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x11a>
 8003848:	2b60      	cmp	r3, #96	; 0x60
 800384a:	d877      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b50      	cmp	r3, #80	; 0x50
 800384e:	d03c      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xfa>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d873      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d058      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x13a>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d86f      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b30      	cmp	r3, #48	; 0x30
 800385e:	d064      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d86b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b20      	cmp	r3, #32
 8003866:	d060      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d867      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05c      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x15a>
 8003870:	2b10      	cmp	r3, #16
 8003872:	d05a      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	e062      	b.n	800393c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003886:	f000 fac2 	bl	8003e0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	609a      	str	r2, [r3, #8]
      break;
 80038a2:	e04f      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b4:	f000 faab 	bl	8003e0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c6:	609a      	str	r2, [r3, #8]
      break;
 80038c8:	e03c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 fa22 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2150      	movs	r1, #80	; 0x50
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fa79 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80038e8:	e02c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 fa40 	bl	8003d7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2160      	movs	r1, #96	; 0x60
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa69 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003908:	e01c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fa02 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2140      	movs	r1, #64	; 0x40
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fa59 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003928:	e00c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f000 fa50 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 800393a:	e003      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      break;
 8003940:	e000      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_Base_SetConfig+0xa8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x28>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x28>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <TIM_Base_SetConfig+0xac>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <TIM_Base_SetConfig+0xa8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <TIM_Base_SetConfig+0x52>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d003      	beq.n	80039b2 <TIM_Base_SetConfig+0x52>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <TIM_Base_SetConfig+0xac>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d108      	bne.n	80039c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <TIM_Base_SetConfig+0xa8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d103      	bne.n	80039f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	615a      	str	r2, [r3, #20]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400

08003a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0201 	bic.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f023 0302 	bic.w	r3, r3, #2
 8003a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <TIM_OC1_SetConfig+0xc8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10c      	bne.n	8003a86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0308 	bic.w	r3, r3, #8
 8003a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <TIM_OC1_SetConfig+0xc8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00

08003adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 0210 	bic.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0320 	bic.w	r3, r3, #32
 8003b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <TIM_OC2_SetConfig+0xd0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10d      	bne.n	8003b58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a14      	ldr	r2, [pc, #80]	; (8003bac <TIM_OC2_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d113      	bne.n	8003b88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	40012c00 	.word	0x40012c00

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d113      	bne.n	8003c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <TIM_OC4_SetConfig+0x98>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 030a 	bic.w	r3, r3, #10
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0210 	bic.w	r2, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	021a      	lsls	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2201      	movs	r2, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	401a      	ands	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e041      	b.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10c      	bne.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400

08003f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e042      	b.n	8003fdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fb54 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f91d 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b20      	cmp	r3, #32
 8004002:	d16d      	bne.n	80040e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_UART_Transmit+0x2c>
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e066      	b.n	80040e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	; 0x21
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004022:	f7fd fcbb 	bl	800199c <HAL_GetTick>
 8004026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d108      	bne.n	8004050 <HAL_UART_Transmit+0x6c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d104      	bne.n	8004050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004058:	e02a      	b.n	80040b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f840 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e036      	b.n	80040e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	3302      	adds	r3, #2
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e007      	b.n	80040a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1cf      	bne.n	800405a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2140      	movs	r1, #64	; 0x40
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f810 	bl	80040ea <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e006      	b.n	80040e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b090      	sub	sp, #64	; 0x40
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fa:	e050      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d04c      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x30>
 800410a:	f7fd fc47 	bl	800199c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004116:	429a      	cmp	r2, r3
 8004118:	d241      	bcs.n	800419e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800413a:	637a      	str	r2, [r7, #52]	; 0x34
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	613b      	str	r3, [r7, #16]
   return(result);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416e:	623a      	str	r2, [r7, #32]
 8004170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	69f9      	ldr	r1, [r7, #28]
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	61bb      	str	r3, [r7, #24]
   return(result);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e5      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d09f      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3740      	adds	r7, #64	; 0x40
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe ffe0 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe ffc8 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <__cvt>:
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ea:	461f      	mov	r7, r3
 80042ec:	bfbb      	ittet	lt
 80042ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	461f      	movlt	r7, r3
 80042f4:	2300      	movge	r3, #0
 80042f6:	232d      	movlt	r3, #45	; 0x2d
 80042f8:	b088      	sub	sp, #32
 80042fa:	4614      	mov	r4, r2
 80042fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004300:	7013      	strb	r3, [r2, #0]
 8004302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004304:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004308:	f023 0820 	bic.w	r8, r3, #32
 800430c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004310:	d005      	beq.n	800431e <__cvt+0x3a>
 8004312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004316:	d100      	bne.n	800431a <__cvt+0x36>
 8004318:	3501      	adds	r5, #1
 800431a:	2302      	movs	r3, #2
 800431c:	e000      	b.n	8004320 <__cvt+0x3c>
 800431e:	2303      	movs	r3, #3
 8004320:	aa07      	add	r2, sp, #28
 8004322:	9204      	str	r2, [sp, #16]
 8004324:	aa06      	add	r2, sp, #24
 8004326:	e9cd a202 	strd	sl, r2, [sp, #8]
 800432a:	e9cd 3500 	strd	r3, r5, [sp]
 800432e:	4622      	mov	r2, r4
 8004330:	463b      	mov	r3, r7
 8004332:	f000 fe71 	bl	8005018 <_dtoa_r>
 8004336:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800433a:	4606      	mov	r6, r0
 800433c:	d102      	bne.n	8004344 <__cvt+0x60>
 800433e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004340:	07db      	lsls	r3, r3, #31
 8004342:	d522      	bpl.n	800438a <__cvt+0xa6>
 8004344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004348:	eb06 0905 	add.w	r9, r6, r5
 800434c:	d110      	bne.n	8004370 <__cvt+0x8c>
 800434e:	7833      	ldrb	r3, [r6, #0]
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d10a      	bne.n	800436a <__cvt+0x86>
 8004354:	2200      	movs	r2, #0
 8004356:	2300      	movs	r3, #0
 8004358:	4620      	mov	r0, r4
 800435a:	4639      	mov	r1, r7
 800435c:	f7fc fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8004360:	b918      	cbnz	r0, 800436a <__cvt+0x86>
 8004362:	f1c5 0501 	rsb	r5, r5, #1
 8004366:	f8ca 5000 	str.w	r5, [sl]
 800436a:	f8da 3000 	ldr.w	r3, [sl]
 800436e:	4499      	add	r9, r3
 8004370:	2200      	movs	r2, #0
 8004372:	2300      	movs	r3, #0
 8004374:	4620      	mov	r0, r4
 8004376:	4639      	mov	r1, r7
 8004378:	f7fc fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800437c:	b108      	cbz	r0, 8004382 <__cvt+0x9e>
 800437e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004382:	2230      	movs	r2, #48	; 0x30
 8004384:	9b07      	ldr	r3, [sp, #28]
 8004386:	454b      	cmp	r3, r9
 8004388:	d307      	bcc.n	800439a <__cvt+0xb6>
 800438a:	4630      	mov	r0, r6
 800438c:	9b07      	ldr	r3, [sp, #28]
 800438e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004390:	1b9b      	subs	r3, r3, r6
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	b008      	add	sp, #32
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	9107      	str	r1, [sp, #28]
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e7f0      	b.n	8004384 <__cvt+0xa0>

080043a2 <__exponent>:
 80043a2:	4603      	mov	r3, r0
 80043a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043a6:	2900      	cmp	r1, #0
 80043a8:	f803 2b02 	strb.w	r2, [r3], #2
 80043ac:	bfb6      	itet	lt
 80043ae:	222d      	movlt	r2, #45	; 0x2d
 80043b0:	222b      	movge	r2, #43	; 0x2b
 80043b2:	4249      	neglt	r1, r1
 80043b4:	2909      	cmp	r1, #9
 80043b6:	7042      	strb	r2, [r0, #1]
 80043b8:	dd2a      	ble.n	8004410 <__exponent+0x6e>
 80043ba:	f10d 0207 	add.w	r2, sp, #7
 80043be:	4617      	mov	r7, r2
 80043c0:	260a      	movs	r6, #10
 80043c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80043c6:	4694      	mov	ip, r2
 80043c8:	fb06 1415 	mls	r4, r6, r5, r1
 80043cc:	3430      	adds	r4, #48	; 0x30
 80043ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80043d2:	460c      	mov	r4, r1
 80043d4:	2c63      	cmp	r4, #99	; 0x63
 80043d6:	4629      	mov	r1, r5
 80043d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80043dc:	dcf1      	bgt.n	80043c2 <__exponent+0x20>
 80043de:	3130      	adds	r1, #48	; 0x30
 80043e0:	f1ac 0402 	sub.w	r4, ip, #2
 80043e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043e8:	4622      	mov	r2, r4
 80043ea:	1c41      	adds	r1, r0, #1
 80043ec:	42ba      	cmp	r2, r7
 80043ee:	d30a      	bcc.n	8004406 <__exponent+0x64>
 80043f0:	f10d 0209 	add.w	r2, sp, #9
 80043f4:	eba2 020c 	sub.w	r2, r2, ip
 80043f8:	42bc      	cmp	r4, r7
 80043fa:	bf88      	it	hi
 80043fc:	2200      	movhi	r2, #0
 80043fe:	4413      	add	r3, r2
 8004400:	1a18      	subs	r0, r3, r0
 8004402:	b003      	add	sp, #12
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	f812 5b01 	ldrb.w	r5, [r2], #1
 800440a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800440e:	e7ed      	b.n	80043ec <__exponent+0x4a>
 8004410:	2330      	movs	r3, #48	; 0x30
 8004412:	3130      	adds	r1, #48	; 0x30
 8004414:	7083      	strb	r3, [r0, #2]
 8004416:	70c1      	strb	r1, [r0, #3]
 8004418:	1d03      	adds	r3, r0, #4
 800441a:	e7f1      	b.n	8004400 <__exponent+0x5e>

0800441c <_printf_float>:
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	b091      	sub	sp, #68	; 0x44
 8004422:	460c      	mov	r4, r1
 8004424:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004428:	4616      	mov	r6, r2
 800442a:	461f      	mov	r7, r3
 800442c:	4605      	mov	r5, r0
 800442e:	f000 fce5 	bl	8004dfc <_localeconv_r>
 8004432:	6803      	ldr	r3, [r0, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	9309      	str	r3, [sp, #36]	; 0x24
 8004438:	f7fb fe8a 	bl	8000150 <strlen>
 800443c:	2300      	movs	r3, #0
 800443e:	930e      	str	r3, [sp, #56]	; 0x38
 8004440:	f8d8 3000 	ldr.w	r3, [r8]
 8004444:	900a      	str	r0, [sp, #40]	; 0x28
 8004446:	3307      	adds	r3, #7
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	f103 0208 	add.w	r2, r3, #8
 8004450:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004454:	f8d4 b000 	ldr.w	fp, [r4]
 8004458:	f8c8 2000 	str.w	r2, [r8]
 800445c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004460:	4652      	mov	r2, sl
 8004462:	4643      	mov	r3, r8
 8004464:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004468:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800446c:	930b      	str	r3, [sp, #44]	; 0x2c
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	4650      	mov	r0, sl
 8004474:	4b9c      	ldr	r3, [pc, #624]	; (80046e8 <_printf_float+0x2cc>)
 8004476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004478:	f7fc fac8 	bl	8000a0c <__aeabi_dcmpun>
 800447c:	bb70      	cbnz	r0, 80044dc <_printf_float+0xc0>
 800447e:	f04f 32ff 	mov.w	r2, #4294967295
 8004482:	4650      	mov	r0, sl
 8004484:	4b98      	ldr	r3, [pc, #608]	; (80046e8 <_printf_float+0x2cc>)
 8004486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004488:	f7fc faa2 	bl	80009d0 <__aeabi_dcmple>
 800448c:	bb30      	cbnz	r0, 80044dc <_printf_float+0xc0>
 800448e:	2200      	movs	r2, #0
 8004490:	2300      	movs	r3, #0
 8004492:	4650      	mov	r0, sl
 8004494:	4641      	mov	r1, r8
 8004496:	f7fc fa91 	bl	80009bc <__aeabi_dcmplt>
 800449a:	b110      	cbz	r0, 80044a2 <_printf_float+0x86>
 800449c:	232d      	movs	r3, #45	; 0x2d
 800449e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a2:	4a92      	ldr	r2, [pc, #584]	; (80046ec <_printf_float+0x2d0>)
 80044a4:	4b92      	ldr	r3, [pc, #584]	; (80046f0 <_printf_float+0x2d4>)
 80044a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044aa:	bf94      	ite	ls
 80044ac:	4690      	movls	r8, r2
 80044ae:	4698      	movhi	r8, r3
 80044b0:	2303      	movs	r3, #3
 80044b2:	f04f 0a00 	mov.w	sl, #0
 80044b6:	6123      	str	r3, [r4, #16]
 80044b8:	f02b 0304 	bic.w	r3, fp, #4
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	4633      	mov	r3, r6
 80044c0:	4621      	mov	r1, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	9700      	str	r7, [sp, #0]
 80044c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80044c8:	f000 f9d6 	bl	8004878 <_printf_common>
 80044cc:	3001      	adds	r0, #1
 80044ce:	f040 8090 	bne.w	80045f2 <_printf_float+0x1d6>
 80044d2:	f04f 30ff 	mov.w	r0, #4294967295
 80044d6:	b011      	add	sp, #68	; 0x44
 80044d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044dc:	4652      	mov	r2, sl
 80044de:	4643      	mov	r3, r8
 80044e0:	4650      	mov	r0, sl
 80044e2:	4641      	mov	r1, r8
 80044e4:	f7fc fa92 	bl	8000a0c <__aeabi_dcmpun>
 80044e8:	b148      	cbz	r0, 80044fe <_printf_float+0xe2>
 80044ea:	f1b8 0f00 	cmp.w	r8, #0
 80044ee:	bfb8      	it	lt
 80044f0:	232d      	movlt	r3, #45	; 0x2d
 80044f2:	4a80      	ldr	r2, [pc, #512]	; (80046f4 <_printf_float+0x2d8>)
 80044f4:	bfb8      	it	lt
 80044f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <_printf_float+0x2dc>)
 80044fc:	e7d3      	b.n	80044a6 <_printf_float+0x8a>
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	d142      	bne.n	800458e <_printf_float+0x172>
 8004508:	2306      	movs	r3, #6
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	9206      	str	r2, [sp, #24]
 8004510:	aa0e      	add	r2, sp, #56	; 0x38
 8004512:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004516:	aa0d      	add	r2, sp, #52	; 0x34
 8004518:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800451c:	9203      	str	r2, [sp, #12]
 800451e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004522:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	4652      	mov	r2, sl
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4628      	mov	r0, r5
 8004530:	4643      	mov	r3, r8
 8004532:	910b      	str	r1, [sp, #44]	; 0x2c
 8004534:	f7ff fed6 	bl	80042e4 <__cvt>
 8004538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800453a:	4680      	mov	r8, r0
 800453c:	2947      	cmp	r1, #71	; 0x47
 800453e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004540:	d108      	bne.n	8004554 <_printf_float+0x138>
 8004542:	1cc8      	adds	r0, r1, #3
 8004544:	db02      	blt.n	800454c <_printf_float+0x130>
 8004546:	6863      	ldr	r3, [r4, #4]
 8004548:	4299      	cmp	r1, r3
 800454a:	dd40      	ble.n	80045ce <_printf_float+0x1b2>
 800454c:	f1a9 0902 	sub.w	r9, r9, #2
 8004550:	fa5f f989 	uxtb.w	r9, r9
 8004554:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004558:	d81f      	bhi.n	800459a <_printf_float+0x17e>
 800455a:	464a      	mov	r2, r9
 800455c:	3901      	subs	r1, #1
 800455e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004562:	910d      	str	r1, [sp, #52]	; 0x34
 8004564:	f7ff ff1d 	bl	80043a2 <__exponent>
 8004568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800456a:	4682      	mov	sl, r0
 800456c:	1813      	adds	r3, r2, r0
 800456e:	2a01      	cmp	r2, #1
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	dc02      	bgt.n	800457a <_printf_float+0x15e>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	07d2      	lsls	r2, r2, #31
 8004578:	d501      	bpl.n	800457e <_printf_float+0x162>
 800457a:	3301      	adds	r3, #1
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004582:	2b00      	cmp	r3, #0
 8004584:	d09b      	beq.n	80044be <_printf_float+0xa2>
 8004586:	232d      	movs	r3, #45	; 0x2d
 8004588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458c:	e797      	b.n	80044be <_printf_float+0xa2>
 800458e:	2947      	cmp	r1, #71	; 0x47
 8004590:	d1bc      	bne.n	800450c <_printf_float+0xf0>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ba      	bne.n	800450c <_printf_float+0xf0>
 8004596:	2301      	movs	r3, #1
 8004598:	e7b7      	b.n	800450a <_printf_float+0xee>
 800459a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800459e:	d118      	bne.n	80045d2 <_printf_float+0x1b6>
 80045a0:	2900      	cmp	r1, #0
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	dd0b      	ble.n	80045be <_printf_float+0x1a2>
 80045a6:	6121      	str	r1, [r4, #16]
 80045a8:	b913      	cbnz	r3, 80045b0 <_printf_float+0x194>
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	07d0      	lsls	r0, r2, #31
 80045ae:	d502      	bpl.n	80045b6 <_printf_float+0x19a>
 80045b0:	3301      	adds	r3, #1
 80045b2:	440b      	add	r3, r1
 80045b4:	6123      	str	r3, [r4, #16]
 80045b6:	f04f 0a00 	mov.w	sl, #0
 80045ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80045bc:	e7df      	b.n	800457e <_printf_float+0x162>
 80045be:	b913      	cbnz	r3, 80045c6 <_printf_float+0x1aa>
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	07d2      	lsls	r2, r2, #31
 80045c4:	d501      	bpl.n	80045ca <_printf_float+0x1ae>
 80045c6:	3302      	adds	r3, #2
 80045c8:	e7f4      	b.n	80045b4 <_printf_float+0x198>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e7f2      	b.n	80045b4 <_printf_float+0x198>
 80045ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045d4:	4299      	cmp	r1, r3
 80045d6:	db05      	blt.n	80045e4 <_printf_float+0x1c8>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	6121      	str	r1, [r4, #16]
 80045dc:	07d8      	lsls	r0, r3, #31
 80045de:	d5ea      	bpl.n	80045b6 <_printf_float+0x19a>
 80045e0:	1c4b      	adds	r3, r1, #1
 80045e2:	e7e7      	b.n	80045b4 <_printf_float+0x198>
 80045e4:	2900      	cmp	r1, #0
 80045e6:	bfcc      	ite	gt
 80045e8:	2201      	movgt	r2, #1
 80045ea:	f1c1 0202 	rsble	r2, r1, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	e7e0      	b.n	80045b4 <_printf_float+0x198>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	055a      	lsls	r2, r3, #21
 80045f6:	d407      	bmi.n	8004608 <_printf_float+0x1ec>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	4642      	mov	r2, r8
 80045fc:	4631      	mov	r1, r6
 80045fe:	4628      	mov	r0, r5
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	d12b      	bne.n	800465e <_printf_float+0x242>
 8004606:	e764      	b.n	80044d2 <_printf_float+0xb6>
 8004608:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800460c:	f240 80dd 	bls.w	80047ca <_printf_float+0x3ae>
 8004610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004614:	2200      	movs	r2, #0
 8004616:	2300      	movs	r3, #0
 8004618:	f7fc f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800461c:	2800      	cmp	r0, #0
 800461e:	d033      	beq.n	8004688 <_printf_float+0x26c>
 8004620:	2301      	movs	r3, #1
 8004622:	4631      	mov	r1, r6
 8004624:	4628      	mov	r0, r5
 8004626:	4a35      	ldr	r2, [pc, #212]	; (80046fc <_printf_float+0x2e0>)
 8004628:	47b8      	blx	r7
 800462a:	3001      	adds	r0, #1
 800462c:	f43f af51 	beq.w	80044d2 <_printf_float+0xb6>
 8004630:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004634:	429a      	cmp	r2, r3
 8004636:	db02      	blt.n	800463e <_printf_float+0x222>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	07d8      	lsls	r0, r3, #31
 800463c:	d50f      	bpl.n	800465e <_printf_float+0x242>
 800463e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004642:	4631      	mov	r1, r6
 8004644:	4628      	mov	r0, r5
 8004646:	47b8      	blx	r7
 8004648:	3001      	adds	r0, #1
 800464a:	f43f af42 	beq.w	80044d2 <_printf_float+0xb6>
 800464e:	f04f 0800 	mov.w	r8, #0
 8004652:	f104 091a 	add.w	r9, r4, #26
 8004656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004658:	3b01      	subs	r3, #1
 800465a:	4543      	cmp	r3, r8
 800465c:	dc09      	bgt.n	8004672 <_printf_float+0x256>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	079b      	lsls	r3, r3, #30
 8004662:	f100 8104 	bmi.w	800486e <_printf_float+0x452>
 8004666:	68e0      	ldr	r0, [r4, #12]
 8004668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800466a:	4298      	cmp	r0, r3
 800466c:	bfb8      	it	lt
 800466e:	4618      	movlt	r0, r3
 8004670:	e731      	b.n	80044d6 <_printf_float+0xba>
 8004672:	2301      	movs	r3, #1
 8004674:	464a      	mov	r2, r9
 8004676:	4631      	mov	r1, r6
 8004678:	4628      	mov	r0, r5
 800467a:	47b8      	blx	r7
 800467c:	3001      	adds	r0, #1
 800467e:	f43f af28 	beq.w	80044d2 <_printf_float+0xb6>
 8004682:	f108 0801 	add.w	r8, r8, #1
 8004686:	e7e6      	b.n	8004656 <_printf_float+0x23a>
 8004688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800468a:	2b00      	cmp	r3, #0
 800468c:	dc38      	bgt.n	8004700 <_printf_float+0x2e4>
 800468e:	2301      	movs	r3, #1
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	4a19      	ldr	r2, [pc, #100]	; (80046fc <_printf_float+0x2e0>)
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	f43f af1a 	beq.w	80044d2 <_printf_float+0xb6>
 800469e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d102      	bne.n	80046ac <_printf_float+0x290>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07d9      	lsls	r1, r3, #31
 80046aa:	d5d8      	bpl.n	800465e <_printf_float+0x242>
 80046ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af0b 	beq.w	80044d2 <_printf_float+0xb6>
 80046bc:	f04f 0900 	mov.w	r9, #0
 80046c0:	f104 0a1a 	add.w	sl, r4, #26
 80046c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046c6:	425b      	negs	r3, r3
 80046c8:	454b      	cmp	r3, r9
 80046ca:	dc01      	bgt.n	80046d0 <_printf_float+0x2b4>
 80046cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ce:	e794      	b.n	80045fa <_printf_float+0x1de>
 80046d0:	2301      	movs	r3, #1
 80046d2:	4652      	mov	r2, sl
 80046d4:	4631      	mov	r1, r6
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b8      	blx	r7
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f aef9 	beq.w	80044d2 <_printf_float+0xb6>
 80046e0:	f109 0901 	add.w	r9, r9, #1
 80046e4:	e7ee      	b.n	80046c4 <_printf_float+0x2a8>
 80046e6:	bf00      	nop
 80046e8:	7fefffff 	.word	0x7fefffff
 80046ec:	08007092 	.word	0x08007092
 80046f0:	08007096 	.word	0x08007096
 80046f4:	0800709a 	.word	0x0800709a
 80046f8:	0800709e 	.word	0x0800709e
 80046fc:	080070a2 	.word	0x080070a2
 8004700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004704:	429a      	cmp	r2, r3
 8004706:	bfa8      	it	ge
 8004708:	461a      	movge	r2, r3
 800470a:	2a00      	cmp	r2, #0
 800470c:	4691      	mov	r9, r2
 800470e:	dc37      	bgt.n	8004780 <_printf_float+0x364>
 8004710:	f04f 0b00 	mov.w	fp, #0
 8004714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004718:	f104 021a 	add.w	r2, r4, #26
 800471c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004720:	ebaa 0309 	sub.w	r3, sl, r9
 8004724:	455b      	cmp	r3, fp
 8004726:	dc33      	bgt.n	8004790 <_printf_float+0x374>
 8004728:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800472c:	429a      	cmp	r2, r3
 800472e:	db3b      	blt.n	80047a8 <_printf_float+0x38c>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	07da      	lsls	r2, r3, #31
 8004734:	d438      	bmi.n	80047a8 <_printf_float+0x38c>
 8004736:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800473a:	eba2 0903 	sub.w	r9, r2, r3
 800473e:	eba2 020a 	sub.w	r2, r2, sl
 8004742:	4591      	cmp	r9, r2
 8004744:	bfa8      	it	ge
 8004746:	4691      	movge	r9, r2
 8004748:	f1b9 0f00 	cmp.w	r9, #0
 800474c:	dc34      	bgt.n	80047b8 <_printf_float+0x39c>
 800474e:	f04f 0800 	mov.w	r8, #0
 8004752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004756:	f104 0a1a 	add.w	sl, r4, #26
 800475a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	eba3 0309 	sub.w	r3, r3, r9
 8004764:	4543      	cmp	r3, r8
 8004766:	f77f af7a 	ble.w	800465e <_printf_float+0x242>
 800476a:	2301      	movs	r3, #1
 800476c:	4652      	mov	r2, sl
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	f43f aeac 	beq.w	80044d2 <_printf_float+0xb6>
 800477a:	f108 0801 	add.w	r8, r8, #1
 800477e:	e7ec      	b.n	800475a <_printf_float+0x33e>
 8004780:	4613      	mov	r3, r2
 8004782:	4631      	mov	r1, r6
 8004784:	4642      	mov	r2, r8
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	d1c0      	bne.n	8004710 <_printf_float+0x2f4>
 800478e:	e6a0      	b.n	80044d2 <_printf_float+0xb6>
 8004790:	2301      	movs	r3, #1
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	920b      	str	r2, [sp, #44]	; 0x2c
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f43f ae99 	beq.w	80044d2 <_printf_float+0xb6>
 80047a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047a2:	f10b 0b01 	add.w	fp, fp, #1
 80047a6:	e7b9      	b.n	800471c <_printf_float+0x300>
 80047a8:	4631      	mov	r1, r6
 80047aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	d1bf      	bne.n	8004736 <_printf_float+0x31a>
 80047b6:	e68c      	b.n	80044d2 <_printf_float+0xb6>
 80047b8:	464b      	mov	r3, r9
 80047ba:	4631      	mov	r1, r6
 80047bc:	4628      	mov	r0, r5
 80047be:	eb08 020a 	add.w	r2, r8, sl
 80047c2:	47b8      	blx	r7
 80047c4:	3001      	adds	r0, #1
 80047c6:	d1c2      	bne.n	800474e <_printf_float+0x332>
 80047c8:	e683      	b.n	80044d2 <_printf_float+0xb6>
 80047ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047cc:	2a01      	cmp	r2, #1
 80047ce:	dc01      	bgt.n	80047d4 <_printf_float+0x3b8>
 80047d0:	07db      	lsls	r3, r3, #31
 80047d2:	d539      	bpl.n	8004848 <_printf_float+0x42c>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4642      	mov	r2, r8
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f ae77 	beq.w	80044d2 <_printf_float+0xb6>
 80047e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e8:	4631      	mov	r1, r6
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b8      	blx	r7
 80047ee:	3001      	adds	r0, #1
 80047f0:	f43f ae6f 	beq.w	80044d2 <_printf_float+0xb6>
 80047f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004800:	f7fc f8d2 	bl	80009a8 <__aeabi_dcmpeq>
 8004804:	b9d8      	cbnz	r0, 800483e <_printf_float+0x422>
 8004806:	f109 33ff 	add.w	r3, r9, #4294967295
 800480a:	f108 0201 	add.w	r2, r8, #1
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	47b8      	blx	r7
 8004814:	3001      	adds	r0, #1
 8004816:	d10e      	bne.n	8004836 <_printf_float+0x41a>
 8004818:	e65b      	b.n	80044d2 <_printf_float+0xb6>
 800481a:	2301      	movs	r3, #1
 800481c:	464a      	mov	r2, r9
 800481e:	4631      	mov	r1, r6
 8004820:	4628      	mov	r0, r5
 8004822:	47b8      	blx	r7
 8004824:	3001      	adds	r0, #1
 8004826:	f43f ae54 	beq.w	80044d2 <_printf_float+0xb6>
 800482a:	f108 0801 	add.w	r8, r8, #1
 800482e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004830:	3b01      	subs	r3, #1
 8004832:	4543      	cmp	r3, r8
 8004834:	dcf1      	bgt.n	800481a <_printf_float+0x3fe>
 8004836:	4653      	mov	r3, sl
 8004838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800483c:	e6de      	b.n	80045fc <_printf_float+0x1e0>
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	f104 091a 	add.w	r9, r4, #26
 8004846:	e7f2      	b.n	800482e <_printf_float+0x412>
 8004848:	2301      	movs	r3, #1
 800484a:	4642      	mov	r2, r8
 800484c:	e7df      	b.n	800480e <_printf_float+0x3f2>
 800484e:	2301      	movs	r3, #1
 8004850:	464a      	mov	r2, r9
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	f43f ae3a 	beq.w	80044d2 <_printf_float+0xb6>
 800485e:	f108 0801 	add.w	r8, r8, #1
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004866:	1a5b      	subs	r3, r3, r1
 8004868:	4543      	cmp	r3, r8
 800486a:	dcf0      	bgt.n	800484e <_printf_float+0x432>
 800486c:	e6fb      	b.n	8004666 <_printf_float+0x24a>
 800486e:	f04f 0800 	mov.w	r8, #0
 8004872:	f104 0919 	add.w	r9, r4, #25
 8004876:	e7f4      	b.n	8004862 <_printf_float+0x446>

08004878 <_printf_common>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	4616      	mov	r6, r2
 800487e:	4699      	mov	r9, r3
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	4607      	mov	r7, r0
 8004886:	4293      	cmp	r3, r2
 8004888:	bfb8      	it	lt
 800488a:	4613      	movlt	r3, r2
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004892:	460c      	mov	r4, r1
 8004894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004898:	b10a      	cbz	r2, 800489e <_printf_common+0x26>
 800489a:	3301      	adds	r3, #1
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	0699      	lsls	r1, r3, #26
 80048a2:	bf42      	ittt	mi
 80048a4:	6833      	ldrmi	r3, [r6, #0]
 80048a6:	3302      	addmi	r3, #2
 80048a8:	6033      	strmi	r3, [r6, #0]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d106      	bne.n	80048c0 <_printf_common+0x48>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	6832      	ldr	r2, [r6, #0]
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dc2b      	bgt.n	8004918 <_printf_common+0xa0>
 80048c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048c4:	1e13      	subs	r3, r2, #0
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	0692      	lsls	r2, r2, #26
 80048ce:	d430      	bmi.n	8004932 <_printf_common+0xba>
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d023      	beq.n	8004926 <_printf_common+0xae>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	6922      	ldr	r2, [r4, #16]
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf14      	ite	ne
 80048ea:	2500      	movne	r5, #0
 80048ec:	6833      	ldreq	r3, [r6, #0]
 80048ee:	f04f 0600 	mov.w	r6, #0
 80048f2:	bf08      	it	eq
 80048f4:	68e5      	ldreq	r5, [r4, #12]
 80048f6:	f104 041a 	add.w	r4, r4, #26
 80048fa:	bf08      	it	eq
 80048fc:	1aed      	subeq	r5, r5, r3
 80048fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004902:	bf08      	it	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	4293      	cmp	r3, r2
 800490a:	bfc4      	itt	gt
 800490c:	1a9b      	subgt	r3, r3, r2
 800490e:	18ed      	addgt	r5, r5, r3
 8004910:	42b5      	cmp	r5, r6
 8004912:	d11a      	bne.n	800494a <_printf_common+0xd2>
 8004914:	2000      	movs	r0, #0
 8004916:	e008      	b.n	800492a <_printf_common+0xb2>
 8004918:	2301      	movs	r3, #1
 800491a:	4652      	mov	r2, sl
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d103      	bne.n	800492e <_printf_common+0xb6>
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492e:	3501      	adds	r5, #1
 8004930:	e7c1      	b.n	80048b6 <_printf_common+0x3e>
 8004932:	2030      	movs	r0, #48	; 0x30
 8004934:	18e1      	adds	r1, r4, r3
 8004936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004940:	4422      	add	r2, r4
 8004942:	3302      	adds	r3, #2
 8004944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004948:	e7c2      	b.n	80048d0 <_printf_common+0x58>
 800494a:	2301      	movs	r3, #1
 800494c:	4622      	mov	r2, r4
 800494e:	4649      	mov	r1, r9
 8004950:	4638      	mov	r0, r7
 8004952:	47c0      	blx	r8
 8004954:	3001      	adds	r0, #1
 8004956:	d0e6      	beq.n	8004926 <_printf_common+0xae>
 8004958:	3601      	adds	r6, #1
 800495a:	e7d9      	b.n	8004910 <_printf_common+0x98>

0800495c <_printf_i>:
 800495c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	7e0f      	ldrb	r7, [r1, #24]
 8004962:	4691      	mov	r9, r2
 8004964:	2f78      	cmp	r7, #120	; 0x78
 8004966:	4680      	mov	r8, r0
 8004968:	460c      	mov	r4, r1
 800496a:	469a      	mov	sl, r3
 800496c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800496e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004972:	d807      	bhi.n	8004984 <_printf_i+0x28>
 8004974:	2f62      	cmp	r7, #98	; 0x62
 8004976:	d80a      	bhi.n	800498e <_printf_i+0x32>
 8004978:	2f00      	cmp	r7, #0
 800497a:	f000 80d5 	beq.w	8004b28 <_printf_i+0x1cc>
 800497e:	2f58      	cmp	r7, #88	; 0x58
 8004980:	f000 80c1 	beq.w	8004b06 <_printf_i+0x1aa>
 8004984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800498c:	e03a      	b.n	8004a04 <_printf_i+0xa8>
 800498e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004992:	2b15      	cmp	r3, #21
 8004994:	d8f6      	bhi.n	8004984 <_printf_i+0x28>
 8004996:	a101      	add	r1, pc, #4	; (adr r1, 800499c <_printf_i+0x40>)
 8004998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800499c:	080049f5 	.word	0x080049f5
 80049a0:	08004a09 	.word	0x08004a09
 80049a4:	08004985 	.word	0x08004985
 80049a8:	08004985 	.word	0x08004985
 80049ac:	08004985 	.word	0x08004985
 80049b0:	08004985 	.word	0x08004985
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004985 	.word	0x08004985
 80049bc:	08004985 	.word	0x08004985
 80049c0:	08004985 	.word	0x08004985
 80049c4:	08004985 	.word	0x08004985
 80049c8:	08004b0f 	.word	0x08004b0f
 80049cc:	08004a35 	.word	0x08004a35
 80049d0:	08004ac9 	.word	0x08004ac9
 80049d4:	08004985 	.word	0x08004985
 80049d8:	08004985 	.word	0x08004985
 80049dc:	08004b31 	.word	0x08004b31
 80049e0:	08004985 	.word	0x08004985
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004985 	.word	0x08004985
 80049ec:	08004985 	.word	0x08004985
 80049f0:	08004ad1 	.word	0x08004ad1
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	602a      	str	r2, [r5, #0]
 80049fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0a0      	b.n	8004b4a <_printf_i+0x1ee>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	0607      	lsls	r7, r0, #24
 8004a0e:	f103 0104 	add.w	r1, r3, #4
 8004a12:	6029      	str	r1, [r5, #0]
 8004a14:	d501      	bpl.n	8004a1a <_printf_i+0xbe>
 8004a16:	681e      	ldr	r6, [r3, #0]
 8004a18:	e003      	b.n	8004a22 <_printf_i+0xc6>
 8004a1a:	0646      	lsls	r6, r0, #25
 8004a1c:	d5fb      	bpl.n	8004a16 <_printf_i+0xba>
 8004a1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	da03      	bge.n	8004a2e <_printf_i+0xd2>
 8004a26:	232d      	movs	r3, #45	; 0x2d
 8004a28:	4276      	negs	r6, r6
 8004a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2e:	230a      	movs	r3, #10
 8004a30:	4859      	ldr	r0, [pc, #356]	; (8004b98 <_printf_i+0x23c>)
 8004a32:	e012      	b.n	8004a5a <_printf_i+0xfe>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	6029      	str	r1, [r5, #0]
 8004a3c:	0605      	lsls	r5, r0, #24
 8004a3e:	d501      	bpl.n	8004a44 <_printf_i+0xe8>
 8004a40:	681e      	ldr	r6, [r3, #0]
 8004a42:	e002      	b.n	8004a4a <_printf_i+0xee>
 8004a44:	0641      	lsls	r1, r0, #25
 8004a46:	d5fb      	bpl.n	8004a40 <_printf_i+0xe4>
 8004a48:	881e      	ldrh	r6, [r3, #0]
 8004a4a:	2f6f      	cmp	r7, #111	; 0x6f
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2308      	moveq	r3, #8
 8004a50:	230a      	movne	r3, #10
 8004a52:	4851      	ldr	r0, [pc, #324]	; (8004b98 <_printf_i+0x23c>)
 8004a54:	2100      	movs	r1, #0
 8004a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a5a:	6865      	ldr	r5, [r4, #4]
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	bfa8      	it	ge
 8004a60:	6821      	ldrge	r1, [r4, #0]
 8004a62:	60a5      	str	r5, [r4, #8]
 8004a64:	bfa4      	itt	ge
 8004a66:	f021 0104 	bicge.w	r1, r1, #4
 8004a6a:	6021      	strge	r1, [r4, #0]
 8004a6c:	b90e      	cbnz	r6, 8004a72 <_printf_i+0x116>
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	d04b      	beq.n	8004b0a <_printf_i+0x1ae>
 8004a72:	4615      	mov	r5, r2
 8004a74:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a78:	fb03 6711 	mls	r7, r3, r1, r6
 8004a7c:	5dc7      	ldrb	r7, [r0, r7]
 8004a7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a82:	4637      	mov	r7, r6
 8004a84:	42bb      	cmp	r3, r7
 8004a86:	460e      	mov	r6, r1
 8004a88:	d9f4      	bls.n	8004a74 <_printf_i+0x118>
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d10b      	bne.n	8004aa6 <_printf_i+0x14a>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	07de      	lsls	r6, r3, #31
 8004a92:	d508      	bpl.n	8004aa6 <_printf_i+0x14a>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	6861      	ldr	r1, [r4, #4]
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	bfde      	ittt	le
 8004a9c:	2330      	movle	r3, #48	; 0x30
 8004a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aa6:	1b52      	subs	r2, r2, r5
 8004aa8:	6122      	str	r2, [r4, #16]
 8004aaa:	464b      	mov	r3, r9
 8004aac:	4621      	mov	r1, r4
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f8cd a000 	str.w	sl, [sp]
 8004ab4:	aa03      	add	r2, sp, #12
 8004ab6:	f7ff fedf 	bl	8004878 <_printf_common>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d14a      	bne.n	8004b54 <_printf_i+0x1f8>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	b004      	add	sp, #16
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f043 0320 	orr.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	2778      	movs	r7, #120	; 0x78
 8004ad2:	4832      	ldr	r0, [pc, #200]	; (8004b9c <_printf_i+0x240>)
 8004ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	6829      	ldr	r1, [r5, #0]
 8004adc:	061f      	lsls	r7, r3, #24
 8004ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ae2:	d402      	bmi.n	8004aea <_printf_i+0x18e>
 8004ae4:	065f      	lsls	r7, r3, #25
 8004ae6:	bf48      	it	mi
 8004ae8:	b2b6      	uxthmi	r6, r6
 8004aea:	07df      	lsls	r7, r3, #31
 8004aec:	bf48      	it	mi
 8004aee:	f043 0320 	orrmi.w	r3, r3, #32
 8004af2:	6029      	str	r1, [r5, #0]
 8004af4:	bf48      	it	mi
 8004af6:	6023      	strmi	r3, [r4, #0]
 8004af8:	b91e      	cbnz	r6, 8004b02 <_printf_i+0x1a6>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f023 0320 	bic.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	2310      	movs	r3, #16
 8004b04:	e7a6      	b.n	8004a54 <_printf_i+0xf8>
 8004b06:	4824      	ldr	r0, [pc, #144]	; (8004b98 <_printf_i+0x23c>)
 8004b08:	e7e4      	b.n	8004ad4 <_printf_i+0x178>
 8004b0a:	4615      	mov	r5, r2
 8004b0c:	e7bd      	b.n	8004a8a <_printf_i+0x12e>
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	6826      	ldr	r6, [r4, #0]
 8004b12:	1d18      	adds	r0, r3, #4
 8004b14:	6961      	ldr	r1, [r4, #20]
 8004b16:	6028      	str	r0, [r5, #0]
 8004b18:	0635      	lsls	r5, r6, #24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	d501      	bpl.n	8004b22 <_printf_i+0x1c6>
 8004b1e:	6019      	str	r1, [r3, #0]
 8004b20:	e002      	b.n	8004b28 <_printf_i+0x1cc>
 8004b22:	0670      	lsls	r0, r6, #25
 8004b24:	d5fb      	bpl.n	8004b1e <_printf_i+0x1c2>
 8004b26:	8019      	strh	r1, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4615      	mov	r5, r2
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	e7bc      	b.n	8004aaa <_printf_i+0x14e>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	2100      	movs	r1, #0
 8004b34:	1d1a      	adds	r2, r3, #4
 8004b36:	602a      	str	r2, [r5, #0]
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	6862      	ldr	r2, [r4, #4]
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f9d4 	bl	8004eea <memchr>
 8004b42:	b108      	cbz	r0, 8004b48 <_printf_i+0x1ec>
 8004b44:	1b40      	subs	r0, r0, r5
 8004b46:	6060      	str	r0, [r4, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	e7aa      	b.n	8004aaa <_printf_i+0x14e>
 8004b54:	462a      	mov	r2, r5
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	47d0      	blx	sl
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d0ad      	beq.n	8004abe <_printf_i+0x162>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	079b      	lsls	r3, r3, #30
 8004b66:	d413      	bmi.n	8004b90 <_printf_i+0x234>
 8004b68:	68e0      	ldr	r0, [r4, #12]
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	bfb8      	it	lt
 8004b70:	4618      	movlt	r0, r3
 8004b72:	e7a6      	b.n	8004ac2 <_printf_i+0x166>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4632      	mov	r2, r6
 8004b78:	4649      	mov	r1, r9
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	47d0      	blx	sl
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d09d      	beq.n	8004abe <_printf_i+0x162>
 8004b82:	3501      	adds	r5, #1
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9903      	ldr	r1, [sp, #12]
 8004b88:	1a5b      	subs	r3, r3, r1
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	dcf2      	bgt.n	8004b74 <_printf_i+0x218>
 8004b8e:	e7eb      	b.n	8004b68 <_printf_i+0x20c>
 8004b90:	2500      	movs	r5, #0
 8004b92:	f104 0619 	add.w	r6, r4, #25
 8004b96:	e7f5      	b.n	8004b84 <_printf_i+0x228>
 8004b98:	080070a4 	.word	0x080070a4
 8004b9c:	080070b5 	.word	0x080070b5

08004ba0 <std>:
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8004baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bae:	6083      	str	r3, [r0, #8]
 8004bb0:	8181      	strh	r1, [r0, #12]
 8004bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb4:	81c2      	strh	r2, [r0, #14]
 8004bb6:	6183      	str	r3, [r0, #24]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2208      	movs	r2, #8
 8004bbc:	305c      	adds	r0, #92	; 0x5c
 8004bbe:	f000 f914 	bl	8004dea <memset>
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <std+0x58>)
 8004bc4:	6224      	str	r4, [r4, #32]
 8004bc6:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <std+0x5c>)
 8004bca:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <std+0x60>)
 8004bce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <std+0x64>)
 8004bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <std+0x68>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d006      	beq.n	8004be8 <std+0x48>
 8004bda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bde:	4294      	cmp	r4, r2
 8004be0:	d002      	beq.n	8004be8 <std+0x48>
 8004be2:	33d0      	adds	r3, #208	; 0xd0
 8004be4:	429c      	cmp	r4, r3
 8004be6:	d105      	bne.n	8004bf4 <std+0x54>
 8004be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	f000 b978 	b.w	8004ee4 <__retarget_lock_init_recursive>
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08004d65 	.word	0x08004d65
 8004bfc:	08004d87 	.word	0x08004d87
 8004c00:	08004dbf 	.word	0x08004dbf
 8004c04:	08004de3 	.word	0x08004de3
 8004c08:	20000314 	.word	0x20000314

08004c0c <stdio_exit_handler>:
 8004c0c:	4a02      	ldr	r2, [pc, #8]	; (8004c18 <stdio_exit_handler+0xc>)
 8004c0e:	4903      	ldr	r1, [pc, #12]	; (8004c1c <stdio_exit_handler+0x10>)
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <stdio_exit_handler+0x14>)
 8004c12:	f000 b869 	b.w	8004ce8 <_fwalk_sglue>
 8004c16:	bf00      	nop
 8004c18:	2000000c 	.word	0x2000000c
 8004c1c:	0800687d 	.word	0x0800687d
 8004c20:	20000018 	.word	0x20000018

08004c24 <cleanup_stdio>:
 8004c24:	6841      	ldr	r1, [r0, #4]
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <cleanup_stdio+0x34>)
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	d001      	beq.n	8004c34 <cleanup_stdio+0x10>
 8004c30:	f001 fe24 	bl	800687c <_fflush_r>
 8004c34:	68a1      	ldr	r1, [r4, #8]
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <cleanup_stdio+0x38>)
 8004c38:	4299      	cmp	r1, r3
 8004c3a:	d002      	beq.n	8004c42 <cleanup_stdio+0x1e>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f001 fe1d 	bl	800687c <_fflush_r>
 8004c42:	68e1      	ldr	r1, [r4, #12]
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <cleanup_stdio+0x3c>)
 8004c46:	4299      	cmp	r1, r3
 8004c48:	d004      	beq.n	8004c54 <cleanup_stdio+0x30>
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f001 be14 	b.w	800687c <_fflush_r>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	bf00      	nop
 8004c58:	20000314 	.word	0x20000314
 8004c5c:	2000037c 	.word	0x2000037c
 8004c60:	200003e4 	.word	0x200003e4

08004c64 <global_stdio_init.part.0>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <global_stdio_init.part.0+0x30>)
 8004c68:	4c0b      	ldr	r4, [pc, #44]	; (8004c98 <global_stdio_init.part.0+0x34>)
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <global_stdio_init.part.0+0x38>)
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	2104      	movs	r1, #4
 8004c72:	2200      	movs	r2, #0
 8004c74:	f7ff ff94 	bl	8004ba0 <std>
 8004c78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2109      	movs	r1, #9
 8004c80:	f7ff ff8e 	bl	8004ba0 <std>
 8004c84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c88:	2202      	movs	r2, #2
 8004c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8e:	2112      	movs	r1, #18
 8004c90:	f7ff bf86 	b.w	8004ba0 <std>
 8004c94:	2000044c 	.word	0x2000044c
 8004c98:	20000314 	.word	0x20000314
 8004c9c:	08004c0d 	.word	0x08004c0d

08004ca0 <__sfp_lock_acquire>:
 8004ca0:	4801      	ldr	r0, [pc, #4]	; (8004ca8 <__sfp_lock_acquire+0x8>)
 8004ca2:	f000 b920 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 8004ca6:	bf00      	nop
 8004ca8:	20000455 	.word	0x20000455

08004cac <__sfp_lock_release>:
 8004cac:	4801      	ldr	r0, [pc, #4]	; (8004cb4 <__sfp_lock_release+0x8>)
 8004cae:	f000 b91b 	b.w	8004ee8 <__retarget_lock_release_recursive>
 8004cb2:	bf00      	nop
 8004cb4:	20000455 	.word	0x20000455

08004cb8 <__sinit>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4604      	mov	r4, r0
 8004cbc:	f7ff fff0 	bl	8004ca0 <__sfp_lock_acquire>
 8004cc0:	6a23      	ldr	r3, [r4, #32]
 8004cc2:	b11b      	cbz	r3, 8004ccc <__sinit+0x14>
 8004cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc8:	f7ff bff0 	b.w	8004cac <__sfp_lock_release>
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <__sinit+0x28>)
 8004cce:	6223      	str	r3, [r4, #32]
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <__sinit+0x2c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f5      	bne.n	8004cc4 <__sinit+0xc>
 8004cd8:	f7ff ffc4 	bl	8004c64 <global_stdio_init.part.0>
 8004cdc:	e7f2      	b.n	8004cc4 <__sinit+0xc>
 8004cde:	bf00      	nop
 8004ce0:	08004c25 	.word	0x08004c25
 8004ce4:	2000044c 	.word	0x2000044c

08004ce8 <_fwalk_sglue>:
 8004ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cec:	4607      	mov	r7, r0
 8004cee:	4688      	mov	r8, r1
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8004cfc:	d505      	bpl.n	8004d0a <_fwalk_sglue+0x22>
 8004cfe:	6824      	ldr	r4, [r4, #0]
 8004d00:	2c00      	cmp	r4, #0
 8004d02:	d1f7      	bne.n	8004cf4 <_fwalk_sglue+0xc>
 8004d04:	4630      	mov	r0, r6
 8004d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d907      	bls.n	8004d20 <_fwalk_sglue+0x38>
 8004d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d14:	3301      	adds	r3, #1
 8004d16:	d003      	beq.n	8004d20 <_fwalk_sglue+0x38>
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	47c0      	blx	r8
 8004d1e:	4306      	orrs	r6, r0
 8004d20:	3568      	adds	r5, #104	; 0x68
 8004d22:	e7e9      	b.n	8004cf8 <_fwalk_sglue+0x10>

08004d24 <siprintf>:
 8004d24:	b40e      	push	{r1, r2, r3}
 8004d26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d2a:	b500      	push	{lr}
 8004d2c:	b09c      	sub	sp, #112	; 0x70
 8004d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d30:	9002      	str	r0, [sp, #8]
 8004d32:	9006      	str	r0, [sp, #24]
 8004d34:	9107      	str	r1, [sp, #28]
 8004d36:	9104      	str	r1, [sp, #16]
 8004d38:	4808      	ldr	r0, [pc, #32]	; (8004d5c <siprintf+0x38>)
 8004d3a:	4909      	ldr	r1, [pc, #36]	; (8004d60 <siprintf+0x3c>)
 8004d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d40:	9105      	str	r1, [sp, #20]
 8004d42:	6800      	ldr	r0, [r0, #0]
 8004d44:	a902      	add	r1, sp, #8
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	f001 fc18 	bl	800657c <_svfiprintf_r>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	b01c      	add	sp, #112	; 0x70
 8004d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d58:	b003      	add	sp, #12
 8004d5a:	4770      	bx	lr
 8004d5c:	20000064 	.word	0x20000064
 8004d60:	ffff0208 	.word	0xffff0208

08004d64 <__sread>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	f000 f86c 	bl	8004e48 <_read_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	bfab      	itete	ge
 8004d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d76:	89a3      	ldrhlt	r3, [r4, #12]
 8004d78:	181b      	addge	r3, r3, r0
 8004d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d7e:	bfac      	ite	ge
 8004d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d82:	81a3      	strhlt	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__swrite>:
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	460c      	mov	r4, r1
 8004d94:	4616      	mov	r6, r2
 8004d96:	d505      	bpl.n	8004da4 <__swrite+0x1e>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 f840 	bl	8004e24 <_lseek_r>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	4632      	mov	r2, r6
 8004da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	4628      	mov	r0, r5
 8004db0:	463b      	mov	r3, r7
 8004db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	f000 b857 	b.w	8004e6c <_write_r>

08004dbe <__sseek>:
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc6:	f000 f82d 	bl	8004e24 <_lseek_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	bf15      	itete	ne
 8004dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dda:	81a3      	strheq	r3, [r4, #12]
 8004ddc:	bf18      	it	ne
 8004dde:	81a3      	strhne	r3, [r4, #12]
 8004de0:	bd10      	pop	{r4, pc}

08004de2 <__sclose>:
 8004de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de6:	f000 b80d 	b.w	8004e04 <_close_r>

08004dea <memset>:
 8004dea:	4603      	mov	r3, r0
 8004dec:	4402      	add	r2, r0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d100      	bne.n	8004df4 <memset+0xa>
 8004df2:	4770      	bx	lr
 8004df4:	f803 1b01 	strb.w	r1, [r3], #1
 8004df8:	e7f9      	b.n	8004dee <memset+0x4>
	...

08004dfc <_localeconv_r>:
 8004dfc:	4800      	ldr	r0, [pc, #0]	; (8004e00 <_localeconv_r+0x4>)
 8004dfe:	4770      	bx	lr
 8004e00:	20000158 	.word	0x20000158

08004e04 <_close_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	2300      	movs	r3, #0
 8004e08:	4d05      	ldr	r5, [pc, #20]	; (8004e20 <_close_r+0x1c>)
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fc fcda 	bl	80017c8 <_close>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_close_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_close_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000450 	.word	0x20000450

08004e24 <_lseek_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4d05      	ldr	r5, [pc, #20]	; (8004e44 <_lseek_r+0x20>)
 8004e30:	602a      	str	r2, [r5, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f7fc fcec 	bl	8001810 <_lseek>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_lseek_r+0x1e>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_lseek_r+0x1e>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	20000450 	.word	0x20000450

08004e48 <_read_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	2200      	movs	r2, #0
 8004e52:	4d05      	ldr	r5, [pc, #20]	; (8004e68 <_read_r+0x20>)
 8004e54:	602a      	str	r2, [r5, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f7fc fc7d 	bl	8001756 <_read>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_read_r+0x1e>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_read_r+0x1e>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000450 	.word	0x20000450

08004e6c <_write_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	2200      	movs	r2, #0
 8004e76:	4d05      	ldr	r5, [pc, #20]	; (8004e8c <_write_r+0x20>)
 8004e78:	602a      	str	r2, [r5, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fc fc88 	bl	8001790 <_write>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_write_r+0x1e>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_write_r+0x1e>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000450 	.word	0x20000450

08004e90 <__errno>:
 8004e90:	4b01      	ldr	r3, [pc, #4]	; (8004e98 <__errno+0x8>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000064 	.word	0x20000064

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	4d0c      	ldr	r5, [pc, #48]	; (8004ed4 <__libc_init_array+0x38>)
 8004ea2:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <__libc_init_array+0x3c>)
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	f002 f886 	bl	8006fbc <_init>
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	4d0a      	ldr	r5, [pc, #40]	; (8004edc <__libc_init_array+0x40>)
 8004eb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ee0 <__libc_init_array+0x44>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08007404 	.word	0x08007404
 8004ed8:	08007404 	.word	0x08007404
 8004edc:	08007404 	.word	0x08007404
 8004ee0:	08007408 	.word	0x08007408

08004ee4 <__retarget_lock_init_recursive>:
 8004ee4:	4770      	bx	lr

08004ee6 <__retarget_lock_acquire_recursive>:
 8004ee6:	4770      	bx	lr

08004ee8 <__retarget_lock_release_recursive>:
 8004ee8:	4770      	bx	lr

08004eea <memchr>:
 8004eea:	4603      	mov	r3, r0
 8004eec:	b510      	push	{r4, lr}
 8004eee:	b2c9      	uxtb	r1, r1
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	d101      	bne.n	8004efc <memchr+0x12>
 8004ef8:	2000      	movs	r0, #0
 8004efa:	e003      	b.n	8004f04 <memchr+0x1a>
 8004efc:	7804      	ldrb	r4, [r0, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	428c      	cmp	r4, r1
 8004f02:	d1f6      	bne.n	8004ef2 <memchr+0x8>
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <quorem>:
 8004f06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	6903      	ldr	r3, [r0, #16]
 8004f0c:	690c      	ldr	r4, [r1, #16]
 8004f0e:	4607      	mov	r7, r0
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	db7f      	blt.n	8005014 <quorem+0x10e>
 8004f14:	3c01      	subs	r4, #1
 8004f16:	f100 0514 	add.w	r5, r0, #20
 8004f1a:	f101 0814 	add.w	r8, r1, #20
 8004f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f3c:	d331      	bcc.n	8004fa2 <quorem+0x9c>
 8004f3e:	f04f 0e00 	mov.w	lr, #0
 8004f42:	4640      	mov	r0, r8
 8004f44:	46ac      	mov	ip, r5
 8004f46:	46f2      	mov	sl, lr
 8004f48:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f4c:	b293      	uxth	r3, r2
 8004f4e:	fb06 e303 	mla	r3, r6, r3, lr
 8004f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f56:	0c1a      	lsrs	r2, r3, #16
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	fb06 220e 	mla	r2, r6, lr, r2
 8004f5e:	ebaa 0303 	sub.w	r3, sl, r3
 8004f62:	f8dc a000 	ldr.w	sl, [ip]
 8004f66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f6a:	fa1f fa8a 	uxth.w	sl, sl
 8004f6e:	4453      	add	r3, sl
 8004f70:	f8dc a000 	ldr.w	sl, [ip]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f84:	4581      	cmp	r9, r0
 8004f86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f8a:	f84c 3b04 	str.w	r3, [ip], #4
 8004f8e:	d2db      	bcs.n	8004f48 <quorem+0x42>
 8004f90:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f94:	b92b      	cbnz	r3, 8004fa2 <quorem+0x9c>
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	d32d      	bcc.n	8004ffc <quorem+0xf6>
 8004fa0:	613c      	str	r4, [r7, #16]
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f001 f992 	bl	80062cc <__mcmp>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	db23      	blt.n	8004ff4 <quorem+0xee>
 8004fac:	4629      	mov	r1, r5
 8004fae:	2000      	movs	r0, #0
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fb6:	f8d1 c000 	ldr.w	ip, [r1]
 8004fba:	b293      	uxth	r3, r2
 8004fbc:	1ac3      	subs	r3, r0, r3
 8004fbe:	0c12      	lsrs	r2, r2, #16
 8004fc0:	fa1f f08c 	uxth.w	r0, ip
 8004fc4:	4403      	add	r3, r0
 8004fc6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004fca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fd4:	45c1      	cmp	r9, r8
 8004fd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fda:	f841 3b04 	str.w	r3, [r1], #4
 8004fde:	d2e8      	bcs.n	8004fb2 <quorem+0xac>
 8004fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fe8:	b922      	cbnz	r2, 8004ff4 <quorem+0xee>
 8004fea:	3b04      	subs	r3, #4
 8004fec:	429d      	cmp	r5, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	d30a      	bcc.n	8005008 <quorem+0x102>
 8004ff2:	613c      	str	r4, [r7, #16]
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	b003      	add	sp, #12
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	3b04      	subs	r3, #4
 8005000:	2a00      	cmp	r2, #0
 8005002:	d1cd      	bne.n	8004fa0 <quorem+0x9a>
 8005004:	3c01      	subs	r4, #1
 8005006:	e7c8      	b.n	8004f9a <quorem+0x94>
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	3b04      	subs	r3, #4
 800500c:	2a00      	cmp	r2, #0
 800500e:	d1f0      	bne.n	8004ff2 <quorem+0xec>
 8005010:	3c01      	subs	r4, #1
 8005012:	e7eb      	b.n	8004fec <quorem+0xe6>
 8005014:	2000      	movs	r0, #0
 8005016:	e7ee      	b.n	8004ff6 <quorem+0xf0>

08005018 <_dtoa_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	4616      	mov	r6, r2
 800501e:	461f      	mov	r7, r3
 8005020:	69c4      	ldr	r4, [r0, #28]
 8005022:	b099      	sub	sp, #100	; 0x64
 8005024:	4605      	mov	r5, r0
 8005026:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800502a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800502e:	b974      	cbnz	r4, 800504e <_dtoa_r+0x36>
 8005030:	2010      	movs	r0, #16
 8005032:	f000 fe1d 	bl	8005c70 <malloc>
 8005036:	4602      	mov	r2, r0
 8005038:	61e8      	str	r0, [r5, #28]
 800503a:	b920      	cbnz	r0, 8005046 <_dtoa_r+0x2e>
 800503c:	21ef      	movs	r1, #239	; 0xef
 800503e:	4bac      	ldr	r3, [pc, #688]	; (80052f0 <_dtoa_r+0x2d8>)
 8005040:	48ac      	ldr	r0, [pc, #688]	; (80052f4 <_dtoa_r+0x2dc>)
 8005042:	f001 fc7b 	bl	800693c <__assert_func>
 8005046:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800504a:	6004      	str	r4, [r0, #0]
 800504c:	60c4      	str	r4, [r0, #12]
 800504e:	69eb      	ldr	r3, [r5, #28]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	b151      	cbz	r1, 800506a <_dtoa_r+0x52>
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	2301      	movs	r3, #1
 8005058:	4093      	lsls	r3, r2
 800505a:	604a      	str	r2, [r1, #4]
 800505c:	608b      	str	r3, [r1, #8]
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fefa 	bl	8005e58 <_Bfree>
 8005064:	2200      	movs	r2, #0
 8005066:	69eb      	ldr	r3, [r5, #28]
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	1e3b      	subs	r3, r7, #0
 800506c:	bfaf      	iteee	ge
 800506e:	2300      	movge	r3, #0
 8005070:	2201      	movlt	r2, #1
 8005072:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005076:	9305      	strlt	r3, [sp, #20]
 8005078:	bfa8      	it	ge
 800507a:	f8c8 3000 	strge.w	r3, [r8]
 800507e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005082:	4b9d      	ldr	r3, [pc, #628]	; (80052f8 <_dtoa_r+0x2e0>)
 8005084:	bfb8      	it	lt
 8005086:	f8c8 2000 	strlt.w	r2, [r8]
 800508a:	ea33 0309 	bics.w	r3, r3, r9
 800508e:	d119      	bne.n	80050c4 <_dtoa_r+0xac>
 8005090:	f242 730f 	movw	r3, #9999	; 0x270f
 8005094:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800509c:	4333      	orrs	r3, r6
 800509e:	f000 8589 	beq.w	8005bb4 <_dtoa_r+0xb9c>
 80050a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050a4:	b953      	cbnz	r3, 80050bc <_dtoa_r+0xa4>
 80050a6:	4b95      	ldr	r3, [pc, #596]	; (80052fc <_dtoa_r+0x2e4>)
 80050a8:	e023      	b.n	80050f2 <_dtoa_r+0xda>
 80050aa:	4b95      	ldr	r3, [pc, #596]	; (8005300 <_dtoa_r+0x2e8>)
 80050ac:	9303      	str	r3, [sp, #12]
 80050ae:	3308      	adds	r3, #8
 80050b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	9803      	ldr	r0, [sp, #12]
 80050b6:	b019      	add	sp, #100	; 0x64
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	4b8f      	ldr	r3, [pc, #572]	; (80052fc <_dtoa_r+0x2e4>)
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	3303      	adds	r3, #3
 80050c2:	e7f5      	b.n	80050b0 <_dtoa_r+0x98>
 80050c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80050cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	f7fb fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80050d8:	4680      	mov	r8, r0
 80050da:	b160      	cbz	r0, 80050f6 <_dtoa_r+0xde>
 80050dc:	2301      	movs	r3, #1
 80050de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8562 	beq.w	8005bae <_dtoa_r+0xb96>
 80050ea:	4b86      	ldr	r3, [pc, #536]	; (8005304 <_dtoa_r+0x2ec>)
 80050ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	e7de      	b.n	80050b4 <_dtoa_r+0x9c>
 80050f6:	ab16      	add	r3, sp, #88	; 0x58
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	ab17      	add	r3, sp, #92	; 0x5c
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4628      	mov	r0, r5
 8005100:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005104:	f001 f98a 	bl	800641c <__d2b>
 8005108:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800510c:	4682      	mov	sl, r0
 800510e:	2c00      	cmp	r4, #0
 8005110:	d07e      	beq.n	8005210 <_dtoa_r+0x1f8>
 8005112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005118:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800511c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005120:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005124:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005128:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800512c:	4619      	mov	r1, r3
 800512e:	2200      	movs	r2, #0
 8005130:	4b75      	ldr	r3, [pc, #468]	; (8005308 <_dtoa_r+0x2f0>)
 8005132:	f7fb f819 	bl	8000168 <__aeabi_dsub>
 8005136:	a368      	add	r3, pc, #416	; (adr r3, 80052d8 <_dtoa_r+0x2c0>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb f9cc 	bl	80004d8 <__aeabi_dmul>
 8005140:	a367      	add	r3, pc, #412	; (adr r3, 80052e0 <_dtoa_r+0x2c8>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb f811 	bl	800016c <__adddf3>
 800514a:	4606      	mov	r6, r0
 800514c:	4620      	mov	r0, r4
 800514e:	460f      	mov	r7, r1
 8005150:	f7fb f958 	bl	8000404 <__aeabi_i2d>
 8005154:	a364      	add	r3, pc, #400	; (adr r3, 80052e8 <_dtoa_r+0x2d0>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f9bd 	bl	80004d8 <__aeabi_dmul>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4630      	mov	r0, r6
 8005164:	4639      	mov	r1, r7
 8005166:	f7fb f801 	bl	800016c <__adddf3>
 800516a:	4606      	mov	r6, r0
 800516c:	460f      	mov	r7, r1
 800516e:	f7fb fc63 	bl	8000a38 <__aeabi_d2iz>
 8005172:	2200      	movs	r2, #0
 8005174:	4683      	mov	fp, r0
 8005176:	2300      	movs	r3, #0
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb fc1e 	bl	80009bc <__aeabi_dcmplt>
 8005180:	b148      	cbz	r0, 8005196 <_dtoa_r+0x17e>
 8005182:	4658      	mov	r0, fp
 8005184:	f7fb f93e 	bl	8000404 <__aeabi_i2d>
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	f7fb fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005190:	b908      	cbnz	r0, 8005196 <_dtoa_r+0x17e>
 8005192:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005196:	f1bb 0f16 	cmp.w	fp, #22
 800519a:	d857      	bhi.n	800524c <_dtoa_r+0x234>
 800519c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <_dtoa_r+0x2f4>)
 80051a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb fc07 	bl	80009bc <__aeabi_dcmplt>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d04e      	beq.n	8005250 <_dtoa_r+0x238>
 80051b2:	2300      	movs	r3, #0
 80051b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051bc:	1b1b      	subs	r3, r3, r4
 80051be:	1e5a      	subs	r2, r3, #1
 80051c0:	bf46      	itte	mi
 80051c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80051c6:	2300      	movmi	r3, #0
 80051c8:	f04f 0900 	movpl.w	r9, #0
 80051cc:	9209      	str	r2, [sp, #36]	; 0x24
 80051ce:	bf48      	it	mi
 80051d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80051d2:	f1bb 0f00 	cmp.w	fp, #0
 80051d6:	db3d      	blt.n	8005254 <_dtoa_r+0x23c>
 80051d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80051de:	445b      	add	r3, fp
 80051e0:	9309      	str	r3, [sp, #36]	; 0x24
 80051e2:	2300      	movs	r3, #0
 80051e4:	930a      	str	r3, [sp, #40]	; 0x28
 80051e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d867      	bhi.n	80052bc <_dtoa_r+0x2a4>
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	bfc4      	itt	gt
 80051f0:	3b04      	subgt	r3, #4
 80051f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051f6:	bfc8      	it	gt
 80051f8:	2400      	movgt	r4, #0
 80051fa:	f1a3 0302 	sub.w	r3, r3, #2
 80051fe:	bfd8      	it	le
 8005200:	2401      	movle	r4, #1
 8005202:	2b03      	cmp	r3, #3
 8005204:	f200 8086 	bhi.w	8005314 <_dtoa_r+0x2fc>
 8005208:	e8df f003 	tbb	[pc, r3]
 800520c:	5637392c 	.word	0x5637392c
 8005210:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005214:	441c      	add	r4, r3
 8005216:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800521a:	2b20      	cmp	r3, #32
 800521c:	bfc1      	itttt	gt
 800521e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005222:	fa09 f903 	lslgt.w	r9, r9, r3
 8005226:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800522a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800522e:	bfd6      	itet	le
 8005230:	f1c3 0320 	rsble	r3, r3, #32
 8005234:	ea49 0003 	orrgt.w	r0, r9, r3
 8005238:	fa06 f003 	lslle.w	r0, r6, r3
 800523c:	f7fb f8d2 	bl	80003e4 <__aeabi_ui2d>
 8005240:	2201      	movs	r2, #1
 8005242:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005246:	3c01      	subs	r4, #1
 8005248:	9213      	str	r2, [sp, #76]	; 0x4c
 800524a:	e76f      	b.n	800512c <_dtoa_r+0x114>
 800524c:	2301      	movs	r3, #1
 800524e:	e7b3      	b.n	80051b8 <_dtoa_r+0x1a0>
 8005250:	900f      	str	r0, [sp, #60]	; 0x3c
 8005252:	e7b2      	b.n	80051ba <_dtoa_r+0x1a2>
 8005254:	f1cb 0300 	rsb	r3, fp, #0
 8005258:	930a      	str	r3, [sp, #40]	; 0x28
 800525a:	2300      	movs	r3, #0
 800525c:	eba9 090b 	sub.w	r9, r9, fp
 8005260:	930e      	str	r3, [sp, #56]	; 0x38
 8005262:	e7c0      	b.n	80051e6 <_dtoa_r+0x1ce>
 8005264:	2300      	movs	r3, #0
 8005266:	930b      	str	r3, [sp, #44]	; 0x2c
 8005268:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800526a:	2b00      	cmp	r3, #0
 800526c:	dc55      	bgt.n	800531a <_dtoa_r+0x302>
 800526e:	2301      	movs	r3, #1
 8005270:	461a      	mov	r2, r3
 8005272:	9306      	str	r3, [sp, #24]
 8005274:	9308      	str	r3, [sp, #32]
 8005276:	9223      	str	r2, [sp, #140]	; 0x8c
 8005278:	e00b      	b.n	8005292 <_dtoa_r+0x27a>
 800527a:	2301      	movs	r3, #1
 800527c:	e7f3      	b.n	8005266 <_dtoa_r+0x24e>
 800527e:	2300      	movs	r3, #0
 8005280:	930b      	str	r3, [sp, #44]	; 0x2c
 8005282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005284:	445b      	add	r3, fp
 8005286:	9306      	str	r3, [sp, #24]
 8005288:	3301      	adds	r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	9308      	str	r3, [sp, #32]
 800528e:	bfb8      	it	lt
 8005290:	2301      	movlt	r3, #1
 8005292:	2100      	movs	r1, #0
 8005294:	2204      	movs	r2, #4
 8005296:	69e8      	ldr	r0, [r5, #28]
 8005298:	f102 0614 	add.w	r6, r2, #20
 800529c:	429e      	cmp	r6, r3
 800529e:	d940      	bls.n	8005322 <_dtoa_r+0x30a>
 80052a0:	6041      	str	r1, [r0, #4]
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fd98 	bl	8005dd8 <_Balloc>
 80052a8:	9003      	str	r0, [sp, #12]
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d13c      	bne.n	8005328 <_dtoa_r+0x310>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f240 11af 	movw	r1, #431	; 0x1af
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <_dtoa_r+0x2f8>)
 80052b6:	e6c3      	b.n	8005040 <_dtoa_r+0x28>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e7e1      	b.n	8005280 <_dtoa_r+0x268>
 80052bc:	2401      	movs	r4, #1
 80052be:	2300      	movs	r3, #0
 80052c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80052c2:	9322      	str	r3, [sp, #136]	; 0x88
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	2200      	movs	r2, #0
 80052ca:	9306      	str	r3, [sp, #24]
 80052cc:	9308      	str	r3, [sp, #32]
 80052ce:	2312      	movs	r3, #18
 80052d0:	e7d1      	b.n	8005276 <_dtoa_r+0x25e>
 80052d2:	bf00      	nop
 80052d4:	f3af 8000 	nop.w
 80052d8:	636f4361 	.word	0x636f4361
 80052dc:	3fd287a7 	.word	0x3fd287a7
 80052e0:	8b60c8b3 	.word	0x8b60c8b3
 80052e4:	3fc68a28 	.word	0x3fc68a28
 80052e8:	509f79fb 	.word	0x509f79fb
 80052ec:	3fd34413 	.word	0x3fd34413
 80052f0:	080070d3 	.word	0x080070d3
 80052f4:	080070ea 	.word	0x080070ea
 80052f8:	7ff00000 	.word	0x7ff00000
 80052fc:	080070cf 	.word	0x080070cf
 8005300:	080070c6 	.word	0x080070c6
 8005304:	080070a3 	.word	0x080070a3
 8005308:	3ff80000 	.word	0x3ff80000
 800530c:	080071d8 	.word	0x080071d8
 8005310:	08007142 	.word	0x08007142
 8005314:	2301      	movs	r3, #1
 8005316:	930b      	str	r3, [sp, #44]	; 0x2c
 8005318:	e7d4      	b.n	80052c4 <_dtoa_r+0x2ac>
 800531a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800531c:	9306      	str	r3, [sp, #24]
 800531e:	9308      	str	r3, [sp, #32]
 8005320:	e7b7      	b.n	8005292 <_dtoa_r+0x27a>
 8005322:	3101      	adds	r1, #1
 8005324:	0052      	lsls	r2, r2, #1
 8005326:	e7b7      	b.n	8005298 <_dtoa_r+0x280>
 8005328:	69eb      	ldr	r3, [r5, #28]
 800532a:	9a03      	ldr	r2, [sp, #12]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	9b08      	ldr	r3, [sp, #32]
 8005330:	2b0e      	cmp	r3, #14
 8005332:	f200 80a8 	bhi.w	8005486 <_dtoa_r+0x46e>
 8005336:	2c00      	cmp	r4, #0
 8005338:	f000 80a5 	beq.w	8005486 <_dtoa_r+0x46e>
 800533c:	f1bb 0f00 	cmp.w	fp, #0
 8005340:	dd34      	ble.n	80053ac <_dtoa_r+0x394>
 8005342:	4b9a      	ldr	r3, [pc, #616]	; (80055ac <_dtoa_r+0x594>)
 8005344:	f00b 020f 	and.w	r2, fp, #15
 8005348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005354:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005358:	ea4f 142b 	mov.w	r4, fp, asr #4
 800535c:	d016      	beq.n	800538c <_dtoa_r+0x374>
 800535e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005362:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <_dtoa_r+0x598>)
 8005364:	2703      	movs	r7, #3
 8005366:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800536a:	f7fb f9df 	bl	800072c <__aeabi_ddiv>
 800536e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005372:	f004 040f 	and.w	r4, r4, #15
 8005376:	4e8e      	ldr	r6, [pc, #568]	; (80055b0 <_dtoa_r+0x598>)
 8005378:	b954      	cbnz	r4, 8005390 <_dtoa_r+0x378>
 800537a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800537e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005382:	f7fb f9d3 	bl	800072c <__aeabi_ddiv>
 8005386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800538a:	e029      	b.n	80053e0 <_dtoa_r+0x3c8>
 800538c:	2702      	movs	r7, #2
 800538e:	e7f2      	b.n	8005376 <_dtoa_r+0x35e>
 8005390:	07e1      	lsls	r1, r4, #31
 8005392:	d508      	bpl.n	80053a6 <_dtoa_r+0x38e>
 8005394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005398:	e9d6 2300 	ldrd	r2, r3, [r6]
 800539c:	f7fb f89c 	bl	80004d8 <__aeabi_dmul>
 80053a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053a4:	3701      	adds	r7, #1
 80053a6:	1064      	asrs	r4, r4, #1
 80053a8:	3608      	adds	r6, #8
 80053aa:	e7e5      	b.n	8005378 <_dtoa_r+0x360>
 80053ac:	f000 80a5 	beq.w	80054fa <_dtoa_r+0x4e2>
 80053b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b4:	f1cb 0400 	rsb	r4, fp, #0
 80053b8:	4b7c      	ldr	r3, [pc, #496]	; (80055ac <_dtoa_r+0x594>)
 80053ba:	f004 020f 	and.w	r2, r4, #15
 80053be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb f887 	bl	80004d8 <__aeabi_dmul>
 80053ca:	2702      	movs	r7, #2
 80053cc:	2300      	movs	r3, #0
 80053ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d2:	4e77      	ldr	r6, [pc, #476]	; (80055b0 <_dtoa_r+0x598>)
 80053d4:	1124      	asrs	r4, r4, #4
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	f040 8084 	bne.w	80054e4 <_dtoa_r+0x4cc>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1d2      	bne.n	8005386 <_dtoa_r+0x36e>
 80053e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <_dtoa_r+0x4e6>
 80053f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053f4:	2200      	movs	r2, #0
 80053f6:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <_dtoa_r+0x59c>)
 80053f8:	f7fb fae0 	bl	80009bc <__aeabi_dcmplt>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d07e      	beq.n	80054fe <_dtoa_r+0x4e6>
 8005400:	9b08      	ldr	r3, [sp, #32]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d07b      	beq.n	80054fe <_dtoa_r+0x4e6>
 8005406:	9b06      	ldr	r3, [sp, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	dd38      	ble.n	800547e <_dtoa_r+0x466>
 800540c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005410:	2200      	movs	r2, #0
 8005412:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <_dtoa_r+0x5a0>)
 8005414:	f7fb f860 	bl	80004d8 <__aeabi_dmul>
 8005418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800541c:	9c06      	ldr	r4, [sp, #24]
 800541e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005422:	3701      	adds	r7, #1
 8005424:	4638      	mov	r0, r7
 8005426:	f7fa ffed 	bl	8000404 <__aeabi_i2d>
 800542a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542e:	f7fb f853 	bl	80004d8 <__aeabi_dmul>
 8005432:	2200      	movs	r2, #0
 8005434:	4b61      	ldr	r3, [pc, #388]	; (80055bc <_dtoa_r+0x5a4>)
 8005436:	f7fa fe99 	bl	800016c <__adddf3>
 800543a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800543e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005442:	9611      	str	r6, [sp, #68]	; 0x44
 8005444:	2c00      	cmp	r4, #0
 8005446:	d15d      	bne.n	8005504 <_dtoa_r+0x4ec>
 8005448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544c:	2200      	movs	r2, #0
 800544e:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <_dtoa_r+0x5a8>)
 8005450:	f7fa fe8a 	bl	8000168 <__aeabi_dsub>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800545c:	4633      	mov	r3, r6
 800545e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005460:	f7fb faca 	bl	80009f8 <__aeabi_dcmpgt>
 8005464:	2800      	cmp	r0, #0
 8005466:	f040 8295 	bne.w	8005994 <_dtoa_r+0x97c>
 800546a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005470:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005474:	f7fb faa2 	bl	80009bc <__aeabi_dcmplt>
 8005478:	2800      	cmp	r0, #0
 800547a:	f040 8289 	bne.w	8005990 <_dtoa_r+0x978>
 800547e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005482:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005488:	2b00      	cmp	r3, #0
 800548a:	f2c0 8151 	blt.w	8005730 <_dtoa_r+0x718>
 800548e:	f1bb 0f0e 	cmp.w	fp, #14
 8005492:	f300 814d 	bgt.w	8005730 <_dtoa_r+0x718>
 8005496:	4b45      	ldr	r3, [pc, #276]	; (80055ac <_dtoa_r+0x594>)
 8005498:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800549c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80054a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f280 80da 	bge.w	8005660 <_dtoa_r+0x648>
 80054ac:	9b08      	ldr	r3, [sp, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f300 80d6 	bgt.w	8005660 <_dtoa_r+0x648>
 80054b4:	f040 826b 	bne.w	800598e <_dtoa_r+0x976>
 80054b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054bc:	2200      	movs	r2, #0
 80054be:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <_dtoa_r+0x5a8>)
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054c8:	f7fb fa8c 	bl	80009e4 <__aeabi_dcmpge>
 80054cc:	9c08      	ldr	r4, [sp, #32]
 80054ce:	4626      	mov	r6, r4
 80054d0:	2800      	cmp	r0, #0
 80054d2:	f040 8241 	bne.w	8005958 <_dtoa_r+0x940>
 80054d6:	2331      	movs	r3, #49	; 0x31
 80054d8:	9f03      	ldr	r7, [sp, #12]
 80054da:	f10b 0b01 	add.w	fp, fp, #1
 80054de:	f807 3b01 	strb.w	r3, [r7], #1
 80054e2:	e23d      	b.n	8005960 <_dtoa_r+0x948>
 80054e4:	07e2      	lsls	r2, r4, #31
 80054e6:	d505      	bpl.n	80054f4 <_dtoa_r+0x4dc>
 80054e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ec:	f7fa fff4 	bl	80004d8 <__aeabi_dmul>
 80054f0:	2301      	movs	r3, #1
 80054f2:	3701      	adds	r7, #1
 80054f4:	1064      	asrs	r4, r4, #1
 80054f6:	3608      	adds	r6, #8
 80054f8:	e76d      	b.n	80053d6 <_dtoa_r+0x3be>
 80054fa:	2702      	movs	r7, #2
 80054fc:	e770      	b.n	80053e0 <_dtoa_r+0x3c8>
 80054fe:	46d8      	mov	r8, fp
 8005500:	9c08      	ldr	r4, [sp, #32]
 8005502:	e78f      	b.n	8005424 <_dtoa_r+0x40c>
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <_dtoa_r+0x594>)
 8005508:	4421      	add	r1, r4
 800550a:	9112      	str	r1, [sp, #72]	; 0x48
 800550c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005512:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005516:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800551a:	2900      	cmp	r1, #0
 800551c:	d054      	beq.n	80055c8 <_dtoa_r+0x5b0>
 800551e:	2000      	movs	r0, #0
 8005520:	4928      	ldr	r1, [pc, #160]	; (80055c4 <_dtoa_r+0x5ac>)
 8005522:	f7fb f903 	bl	800072c <__aeabi_ddiv>
 8005526:	463b      	mov	r3, r7
 8005528:	4632      	mov	r2, r6
 800552a:	f7fa fe1d 	bl	8000168 <__aeabi_dsub>
 800552e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005532:	9f03      	ldr	r7, [sp, #12]
 8005534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005538:	f7fb fa7e 	bl	8000a38 <__aeabi_d2iz>
 800553c:	4604      	mov	r4, r0
 800553e:	f7fa ff61 	bl	8000404 <__aeabi_i2d>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554a:	f7fa fe0d 	bl	8000168 <__aeabi_dsub>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	3430      	adds	r4, #48	; 0x30
 8005554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800555c:	f807 4b01 	strb.w	r4, [r7], #1
 8005560:	f7fb fa2c 	bl	80009bc <__aeabi_dcmplt>
 8005564:	2800      	cmp	r0, #0
 8005566:	d173      	bne.n	8005650 <_dtoa_r+0x638>
 8005568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556c:	2000      	movs	r0, #0
 800556e:	4911      	ldr	r1, [pc, #68]	; (80055b4 <_dtoa_r+0x59c>)
 8005570:	f7fa fdfa 	bl	8000168 <__aeabi_dsub>
 8005574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005578:	f7fb fa20 	bl	80009bc <__aeabi_dcmplt>
 800557c:	2800      	cmp	r0, #0
 800557e:	f040 80b6 	bne.w	80056ee <_dtoa_r+0x6d6>
 8005582:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005584:	429f      	cmp	r7, r3
 8005586:	f43f af7a 	beq.w	800547e <_dtoa_r+0x466>
 800558a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800558e:	2200      	movs	r2, #0
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <_dtoa_r+0x5a0>)
 8005592:	f7fa ffa1 	bl	80004d8 <__aeabi_dmul>
 8005596:	2200      	movs	r2, #0
 8005598:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800559c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <_dtoa_r+0x5a0>)
 80055a2:	f7fa ff99 	bl	80004d8 <__aeabi_dmul>
 80055a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055aa:	e7c3      	b.n	8005534 <_dtoa_r+0x51c>
 80055ac:	080071d8 	.word	0x080071d8
 80055b0:	080071b0 	.word	0x080071b0
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	40240000 	.word	0x40240000
 80055bc:	401c0000 	.word	0x401c0000
 80055c0:	40140000 	.word	0x40140000
 80055c4:	3fe00000 	.word	0x3fe00000
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055d6:	9c03      	ldr	r4, [sp, #12]
 80055d8:	9314      	str	r3, [sp, #80]	; 0x50
 80055da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055de:	f7fb fa2b 	bl	8000a38 <__aeabi_d2iz>
 80055e2:	9015      	str	r0, [sp, #84]	; 0x54
 80055e4:	f7fa ff0e 	bl	8000404 <__aeabi_i2d>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f0:	f7fa fdba 	bl	8000168 <__aeabi_dsub>
 80055f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055f6:	4606      	mov	r6, r0
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	f804 3b01 	strb.w	r3, [r4], #1
 80055fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005600:	460f      	mov	r7, r1
 8005602:	429c      	cmp	r4, r3
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	d124      	bne.n	8005654 <_dtoa_r+0x63c>
 800560a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800560e:	4baf      	ldr	r3, [pc, #700]	; (80058cc <_dtoa_r+0x8b4>)
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4630      	mov	r0, r6
 800561a:	4639      	mov	r1, r7
 800561c:	f7fb f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 8005620:	2800      	cmp	r0, #0
 8005622:	d163      	bne.n	80056ec <_dtoa_r+0x6d4>
 8005624:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005628:	2000      	movs	r0, #0
 800562a:	49a8      	ldr	r1, [pc, #672]	; (80058cc <_dtoa_r+0x8b4>)
 800562c:	f7fa fd9c 	bl	8000168 <__aeabi_dsub>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fb f9c0 	bl	80009bc <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	f43f af1e 	beq.w	800547e <_dtoa_r+0x466>
 8005642:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005644:	1e7b      	subs	r3, r7, #1
 8005646:	9314      	str	r3, [sp, #80]	; 0x50
 8005648:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d0f8      	beq.n	8005642 <_dtoa_r+0x62a>
 8005650:	46c3      	mov	fp, r8
 8005652:	e03b      	b.n	80056cc <_dtoa_r+0x6b4>
 8005654:	4b9e      	ldr	r3, [pc, #632]	; (80058d0 <_dtoa_r+0x8b8>)
 8005656:	f7fa ff3f 	bl	80004d8 <__aeabi_dmul>
 800565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800565e:	e7bc      	b.n	80055da <_dtoa_r+0x5c2>
 8005660:	9f03      	ldr	r7, [sp, #12]
 8005662:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fb f85d 	bl	800072c <__aeabi_ddiv>
 8005672:	f7fb f9e1 	bl	8000a38 <__aeabi_d2iz>
 8005676:	4604      	mov	r4, r0
 8005678:	f7fa fec4 	bl	8000404 <__aeabi_i2d>
 800567c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fa fd6c 	bl	8000168 <__aeabi_dsub>
 8005690:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005694:	f807 6b01 	strb.w	r6, [r7], #1
 8005698:	9e03      	ldr	r6, [sp, #12]
 800569a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800569e:	1bbe      	subs	r6, r7, r6
 80056a0:	45b4      	cmp	ip, r6
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	d136      	bne.n	8005716 <_dtoa_r+0x6fe>
 80056a8:	f7fa fd60 	bl	800016c <__adddf3>
 80056ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	f7fb f9a0 	bl	80009f8 <__aeabi_dcmpgt>
 80056b8:	bb58      	cbnz	r0, 8005712 <_dtoa_r+0x6fa>
 80056ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fb f971 	bl	80009a8 <__aeabi_dcmpeq>
 80056c6:	b108      	cbz	r0, 80056cc <_dtoa_r+0x6b4>
 80056c8:	07e3      	lsls	r3, r4, #31
 80056ca:	d422      	bmi.n	8005712 <_dtoa_r+0x6fa>
 80056cc:	4651      	mov	r1, sl
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 fbc2 	bl	8005e58 <_Bfree>
 80056d4:	2300      	movs	r3, #0
 80056d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056d8:	703b      	strb	r3, [r7, #0]
 80056da:	f10b 0301 	add.w	r3, fp, #1
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f43f ace6 	beq.w	80050b4 <_dtoa_r+0x9c>
 80056e8:	601f      	str	r7, [r3, #0]
 80056ea:	e4e3      	b.n	80050b4 <_dtoa_r+0x9c>
 80056ec:	4627      	mov	r7, r4
 80056ee:	463b      	mov	r3, r7
 80056f0:	461f      	mov	r7, r3
 80056f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056f6:	2a39      	cmp	r2, #57	; 0x39
 80056f8:	d107      	bne.n	800570a <_dtoa_r+0x6f2>
 80056fa:	9a03      	ldr	r2, [sp, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1f7      	bne.n	80056f0 <_dtoa_r+0x6d8>
 8005700:	2230      	movs	r2, #48	; 0x30
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	f108 0801 	add.w	r8, r8, #1
 8005708:	700a      	strb	r2, [r1, #0]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	3201      	adds	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e79e      	b.n	8005650 <_dtoa_r+0x638>
 8005712:	46d8      	mov	r8, fp
 8005714:	e7eb      	b.n	80056ee <_dtoa_r+0x6d6>
 8005716:	2200      	movs	r2, #0
 8005718:	4b6d      	ldr	r3, [pc, #436]	; (80058d0 <_dtoa_r+0x8b8>)
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	2200      	movs	r2, #0
 8005720:	2300      	movs	r3, #0
 8005722:	4680      	mov	r8, r0
 8005724:	4689      	mov	r9, r1
 8005726:	f7fb f93f 	bl	80009a8 <__aeabi_dcmpeq>
 800572a:	2800      	cmp	r0, #0
 800572c:	d09b      	beq.n	8005666 <_dtoa_r+0x64e>
 800572e:	e7cd      	b.n	80056cc <_dtoa_r+0x6b4>
 8005730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005732:	2a00      	cmp	r2, #0
 8005734:	f000 80c4 	beq.w	80058c0 <_dtoa_r+0x8a8>
 8005738:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800573a:	2a01      	cmp	r2, #1
 800573c:	f300 80a8 	bgt.w	8005890 <_dtoa_r+0x878>
 8005740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005742:	2a00      	cmp	r2, #0
 8005744:	f000 80a0 	beq.w	8005888 <_dtoa_r+0x870>
 8005748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800574c:	464f      	mov	r7, r9
 800574e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005752:	2101      	movs	r1, #1
 8005754:	441a      	add	r2, r3
 8005756:	4628      	mov	r0, r5
 8005758:	4499      	add	r9, r3
 800575a:	9209      	str	r2, [sp, #36]	; 0x24
 800575c:	f000 fc32 	bl	8005fc4 <__i2b>
 8005760:	4606      	mov	r6, r0
 8005762:	b15f      	cbz	r7, 800577c <_dtoa_r+0x764>
 8005764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	dd08      	ble.n	800577c <_dtoa_r+0x764>
 800576a:	42bb      	cmp	r3, r7
 800576c:	bfa8      	it	ge
 800576e:	463b      	movge	r3, r7
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	eba9 0903 	sub.w	r9, r9, r3
 8005776:	1aff      	subs	r7, r7, r3
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	9309      	str	r3, [sp, #36]	; 0x24
 800577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577e:	b1f3      	cbz	r3, 80057be <_dtoa_r+0x7a6>
 8005780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a0 	beq.w	80058c8 <_dtoa_r+0x8b0>
 8005788:	2c00      	cmp	r4, #0
 800578a:	dd10      	ble.n	80057ae <_dtoa_r+0x796>
 800578c:	4631      	mov	r1, r6
 800578e:	4622      	mov	r2, r4
 8005790:	4628      	mov	r0, r5
 8005792:	f000 fcd5 	bl	8006140 <__pow5mult>
 8005796:	4652      	mov	r2, sl
 8005798:	4601      	mov	r1, r0
 800579a:	4606      	mov	r6, r0
 800579c:	4628      	mov	r0, r5
 800579e:	f000 fc27 	bl	8005ff0 <__multiply>
 80057a2:	4680      	mov	r8, r0
 80057a4:	4651      	mov	r1, sl
 80057a6:	4628      	mov	r0, r5
 80057a8:	f000 fb56 	bl	8005e58 <_Bfree>
 80057ac:	46c2      	mov	sl, r8
 80057ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b0:	1b1a      	subs	r2, r3, r4
 80057b2:	d004      	beq.n	80057be <_dtoa_r+0x7a6>
 80057b4:	4651      	mov	r1, sl
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 fcc2 	bl	8006140 <__pow5mult>
 80057bc:	4682      	mov	sl, r0
 80057be:	2101      	movs	r1, #1
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fbff 	bl	8005fc4 <__i2b>
 80057c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057c8:	4604      	mov	r4, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f340 8082 	ble.w	80058d4 <_dtoa_r+0x8bc>
 80057d0:	461a      	mov	r2, r3
 80057d2:	4601      	mov	r1, r0
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 fcb3 	bl	8006140 <__pow5mult>
 80057da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057dc:	4604      	mov	r4, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	dd7b      	ble.n	80058da <_dtoa_r+0x8c2>
 80057e2:	f04f 0800 	mov.w	r8, #0
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057ec:	6918      	ldr	r0, [r3, #16]
 80057ee:	f000 fb9b 	bl	8005f28 <__hi0bits>
 80057f2:	f1c0 0020 	rsb	r0, r0, #32
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	4418      	add	r0, r3
 80057fa:	f010 001f 	ands.w	r0, r0, #31
 80057fe:	f000 8092 	beq.w	8005926 <_dtoa_r+0x90e>
 8005802:	f1c0 0320 	rsb	r3, r0, #32
 8005806:	2b04      	cmp	r3, #4
 8005808:	f340 8085 	ble.w	8005916 <_dtoa_r+0x8fe>
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	f1c0 001c 	rsb	r0, r0, #28
 8005812:	4403      	add	r3, r0
 8005814:	4481      	add	r9, r0
 8005816:	4407      	add	r7, r0
 8005818:	9309      	str	r3, [sp, #36]	; 0x24
 800581a:	f1b9 0f00 	cmp.w	r9, #0
 800581e:	dd05      	ble.n	800582c <_dtoa_r+0x814>
 8005820:	4651      	mov	r1, sl
 8005822:	464a      	mov	r2, r9
 8005824:	4628      	mov	r0, r5
 8005826:	f000 fce5 	bl	80061f4 <__lshift>
 800582a:	4682      	mov	sl, r0
 800582c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	dd05      	ble.n	800583e <_dtoa_r+0x826>
 8005832:	4621      	mov	r1, r4
 8005834:	461a      	mov	r2, r3
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fcdc 	bl	80061f4 <__lshift>
 800583c:	4604      	mov	r4, r0
 800583e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d072      	beq.n	800592a <_dtoa_r+0x912>
 8005844:	4621      	mov	r1, r4
 8005846:	4650      	mov	r0, sl
 8005848:	f000 fd40 	bl	80062cc <__mcmp>
 800584c:	2800      	cmp	r0, #0
 800584e:	da6c      	bge.n	800592a <_dtoa_r+0x912>
 8005850:	2300      	movs	r3, #0
 8005852:	4651      	mov	r1, sl
 8005854:	220a      	movs	r2, #10
 8005856:	4628      	mov	r0, r5
 8005858:	f000 fb20 	bl	8005e9c <__multadd>
 800585c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585e:	4682      	mov	sl, r0
 8005860:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 81ac 	beq.w	8005bc2 <_dtoa_r+0xbaa>
 800586a:	2300      	movs	r3, #0
 800586c:	4631      	mov	r1, r6
 800586e:	220a      	movs	r2, #10
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fb13 	bl	8005e9c <__multadd>
 8005876:	9b06      	ldr	r3, [sp, #24]
 8005878:	4606      	mov	r6, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f300 8093 	bgt.w	80059a6 <_dtoa_r+0x98e>
 8005880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005882:	2b02      	cmp	r3, #2
 8005884:	dc59      	bgt.n	800593a <_dtoa_r+0x922>
 8005886:	e08e      	b.n	80059a6 <_dtoa_r+0x98e>
 8005888:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800588a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800588e:	e75d      	b.n	800574c <_dtoa_r+0x734>
 8005890:	9b08      	ldr	r3, [sp, #32]
 8005892:	1e5c      	subs	r4, r3, #1
 8005894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005896:	42a3      	cmp	r3, r4
 8005898:	bfbf      	itttt	lt
 800589a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800589c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800589e:	1ae3      	sublt	r3, r4, r3
 80058a0:	18d2      	addlt	r2, r2, r3
 80058a2:	bfa8      	it	ge
 80058a4:	1b1c      	subge	r4, r3, r4
 80058a6:	9b08      	ldr	r3, [sp, #32]
 80058a8:	bfbe      	ittt	lt
 80058aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80058ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80058ae:	2400      	movlt	r4, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bfb5      	itete	lt
 80058b4:	eba9 0703 	sublt.w	r7, r9, r3
 80058b8:	464f      	movge	r7, r9
 80058ba:	2300      	movlt	r3, #0
 80058bc:	9b08      	ldrge	r3, [sp, #32]
 80058be:	e747      	b.n	8005750 <_dtoa_r+0x738>
 80058c0:	464f      	mov	r7, r9
 80058c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058c6:	e74c      	b.n	8005762 <_dtoa_r+0x74a>
 80058c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ca:	e773      	b.n	80057b4 <_dtoa_r+0x79c>
 80058cc:	3fe00000 	.word	0x3fe00000
 80058d0:	40240000 	.word	0x40240000
 80058d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	dc18      	bgt.n	800590c <_dtoa_r+0x8f4>
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	b9b3      	cbnz	r3, 800590c <_dtoa_r+0x8f4>
 80058de:	9b05      	ldr	r3, [sp, #20]
 80058e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e4:	b993      	cbnz	r3, 800590c <_dtoa_r+0x8f4>
 80058e6:	9b05      	ldr	r3, [sp, #20]
 80058e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	0d1b      	lsrs	r3, r3, #20
 80058ee:	051b      	lsls	r3, r3, #20
 80058f0:	b17b      	cbz	r3, 8005912 <_dtoa_r+0x8fa>
 80058f2:	f04f 0801 	mov.w	r8, #1
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	f109 0901 	add.w	r9, r9, #1
 80058fc:	3301      	adds	r3, #1
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	f47f af6f 	bne.w	80057e6 <_dtoa_r+0x7ce>
 8005908:	2001      	movs	r0, #1
 800590a:	e774      	b.n	80057f6 <_dtoa_r+0x7de>
 800590c:	f04f 0800 	mov.w	r8, #0
 8005910:	e7f6      	b.n	8005900 <_dtoa_r+0x8e8>
 8005912:	4698      	mov	r8, r3
 8005914:	e7f4      	b.n	8005900 <_dtoa_r+0x8e8>
 8005916:	d080      	beq.n	800581a <_dtoa_r+0x802>
 8005918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591a:	331c      	adds	r3, #28
 800591c:	441a      	add	r2, r3
 800591e:	4499      	add	r9, r3
 8005920:	441f      	add	r7, r3
 8005922:	9209      	str	r2, [sp, #36]	; 0x24
 8005924:	e779      	b.n	800581a <_dtoa_r+0x802>
 8005926:	4603      	mov	r3, r0
 8005928:	e7f6      	b.n	8005918 <_dtoa_r+0x900>
 800592a:	9b08      	ldr	r3, [sp, #32]
 800592c:	2b00      	cmp	r3, #0
 800592e:	dc34      	bgt.n	800599a <_dtoa_r+0x982>
 8005930:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005932:	2b02      	cmp	r3, #2
 8005934:	dd31      	ble.n	800599a <_dtoa_r+0x982>
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	9306      	str	r3, [sp, #24]
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	b963      	cbnz	r3, 8005958 <_dtoa_r+0x940>
 800593e:	4621      	mov	r1, r4
 8005940:	2205      	movs	r2, #5
 8005942:	4628      	mov	r0, r5
 8005944:	f000 faaa 	bl	8005e9c <__multadd>
 8005948:	4601      	mov	r1, r0
 800594a:	4604      	mov	r4, r0
 800594c:	4650      	mov	r0, sl
 800594e:	f000 fcbd 	bl	80062cc <__mcmp>
 8005952:	2800      	cmp	r0, #0
 8005954:	f73f adbf 	bgt.w	80054d6 <_dtoa_r+0x4be>
 8005958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800595a:	9f03      	ldr	r7, [sp, #12]
 800595c:	ea6f 0b03 	mvn.w	fp, r3
 8005960:	f04f 0800 	mov.w	r8, #0
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fa76 	bl	8005e58 <_Bfree>
 800596c:	2e00      	cmp	r6, #0
 800596e:	f43f aead 	beq.w	80056cc <_dtoa_r+0x6b4>
 8005972:	f1b8 0f00 	cmp.w	r8, #0
 8005976:	d005      	beq.n	8005984 <_dtoa_r+0x96c>
 8005978:	45b0      	cmp	r8, r6
 800597a:	d003      	beq.n	8005984 <_dtoa_r+0x96c>
 800597c:	4641      	mov	r1, r8
 800597e:	4628      	mov	r0, r5
 8005980:	f000 fa6a 	bl	8005e58 <_Bfree>
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fa66 	bl	8005e58 <_Bfree>
 800598c:	e69e      	b.n	80056cc <_dtoa_r+0x6b4>
 800598e:	2400      	movs	r4, #0
 8005990:	4626      	mov	r6, r4
 8005992:	e7e1      	b.n	8005958 <_dtoa_r+0x940>
 8005994:	46c3      	mov	fp, r8
 8005996:	4626      	mov	r6, r4
 8005998:	e59d      	b.n	80054d6 <_dtoa_r+0x4be>
 800599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80c8 	beq.w	8005b32 <_dtoa_r+0xb1a>
 80059a2:	9b08      	ldr	r3, [sp, #32]
 80059a4:	9306      	str	r3, [sp, #24]
 80059a6:	2f00      	cmp	r7, #0
 80059a8:	dd05      	ble.n	80059b6 <_dtoa_r+0x99e>
 80059aa:	4631      	mov	r1, r6
 80059ac:	463a      	mov	r2, r7
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fc20 	bl	80061f4 <__lshift>
 80059b4:	4606      	mov	r6, r0
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	d05b      	beq.n	8005a74 <_dtoa_r+0xa5c>
 80059bc:	4628      	mov	r0, r5
 80059be:	6871      	ldr	r1, [r6, #4]
 80059c0:	f000 fa0a 	bl	8005dd8 <_Balloc>
 80059c4:	4607      	mov	r7, r0
 80059c6:	b928      	cbnz	r0, 80059d4 <_dtoa_r+0x9bc>
 80059c8:	4602      	mov	r2, r0
 80059ca:	f240 21ef 	movw	r1, #751	; 0x2ef
 80059ce:	4b81      	ldr	r3, [pc, #516]	; (8005bd4 <_dtoa_r+0xbbc>)
 80059d0:	f7ff bb36 	b.w	8005040 <_dtoa_r+0x28>
 80059d4:	6932      	ldr	r2, [r6, #16]
 80059d6:	f106 010c 	add.w	r1, r6, #12
 80059da:	3202      	adds	r2, #2
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	300c      	adds	r0, #12
 80059e0:	f000 ff9e 	bl	8006920 <memcpy>
 80059e4:	2201      	movs	r2, #1
 80059e6:	4639      	mov	r1, r7
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 fc03 	bl	80061f4 <__lshift>
 80059ee:	46b0      	mov	r8, r6
 80059f0:	4606      	mov	r6, r0
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	9a03      	ldr	r2, [sp, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9b06      	ldr	r3, [sp, #24]
 80059fc:	4413      	add	r3, r2
 80059fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a00:	9b04      	ldr	r3, [sp, #16]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	930a      	str	r3, [sp, #40]	; 0x28
 8005a08:	9b08      	ldr	r3, [sp, #32]
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	4650      	mov	r0, sl
 8005a10:	9304      	str	r3, [sp, #16]
 8005a12:	f7ff fa78 	bl	8004f06 <quorem>
 8005a16:	4641      	mov	r1, r8
 8005a18:	9006      	str	r0, [sp, #24]
 8005a1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a1e:	4650      	mov	r0, sl
 8005a20:	f000 fc54 	bl	80062cc <__mcmp>
 8005a24:	4632      	mov	r2, r6
 8005a26:	9009      	str	r0, [sp, #36]	; 0x24
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 fc6a 	bl	8006304 <__mdiff>
 8005a30:	68c2      	ldr	r2, [r0, #12]
 8005a32:	4607      	mov	r7, r0
 8005a34:	bb02      	cbnz	r2, 8005a78 <_dtoa_r+0xa60>
 8005a36:	4601      	mov	r1, r0
 8005a38:	4650      	mov	r0, sl
 8005a3a:	f000 fc47 	bl	80062cc <__mcmp>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4639      	mov	r1, r7
 8005a42:	4628      	mov	r0, r5
 8005a44:	920c      	str	r2, [sp, #48]	; 0x30
 8005a46:	f000 fa07 	bl	8005e58 <_Bfree>
 8005a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a4e:	9f08      	ldr	r7, [sp, #32]
 8005a50:	ea43 0102 	orr.w	r1, r3, r2
 8005a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a56:	4319      	orrs	r1, r3
 8005a58:	d110      	bne.n	8005a7c <_dtoa_r+0xa64>
 8005a5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a5e:	d029      	beq.n	8005ab4 <_dtoa_r+0xa9c>
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dd02      	ble.n	8005a6c <_dtoa_r+0xa54>
 8005a66:	9b06      	ldr	r3, [sp, #24]
 8005a68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	f883 9000 	strb.w	r9, [r3]
 8005a72:	e777      	b.n	8005964 <_dtoa_r+0x94c>
 8005a74:	4630      	mov	r0, r6
 8005a76:	e7ba      	b.n	80059ee <_dtoa_r+0x9d6>
 8005a78:	2201      	movs	r2, #1
 8005a7a:	e7e1      	b.n	8005a40 <_dtoa_r+0xa28>
 8005a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	db04      	blt.n	8005a8c <_dtoa_r+0xa74>
 8005a82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a84:	430b      	orrs	r3, r1
 8005a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	d120      	bne.n	8005ace <_dtoa_r+0xab6>
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	dded      	ble.n	8005a6c <_dtoa_r+0xa54>
 8005a90:	4651      	mov	r1, sl
 8005a92:	2201      	movs	r2, #1
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fbad 	bl	80061f4 <__lshift>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4682      	mov	sl, r0
 8005a9e:	f000 fc15 	bl	80062cc <__mcmp>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	dc03      	bgt.n	8005aae <_dtoa_r+0xa96>
 8005aa6:	d1e1      	bne.n	8005a6c <_dtoa_r+0xa54>
 8005aa8:	f019 0f01 	tst.w	r9, #1
 8005aac:	d0de      	beq.n	8005a6c <_dtoa_r+0xa54>
 8005aae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ab2:	d1d8      	bne.n	8005a66 <_dtoa_r+0xa4e>
 8005ab4:	2339      	movs	r3, #57	; 0x39
 8005ab6:	9a04      	ldr	r2, [sp, #16]
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	463b      	mov	r3, r7
 8005abc:	461f      	mov	r7, r3
 8005abe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	2a39      	cmp	r2, #57	; 0x39
 8005ac6:	d06b      	beq.n	8005ba0 <_dtoa_r+0xb88>
 8005ac8:	3201      	adds	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e74a      	b.n	8005964 <_dtoa_r+0x94c>
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	dd07      	ble.n	8005ae2 <_dtoa_r+0xaca>
 8005ad2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ad6:	d0ed      	beq.n	8005ab4 <_dtoa_r+0xa9c>
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	f109 0301 	add.w	r3, r9, #1
 8005ade:	7013      	strb	r3, [r2, #0]
 8005ae0:	e740      	b.n	8005964 <_dtoa_r+0x94c>
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ae6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d042      	beq.n	8005b74 <_dtoa_r+0xb5c>
 8005aee:	4651      	mov	r1, sl
 8005af0:	2300      	movs	r3, #0
 8005af2:	220a      	movs	r2, #10
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f9d1 	bl	8005e9c <__multadd>
 8005afa:	45b0      	cmp	r8, r6
 8005afc:	4682      	mov	sl, r0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	f04f 020a 	mov.w	r2, #10
 8005b06:	4641      	mov	r1, r8
 8005b08:	4628      	mov	r0, r5
 8005b0a:	d107      	bne.n	8005b1c <_dtoa_r+0xb04>
 8005b0c:	f000 f9c6 	bl	8005e9c <__multadd>
 8005b10:	4680      	mov	r8, r0
 8005b12:	4606      	mov	r6, r0
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	3301      	adds	r3, #1
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	e775      	b.n	8005a08 <_dtoa_r+0x9f0>
 8005b1c:	f000 f9be 	bl	8005e9c <__multadd>
 8005b20:	4631      	mov	r1, r6
 8005b22:	4680      	mov	r8, r0
 8005b24:	2300      	movs	r3, #0
 8005b26:	220a      	movs	r2, #10
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 f9b7 	bl	8005e9c <__multadd>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	e7f0      	b.n	8005b14 <_dtoa_r+0xafc>
 8005b32:	9b08      	ldr	r3, [sp, #32]
 8005b34:	9306      	str	r3, [sp, #24]
 8005b36:	9f03      	ldr	r7, [sp, #12]
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f7ff f9e3 	bl	8004f06 <quorem>
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b46:	f807 9b01 	strb.w	r9, [r7], #1
 8005b4a:	1afa      	subs	r2, r7, r3
 8005b4c:	9b06      	ldr	r3, [sp, #24]
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	dd07      	ble.n	8005b62 <_dtoa_r+0xb4a>
 8005b52:	4651      	mov	r1, sl
 8005b54:	2300      	movs	r3, #0
 8005b56:	220a      	movs	r2, #10
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f99f 	bl	8005e9c <__multadd>
 8005b5e:	4682      	mov	sl, r0
 8005b60:	e7ea      	b.n	8005b38 <_dtoa_r+0xb20>
 8005b62:	9b06      	ldr	r3, [sp, #24]
 8005b64:	f04f 0800 	mov.w	r8, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfcc      	ite	gt
 8005b6c:	461f      	movgt	r7, r3
 8005b6e:	2701      	movle	r7, #1
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	441f      	add	r7, r3
 8005b74:	4651      	mov	r1, sl
 8005b76:	2201      	movs	r2, #1
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f000 fb3b 	bl	80061f4 <__lshift>
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4682      	mov	sl, r0
 8005b82:	f000 fba3 	bl	80062cc <__mcmp>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	dc97      	bgt.n	8005aba <_dtoa_r+0xaa2>
 8005b8a:	d102      	bne.n	8005b92 <_dtoa_r+0xb7a>
 8005b8c:	f019 0f01 	tst.w	r9, #1
 8005b90:	d193      	bne.n	8005aba <_dtoa_r+0xaa2>
 8005b92:	463b      	mov	r3, r7
 8005b94:	461f      	mov	r7, r3
 8005b96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b9a:	2a30      	cmp	r2, #48	; 0x30
 8005b9c:	d0fa      	beq.n	8005b94 <_dtoa_r+0xb7c>
 8005b9e:	e6e1      	b.n	8005964 <_dtoa_r+0x94c>
 8005ba0:	9a03      	ldr	r2, [sp, #12]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d18a      	bne.n	8005abc <_dtoa_r+0xaa4>
 8005ba6:	2331      	movs	r3, #49	; 0x31
 8005ba8:	f10b 0b01 	add.w	fp, fp, #1
 8005bac:	e797      	b.n	8005ade <_dtoa_r+0xac6>
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <_dtoa_r+0xbc0>)
 8005bb0:	f7ff ba9f 	b.w	80050f2 <_dtoa_r+0xda>
 8005bb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f47f aa77 	bne.w	80050aa <_dtoa_r+0x92>
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <_dtoa_r+0xbc4>)
 8005bbe:	f7ff ba98 	b.w	80050f2 <_dtoa_r+0xda>
 8005bc2:	9b06      	ldr	r3, [sp, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dcb6      	bgt.n	8005b36 <_dtoa_r+0xb1e>
 8005bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	f73f aeb5 	bgt.w	800593a <_dtoa_r+0x922>
 8005bd0:	e7b1      	b.n	8005b36 <_dtoa_r+0xb1e>
 8005bd2:	bf00      	nop
 8005bd4:	08007142 	.word	0x08007142
 8005bd8:	080070a2 	.word	0x080070a2
 8005bdc:	080070c6 	.word	0x080070c6

08005be0 <_free_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4605      	mov	r5, r0
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d040      	beq.n	8005c6a <_free_r+0x8a>
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f0c      	subs	r4, r1, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfb8      	it	lt
 8005bf2:	18e4      	addlt	r4, r4, r3
 8005bf4:	f000 f8e4 	bl	8005dc0 <__malloc_lock>
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <_free_r+0x8c>)
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	b933      	cbnz	r3, 8005c0c <_free_r+0x2c>
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	4628      	mov	r0, r5
 8005c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c08:	f000 b8e0 	b.w	8005dcc <__malloc_unlock>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d908      	bls.n	8005c22 <_free_r+0x42>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	1821      	adds	r1, r4, r0
 8005c14:	428b      	cmp	r3, r1
 8005c16:	bf01      	itttt	eq
 8005c18:	6819      	ldreq	r1, [r3, #0]
 8005c1a:	685b      	ldreq	r3, [r3, #4]
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	e7ed      	b.n	8005bfe <_free_r+0x1e>
 8005c22:	461a      	mov	r2, r3
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b10b      	cbz	r3, 8005c2c <_free_r+0x4c>
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d9fa      	bls.n	8005c22 <_free_r+0x42>
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	1850      	adds	r0, r2, r1
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d10b      	bne.n	8005c4c <_free_r+0x6c>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	4401      	add	r1, r0
 8005c38:	1850      	adds	r0, r2, r1
 8005c3a:	4283      	cmp	r3, r0
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	d1e0      	bne.n	8005c02 <_free_r+0x22>
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4408      	add	r0, r1
 8005c46:	6010      	str	r0, [r2, #0]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	e7da      	b.n	8005c02 <_free_r+0x22>
 8005c4c:	d902      	bls.n	8005c54 <_free_r+0x74>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	e7d6      	b.n	8005c02 <_free_r+0x22>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1809      	addeq	r1, r1, r0
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	6054      	str	r4, [r2, #4]
 8005c68:	e7cb      	b.n	8005c02 <_free_r+0x22>
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000458 	.word	0x20000458

08005c70 <malloc>:
 8005c70:	4b02      	ldr	r3, [pc, #8]	; (8005c7c <malloc+0xc>)
 8005c72:	4601      	mov	r1, r0
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f000 b823 	b.w	8005cc0 <_malloc_r>
 8005c7a:	bf00      	nop
 8005c7c:	20000064 	.word	0x20000064

08005c80 <sbrk_aligned>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4e0e      	ldr	r6, [pc, #56]	; (8005cbc <sbrk_aligned+0x3c>)
 8005c84:	460c      	mov	r4, r1
 8005c86:	6831      	ldr	r1, [r6, #0]
 8005c88:	4605      	mov	r5, r0
 8005c8a:	b911      	cbnz	r1, 8005c92 <sbrk_aligned+0x12>
 8005c8c:	f000 fe38 	bl	8006900 <_sbrk_r>
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 fe33 	bl	8006900 <_sbrk_r>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d00a      	beq.n	8005cb4 <sbrk_aligned+0x34>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d007      	beq.n	8005cb8 <sbrk_aligned+0x38>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fe28 	bl	8006900 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d101      	bne.n	8005cb8 <sbrk_aligned+0x38>
 8005cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	2000045c 	.word	0x2000045c

08005cc0 <_malloc_r>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	1ccd      	adds	r5, r1, #3
 8005cc6:	f025 0503 	bic.w	r5, r5, #3
 8005cca:	3508      	adds	r5, #8
 8005ccc:	2d0c      	cmp	r5, #12
 8005cce:	bf38      	it	cc
 8005cd0:	250c      	movcc	r5, #12
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	db01      	blt.n	8005cdc <_malloc_r+0x1c>
 8005cd8:	42a9      	cmp	r1, r5
 8005cda:	d905      	bls.n	8005ce8 <_malloc_r+0x28>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	2600      	movs	r6, #0
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005dbc <_malloc_r+0xfc>
 8005cec:	f000 f868 	bl	8005dc0 <__malloc_lock>
 8005cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	bb5c      	cbnz	r4, 8005d50 <_malloc_r+0x90>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f7ff ffc0 	bl	8005c80 <sbrk_aligned>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	4604      	mov	r4, r0
 8005d04:	d155      	bne.n	8005db2 <_malloc_r+0xf2>
 8005d06:	f8d8 4000 	ldr.w	r4, [r8]
 8005d0a:	4626      	mov	r6, r4
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	d145      	bne.n	8005d9c <_malloc_r+0xdc>
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	d048      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	4631      	mov	r1, r6
 8005d18:	4638      	mov	r0, r7
 8005d1a:	eb04 0903 	add.w	r9, r4, r3
 8005d1e:	f000 fdef 	bl	8006900 <_sbrk_r>
 8005d22:	4581      	cmp	r9, r0
 8005d24:	d13f      	bne.n	8005da6 <_malloc_r+0xe6>
 8005d26:	6821      	ldr	r1, [r4, #0]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	1a6d      	subs	r5, r5, r1
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7ff ffa7 	bl	8005c80 <sbrk_aligned>
 8005d32:	3001      	adds	r0, #1
 8005d34:	d037      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	442b      	add	r3, r5
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d038      	beq.n	8005db6 <_malloc_r+0xf6>
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	42a2      	cmp	r2, r4
 8005d48:	d12b      	bne.n	8005da2 <_malloc_r+0xe2>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e00f      	b.n	8005d70 <_malloc_r+0xb0>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	1b52      	subs	r2, r2, r5
 8005d54:	d41f      	bmi.n	8005d96 <_malloc_r+0xd6>
 8005d56:	2a0b      	cmp	r2, #11
 8005d58:	d917      	bls.n	8005d8a <_malloc_r+0xca>
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	6025      	str	r5, [r4, #0]
 8005d60:	bf18      	it	ne
 8005d62:	6059      	strne	r1, [r3, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	bf08      	it	eq
 8005d68:	f8c8 1000 	streq.w	r1, [r8]
 8005d6c:	5162      	str	r2, [r4, r5]
 8005d6e:	604b      	str	r3, [r1, #4]
 8005d70:	4638      	mov	r0, r7
 8005d72:	f104 060b 	add.w	r6, r4, #11
 8005d76:	f000 f829 	bl	8005dcc <__malloc_unlock>
 8005d7a:	f026 0607 	bic.w	r6, r6, #7
 8005d7e:	1d23      	adds	r3, r4, #4
 8005d80:	1af2      	subs	r2, r6, r3
 8005d82:	d0ae      	beq.n	8005ce2 <_malloc_r+0x22>
 8005d84:	1b9b      	subs	r3, r3, r6
 8005d86:	50a3      	str	r3, [r4, r2]
 8005d88:	e7ab      	b.n	8005ce2 <_malloc_r+0x22>
 8005d8a:	42a3      	cmp	r3, r4
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	d1dd      	bne.n	8005d4c <_malloc_r+0x8c>
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e7ec      	b.n	8005d70 <_malloc_r+0xb0>
 8005d96:	4623      	mov	r3, r4
 8005d98:	6864      	ldr	r4, [r4, #4]
 8005d9a:	e7ac      	b.n	8005cf6 <_malloc_r+0x36>
 8005d9c:	4634      	mov	r4, r6
 8005d9e:	6876      	ldr	r6, [r6, #4]
 8005da0:	e7b4      	b.n	8005d0c <_malloc_r+0x4c>
 8005da2:	4613      	mov	r3, r2
 8005da4:	e7cc      	b.n	8005d40 <_malloc_r+0x80>
 8005da6:	230c      	movs	r3, #12
 8005da8:	4638      	mov	r0, r7
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	f000 f80e 	bl	8005dcc <__malloc_unlock>
 8005db0:	e797      	b.n	8005ce2 <_malloc_r+0x22>
 8005db2:	6025      	str	r5, [r4, #0]
 8005db4:	e7dc      	b.n	8005d70 <_malloc_r+0xb0>
 8005db6:	605b      	str	r3, [r3, #4]
 8005db8:	deff      	udf	#255	; 0xff
 8005dba:	bf00      	nop
 8005dbc:	20000458 	.word	0x20000458

08005dc0 <__malloc_lock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_lock+0x8>)
 8005dc2:	f7ff b890 	b.w	8004ee6 <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20000454 	.word	0x20000454

08005dcc <__malloc_unlock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_unlock+0x8>)
 8005dce:	f7ff b88b 	b.w	8004ee8 <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000454 	.word	0x20000454

08005dd8 <_Balloc>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	69c6      	ldr	r6, [r0, #28]
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	b976      	cbnz	r6, 8005e00 <_Balloc+0x28>
 8005de2:	2010      	movs	r0, #16
 8005de4:	f7ff ff44 	bl	8005c70 <malloc>
 8005de8:	4602      	mov	r2, r0
 8005dea:	61e0      	str	r0, [r4, #28]
 8005dec:	b920      	cbnz	r0, 8005df8 <_Balloc+0x20>
 8005dee:	216b      	movs	r1, #107	; 0x6b
 8005df0:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <_Balloc+0x78>)
 8005df2:	4818      	ldr	r0, [pc, #96]	; (8005e54 <_Balloc+0x7c>)
 8005df4:	f000 fda2 	bl	800693c <__assert_func>
 8005df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dfc:	6006      	str	r6, [r0, #0]
 8005dfe:	60c6      	str	r6, [r0, #12]
 8005e00:	69e6      	ldr	r6, [r4, #28]
 8005e02:	68f3      	ldr	r3, [r6, #12]
 8005e04:	b183      	cbz	r3, 8005e28 <_Balloc+0x50>
 8005e06:	69e3      	ldr	r3, [r4, #28]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e0e:	b9b8      	cbnz	r0, 8005e40 <_Balloc+0x68>
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f605 	lsl.w	r6, r1, r5
 8005e16:	1d72      	adds	r2, r6, #5
 8005e18:	4620      	mov	r0, r4
 8005e1a:	0092      	lsls	r2, r2, #2
 8005e1c:	f000 fdac 	bl	8006978 <_calloc_r>
 8005e20:	b160      	cbz	r0, 8005e3c <_Balloc+0x64>
 8005e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e26:	e00e      	b.n	8005e46 <_Balloc+0x6e>
 8005e28:	2221      	movs	r2, #33	; 0x21
 8005e2a:	2104      	movs	r1, #4
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 fda3 	bl	8006978 <_calloc_r>
 8005e32:	69e3      	ldr	r3, [r4, #28]
 8005e34:	60f0      	str	r0, [r6, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e4      	bne.n	8005e06 <_Balloc+0x2e>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	6802      	ldr	r2, [r0, #0]
 8005e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e46:	2300      	movs	r3, #0
 8005e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e4c:	e7f7      	b.n	8005e3e <_Balloc+0x66>
 8005e4e:	bf00      	nop
 8005e50:	080070d3 	.word	0x080070d3
 8005e54:	08007153 	.word	0x08007153

08005e58 <_Bfree>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	69c6      	ldr	r6, [r0, #28]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b976      	cbnz	r6, 8005e80 <_Bfree+0x28>
 8005e62:	2010      	movs	r0, #16
 8005e64:	f7ff ff04 	bl	8005c70 <malloc>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	61e8      	str	r0, [r5, #28]
 8005e6c:	b920      	cbnz	r0, 8005e78 <_Bfree+0x20>
 8005e6e:	218f      	movs	r1, #143	; 0x8f
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <_Bfree+0x3c>)
 8005e72:	4809      	ldr	r0, [pc, #36]	; (8005e98 <_Bfree+0x40>)
 8005e74:	f000 fd62 	bl	800693c <__assert_func>
 8005e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e7c:	6006      	str	r6, [r0, #0]
 8005e7e:	60c6      	str	r6, [r0, #12]
 8005e80:	b13c      	cbz	r4, 8005e92 <_Bfree+0x3a>
 8005e82:	69eb      	ldr	r3, [r5, #28]
 8005e84:	6862      	ldr	r2, [r4, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e8c:	6021      	str	r1, [r4, #0]
 8005e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	080070d3 	.word	0x080070d3
 8005e98:	08007153 	.word	0x08007153

08005e9c <__multadd>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	461e      	mov	r6, r3
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	690d      	ldr	r5, [r1, #16]
 8005eaa:	f101 0c14 	add.w	ip, r1, #20
 8005eae:	f8dc 3000 	ldr.w	r3, [ip]
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	b299      	uxth	r1, r3
 8005eb6:	fb02 6101 	mla	r1, r2, r1, r6
 8005eba:	0c1e      	lsrs	r6, r3, #16
 8005ebc:	0c0b      	lsrs	r3, r1, #16
 8005ebe:	fb02 3306 	mla	r3, r2, r6, r3
 8005ec2:	b289      	uxth	r1, r1
 8005ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ec8:	4285      	cmp	r5, r0
 8005eca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ece:	f84c 1b04 	str.w	r1, [ip], #4
 8005ed2:	dcec      	bgt.n	8005eae <__multadd+0x12>
 8005ed4:	b30e      	cbz	r6, 8005f1a <__multadd+0x7e>
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dc19      	bgt.n	8005f10 <__multadd+0x74>
 8005edc:	6861      	ldr	r1, [r4, #4]
 8005ede:	4638      	mov	r0, r7
 8005ee0:	3101      	adds	r1, #1
 8005ee2:	f7ff ff79 	bl	8005dd8 <_Balloc>
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	b928      	cbnz	r0, 8005ef6 <__multadd+0x5a>
 8005eea:	4602      	mov	r2, r0
 8005eec:	21ba      	movs	r1, #186	; 0xba
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <__multadd+0x84>)
 8005ef0:	480c      	ldr	r0, [pc, #48]	; (8005f24 <__multadd+0x88>)
 8005ef2:	f000 fd23 	bl	800693c <__assert_func>
 8005ef6:	6922      	ldr	r2, [r4, #16]
 8005ef8:	f104 010c 	add.w	r1, r4, #12
 8005efc:	3202      	adds	r2, #2
 8005efe:	0092      	lsls	r2, r2, #2
 8005f00:	300c      	adds	r0, #12
 8005f02:	f000 fd0d 	bl	8006920 <memcpy>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ffa5 	bl	8005e58 <_Bfree>
 8005f0e:	4644      	mov	r4, r8
 8005f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f14:	3501      	adds	r5, #1
 8005f16:	615e      	str	r6, [r3, #20]
 8005f18:	6125      	str	r5, [r4, #16]
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	08007142 	.word	0x08007142
 8005f24:	08007153 	.word	0x08007153

08005f28 <__hi0bits>:
 8005f28:	0c02      	lsrs	r2, r0, #16
 8005f2a:	0412      	lsls	r2, r2, #16
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	b9ca      	cbnz	r2, 8005f64 <__hi0bits+0x3c>
 8005f30:	0403      	lsls	r3, r0, #16
 8005f32:	2010      	movs	r0, #16
 8005f34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f38:	bf04      	itt	eq
 8005f3a:	021b      	lsleq	r3, r3, #8
 8005f3c:	3008      	addeq	r0, #8
 8005f3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f42:	bf04      	itt	eq
 8005f44:	011b      	lsleq	r3, r3, #4
 8005f46:	3004      	addeq	r0, #4
 8005f48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f4c:	bf04      	itt	eq
 8005f4e:	009b      	lsleq	r3, r3, #2
 8005f50:	3002      	addeq	r0, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db05      	blt.n	8005f62 <__hi0bits+0x3a>
 8005f56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f5a:	f100 0001 	add.w	r0, r0, #1
 8005f5e:	bf08      	it	eq
 8005f60:	2020      	moveq	r0, #32
 8005f62:	4770      	bx	lr
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7e5      	b.n	8005f34 <__hi0bits+0xc>

08005f68 <__lo0bits>:
 8005f68:	6803      	ldr	r3, [r0, #0]
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	f013 0007 	ands.w	r0, r3, #7
 8005f70:	d00b      	beq.n	8005f8a <__lo0bits+0x22>
 8005f72:	07d9      	lsls	r1, r3, #31
 8005f74:	d421      	bmi.n	8005fba <__lo0bits+0x52>
 8005f76:	0798      	lsls	r0, r3, #30
 8005f78:	bf49      	itett	mi
 8005f7a:	085b      	lsrmi	r3, r3, #1
 8005f7c:	089b      	lsrpl	r3, r3, #2
 8005f7e:	2001      	movmi	r0, #1
 8005f80:	6013      	strmi	r3, [r2, #0]
 8005f82:	bf5c      	itt	pl
 8005f84:	2002      	movpl	r0, #2
 8005f86:	6013      	strpl	r3, [r2, #0]
 8005f88:	4770      	bx	lr
 8005f8a:	b299      	uxth	r1, r3
 8005f8c:	b909      	cbnz	r1, 8005f92 <__lo0bits+0x2a>
 8005f8e:	2010      	movs	r0, #16
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	b2d9      	uxtb	r1, r3
 8005f94:	b909      	cbnz	r1, 8005f9a <__lo0bits+0x32>
 8005f96:	3008      	adds	r0, #8
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	0719      	lsls	r1, r3, #28
 8005f9c:	bf04      	itt	eq
 8005f9e:	091b      	lsreq	r3, r3, #4
 8005fa0:	3004      	addeq	r0, #4
 8005fa2:	0799      	lsls	r1, r3, #30
 8005fa4:	bf04      	itt	eq
 8005fa6:	089b      	lsreq	r3, r3, #2
 8005fa8:	3002      	addeq	r0, #2
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d403      	bmi.n	8005fb6 <__lo0bits+0x4e>
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	f100 0001 	add.w	r0, r0, #1
 8005fb4:	d003      	beq.n	8005fbe <__lo0bits+0x56>
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	2000      	movs	r0, #0
 8005fbc:	4770      	bx	lr
 8005fbe:	2020      	movs	r0, #32
 8005fc0:	4770      	bx	lr
	...

08005fc4 <__i2b>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2101      	movs	r1, #1
 8005fca:	f7ff ff05 	bl	8005dd8 <_Balloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <__i2b+0x1a>
 8005fd2:	f240 1145 	movw	r1, #325	; 0x145
 8005fd6:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <__i2b+0x24>)
 8005fd8:	4804      	ldr	r0, [pc, #16]	; (8005fec <__i2b+0x28>)
 8005fda:	f000 fcaf 	bl	800693c <__assert_func>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	6144      	str	r4, [r0, #20]
 8005fe2:	6103      	str	r3, [r0, #16]
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08007142 	.word	0x08007142
 8005fec:	08007153 	.word	0x08007153

08005ff0 <__multiply>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	690a      	ldr	r2, [r1, #16]
 8005ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	429a      	cmp	r2, r3
 8006000:	bfbe      	ittt	lt
 8006002:	460b      	movlt	r3, r1
 8006004:	464c      	movlt	r4, r9
 8006006:	4699      	movlt	r9, r3
 8006008:	6927      	ldr	r7, [r4, #16]
 800600a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	6861      	ldr	r1, [r4, #4]
 8006012:	eb07 060a 	add.w	r6, r7, sl
 8006016:	42b3      	cmp	r3, r6
 8006018:	b085      	sub	sp, #20
 800601a:	bfb8      	it	lt
 800601c:	3101      	addlt	r1, #1
 800601e:	f7ff fedb 	bl	8005dd8 <_Balloc>
 8006022:	b930      	cbnz	r0, 8006032 <__multiply+0x42>
 8006024:	4602      	mov	r2, r0
 8006026:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800602a:	4b43      	ldr	r3, [pc, #268]	; (8006138 <__multiply+0x148>)
 800602c:	4843      	ldr	r0, [pc, #268]	; (800613c <__multiply+0x14c>)
 800602e:	f000 fc85 	bl	800693c <__assert_func>
 8006032:	f100 0514 	add.w	r5, r0, #20
 8006036:	462b      	mov	r3, r5
 8006038:	2200      	movs	r2, #0
 800603a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800603e:	4543      	cmp	r3, r8
 8006040:	d321      	bcc.n	8006086 <__multiply+0x96>
 8006042:	f104 0314 	add.w	r3, r4, #20
 8006046:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800604a:	f109 0314 	add.w	r3, r9, #20
 800604e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006052:	9202      	str	r2, [sp, #8]
 8006054:	1b3a      	subs	r2, r7, r4
 8006056:	3a15      	subs	r2, #21
 8006058:	f022 0203 	bic.w	r2, r2, #3
 800605c:	3204      	adds	r2, #4
 800605e:	f104 0115 	add.w	r1, r4, #21
 8006062:	428f      	cmp	r7, r1
 8006064:	bf38      	it	cc
 8006066:	2204      	movcc	r2, #4
 8006068:	9201      	str	r2, [sp, #4]
 800606a:	9a02      	ldr	r2, [sp, #8]
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	429a      	cmp	r2, r3
 8006070:	d80c      	bhi.n	800608c <__multiply+0x9c>
 8006072:	2e00      	cmp	r6, #0
 8006074:	dd03      	ble.n	800607e <__multiply+0x8e>
 8006076:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800607a:	2b00      	cmp	r3, #0
 800607c:	d05a      	beq.n	8006134 <__multiply+0x144>
 800607e:	6106      	str	r6, [r0, #16]
 8006080:	b005      	add	sp, #20
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	f843 2b04 	str.w	r2, [r3], #4
 800608a:	e7d8      	b.n	800603e <__multiply+0x4e>
 800608c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006090:	f1ba 0f00 	cmp.w	sl, #0
 8006094:	d023      	beq.n	80060de <__multiply+0xee>
 8006096:	46a9      	mov	r9, r5
 8006098:	f04f 0c00 	mov.w	ip, #0
 800609c:	f104 0e14 	add.w	lr, r4, #20
 80060a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80060a4:	f8d9 1000 	ldr.w	r1, [r9]
 80060a8:	fa1f fb82 	uxth.w	fp, r2
 80060ac:	b289      	uxth	r1, r1
 80060ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80060b2:	4461      	add	r1, ip
 80060b4:	f8d9 c000 	ldr.w	ip, [r9]
 80060b8:	0c12      	lsrs	r2, r2, #16
 80060ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060be:	fb0a c202 	mla	r2, sl, r2, ip
 80060c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060c6:	b289      	uxth	r1, r1
 80060c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060cc:	4577      	cmp	r7, lr
 80060ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060d2:	f849 1b04 	str.w	r1, [r9], #4
 80060d6:	d8e3      	bhi.n	80060a0 <__multiply+0xb0>
 80060d8:	9a01      	ldr	r2, [sp, #4]
 80060da:	f845 c002 	str.w	ip, [r5, r2]
 80060de:	9a03      	ldr	r2, [sp, #12]
 80060e0:	3304      	adds	r3, #4
 80060e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060e6:	f1b9 0f00 	cmp.w	r9, #0
 80060ea:	d021      	beq.n	8006130 <__multiply+0x140>
 80060ec:	46ae      	mov	lr, r5
 80060ee:	f04f 0a00 	mov.w	sl, #0
 80060f2:	6829      	ldr	r1, [r5, #0]
 80060f4:	f104 0c14 	add.w	ip, r4, #20
 80060f8:	f8bc b000 	ldrh.w	fp, [ip]
 80060fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006100:	b289      	uxth	r1, r1
 8006102:	fb09 220b 	mla	r2, r9, fp, r2
 8006106:	4452      	add	r2, sl
 8006108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800610c:	f84e 1b04 	str.w	r1, [lr], #4
 8006110:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006118:	f8be 1000 	ldrh.w	r1, [lr]
 800611c:	4567      	cmp	r7, ip
 800611e:	fb09 110a 	mla	r1, r9, sl, r1
 8006122:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006126:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800612a:	d8e5      	bhi.n	80060f8 <__multiply+0x108>
 800612c:	9a01      	ldr	r2, [sp, #4]
 800612e:	50a9      	str	r1, [r5, r2]
 8006130:	3504      	adds	r5, #4
 8006132:	e79a      	b.n	800606a <__multiply+0x7a>
 8006134:	3e01      	subs	r6, #1
 8006136:	e79c      	b.n	8006072 <__multiply+0x82>
 8006138:	08007142 	.word	0x08007142
 800613c:	08007153 	.word	0x08007153

08006140 <__pow5mult>:
 8006140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006144:	4615      	mov	r5, r2
 8006146:	f012 0203 	ands.w	r2, r2, #3
 800614a:	4606      	mov	r6, r0
 800614c:	460f      	mov	r7, r1
 800614e:	d007      	beq.n	8006160 <__pow5mult+0x20>
 8006150:	4c25      	ldr	r4, [pc, #148]	; (80061e8 <__pow5mult+0xa8>)
 8006152:	3a01      	subs	r2, #1
 8006154:	2300      	movs	r3, #0
 8006156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800615a:	f7ff fe9f 	bl	8005e9c <__multadd>
 800615e:	4607      	mov	r7, r0
 8006160:	10ad      	asrs	r5, r5, #2
 8006162:	d03d      	beq.n	80061e0 <__pow5mult+0xa0>
 8006164:	69f4      	ldr	r4, [r6, #28]
 8006166:	b97c      	cbnz	r4, 8006188 <__pow5mult+0x48>
 8006168:	2010      	movs	r0, #16
 800616a:	f7ff fd81 	bl	8005c70 <malloc>
 800616e:	4602      	mov	r2, r0
 8006170:	61f0      	str	r0, [r6, #28]
 8006172:	b928      	cbnz	r0, 8006180 <__pow5mult+0x40>
 8006174:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006178:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <__pow5mult+0xac>)
 800617a:	481d      	ldr	r0, [pc, #116]	; (80061f0 <__pow5mult+0xb0>)
 800617c:	f000 fbde 	bl	800693c <__assert_func>
 8006180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006184:	6004      	str	r4, [r0, #0]
 8006186:	60c4      	str	r4, [r0, #12]
 8006188:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800618c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006190:	b94c      	cbnz	r4, 80061a6 <__pow5mult+0x66>
 8006192:	f240 2171 	movw	r1, #625	; 0x271
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ff14 	bl	8005fc4 <__i2b>
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80061a4:	6003      	str	r3, [r0, #0]
 80061a6:	f04f 0900 	mov.w	r9, #0
 80061aa:	07eb      	lsls	r3, r5, #31
 80061ac:	d50a      	bpl.n	80061c4 <__pow5mult+0x84>
 80061ae:	4639      	mov	r1, r7
 80061b0:	4622      	mov	r2, r4
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7ff ff1c 	bl	8005ff0 <__multiply>
 80061b8:	4680      	mov	r8, r0
 80061ba:	4639      	mov	r1, r7
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff fe4b 	bl	8005e58 <_Bfree>
 80061c2:	4647      	mov	r7, r8
 80061c4:	106d      	asrs	r5, r5, #1
 80061c6:	d00b      	beq.n	80061e0 <__pow5mult+0xa0>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	b938      	cbnz	r0, 80061dc <__pow5mult+0x9c>
 80061cc:	4622      	mov	r2, r4
 80061ce:	4621      	mov	r1, r4
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7ff ff0d 	bl	8005ff0 <__multiply>
 80061d6:	6020      	str	r0, [r4, #0]
 80061d8:	f8c0 9000 	str.w	r9, [r0]
 80061dc:	4604      	mov	r4, r0
 80061de:	e7e4      	b.n	80061aa <__pow5mult+0x6a>
 80061e0:	4638      	mov	r0, r7
 80061e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e6:	bf00      	nop
 80061e8:	080072a0 	.word	0x080072a0
 80061ec:	080070d3 	.word	0x080070d3
 80061f0:	08007153 	.word	0x08007153

080061f4 <__lshift>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	460c      	mov	r4, r1
 80061fa:	4607      	mov	r7, r0
 80061fc:	4691      	mov	r9, r2
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6849      	ldr	r1, [r1, #4]
 8006202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800620c:	f108 0601 	add.w	r6, r8, #1
 8006210:	42b3      	cmp	r3, r6
 8006212:	db0b      	blt.n	800622c <__lshift+0x38>
 8006214:	4638      	mov	r0, r7
 8006216:	f7ff fddf 	bl	8005dd8 <_Balloc>
 800621a:	4605      	mov	r5, r0
 800621c:	b948      	cbnz	r0, 8006232 <__lshift+0x3e>
 800621e:	4602      	mov	r2, r0
 8006220:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <__lshift+0xd0>)
 8006226:	4828      	ldr	r0, [pc, #160]	; (80062c8 <__lshift+0xd4>)
 8006228:	f000 fb88 	bl	800693c <__assert_func>
 800622c:	3101      	adds	r1, #1
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	e7ee      	b.n	8006210 <__lshift+0x1c>
 8006232:	2300      	movs	r3, #0
 8006234:	f100 0114 	add.w	r1, r0, #20
 8006238:	f100 0210 	add.w	r2, r0, #16
 800623c:	4618      	mov	r0, r3
 800623e:	4553      	cmp	r3, sl
 8006240:	db33      	blt.n	80062aa <__lshift+0xb6>
 8006242:	6920      	ldr	r0, [r4, #16]
 8006244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006248:	f104 0314 	add.w	r3, r4, #20
 800624c:	f019 091f 	ands.w	r9, r9, #31
 8006250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006254:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006258:	d02b      	beq.n	80062b2 <__lshift+0xbe>
 800625a:	468a      	mov	sl, r1
 800625c:	2200      	movs	r2, #0
 800625e:	f1c9 0e20 	rsb	lr, r9, #32
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	fa00 f009 	lsl.w	r0, r0, r9
 8006268:	4310      	orrs	r0, r2
 800626a:	f84a 0b04 	str.w	r0, [sl], #4
 800626e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006272:	459c      	cmp	ip, r3
 8006274:	fa22 f20e 	lsr.w	r2, r2, lr
 8006278:	d8f3      	bhi.n	8006262 <__lshift+0x6e>
 800627a:	ebac 0304 	sub.w	r3, ip, r4
 800627e:	3b15      	subs	r3, #21
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	3304      	adds	r3, #4
 8006286:	f104 0015 	add.w	r0, r4, #21
 800628a:	4584      	cmp	ip, r0
 800628c:	bf38      	it	cc
 800628e:	2304      	movcc	r3, #4
 8006290:	50ca      	str	r2, [r1, r3]
 8006292:	b10a      	cbz	r2, 8006298 <__lshift+0xa4>
 8006294:	f108 0602 	add.w	r6, r8, #2
 8006298:	3e01      	subs	r6, #1
 800629a:	4638      	mov	r0, r7
 800629c:	4621      	mov	r1, r4
 800629e:	612e      	str	r6, [r5, #16]
 80062a0:	f7ff fdda 	bl	8005e58 <_Bfree>
 80062a4:	4628      	mov	r0, r5
 80062a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80062ae:	3301      	adds	r3, #1
 80062b0:	e7c5      	b.n	800623e <__lshift+0x4a>
 80062b2:	3904      	subs	r1, #4
 80062b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b8:	459c      	cmp	ip, r3
 80062ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80062be:	d8f9      	bhi.n	80062b4 <__lshift+0xc0>
 80062c0:	e7ea      	b.n	8006298 <__lshift+0xa4>
 80062c2:	bf00      	nop
 80062c4:	08007142 	.word	0x08007142
 80062c8:	08007153 	.word	0x08007153

080062cc <__mcmp>:
 80062cc:	4603      	mov	r3, r0
 80062ce:	690a      	ldr	r2, [r1, #16]
 80062d0:	6900      	ldr	r0, [r0, #16]
 80062d2:	b530      	push	{r4, r5, lr}
 80062d4:	1a80      	subs	r0, r0, r2
 80062d6:	d10d      	bne.n	80062f4 <__mcmp+0x28>
 80062d8:	3314      	adds	r3, #20
 80062da:	3114      	adds	r1, #20
 80062dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062ec:	4295      	cmp	r5, r2
 80062ee:	d002      	beq.n	80062f6 <__mcmp+0x2a>
 80062f0:	d304      	bcc.n	80062fc <__mcmp+0x30>
 80062f2:	2001      	movs	r0, #1
 80062f4:	bd30      	pop	{r4, r5, pc}
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	d3f4      	bcc.n	80062e4 <__mcmp+0x18>
 80062fa:	e7fb      	b.n	80062f4 <__mcmp+0x28>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e7f8      	b.n	80062f4 <__mcmp+0x28>
	...

08006304 <__mdiff>:
 8006304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	4607      	mov	r7, r0
 800630c:	4611      	mov	r1, r2
 800630e:	4628      	mov	r0, r5
 8006310:	4614      	mov	r4, r2
 8006312:	f7ff ffdb 	bl	80062cc <__mcmp>
 8006316:	1e06      	subs	r6, r0, #0
 8006318:	d111      	bne.n	800633e <__mdiff+0x3a>
 800631a:	4631      	mov	r1, r6
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff fd5b 	bl	8005dd8 <_Balloc>
 8006322:	4602      	mov	r2, r0
 8006324:	b928      	cbnz	r0, 8006332 <__mdiff+0x2e>
 8006326:	f240 2137 	movw	r1, #567	; 0x237
 800632a:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <__mdiff+0x110>)
 800632c:	483a      	ldr	r0, [pc, #232]	; (8006418 <__mdiff+0x114>)
 800632e:	f000 fb05 	bl	800693c <__assert_func>
 8006332:	2301      	movs	r3, #1
 8006334:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006338:	4610      	mov	r0, r2
 800633a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	bfa4      	itt	ge
 8006340:	4623      	movge	r3, r4
 8006342:	462c      	movge	r4, r5
 8006344:	4638      	mov	r0, r7
 8006346:	6861      	ldr	r1, [r4, #4]
 8006348:	bfa6      	itte	ge
 800634a:	461d      	movge	r5, r3
 800634c:	2600      	movge	r6, #0
 800634e:	2601      	movlt	r6, #1
 8006350:	f7ff fd42 	bl	8005dd8 <_Balloc>
 8006354:	4602      	mov	r2, r0
 8006356:	b918      	cbnz	r0, 8006360 <__mdiff+0x5c>
 8006358:	f240 2145 	movw	r1, #581	; 0x245
 800635c:	4b2d      	ldr	r3, [pc, #180]	; (8006414 <__mdiff+0x110>)
 800635e:	e7e5      	b.n	800632c <__mdiff+0x28>
 8006360:	f102 0814 	add.w	r8, r2, #20
 8006364:	46c2      	mov	sl, r8
 8006366:	f04f 0c00 	mov.w	ip, #0
 800636a:	6927      	ldr	r7, [r4, #16]
 800636c:	60c6      	str	r6, [r0, #12]
 800636e:	692e      	ldr	r6, [r5, #16]
 8006370:	f104 0014 	add.w	r0, r4, #20
 8006374:	f105 0914 	add.w	r9, r5, #20
 8006378:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800637c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006380:	3410      	adds	r4, #16
 8006382:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006386:	f859 3b04 	ldr.w	r3, [r9], #4
 800638a:	fa1f f18b 	uxth.w	r1, fp
 800638e:	4461      	add	r1, ip
 8006390:	fa1f fc83 	uxth.w	ip, r3
 8006394:	0c1b      	lsrs	r3, r3, #16
 8006396:	eba1 010c 	sub.w	r1, r1, ip
 800639a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800639e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063a2:	b289      	uxth	r1, r1
 80063a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80063a8:	454e      	cmp	r6, r9
 80063aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80063ae:	f84a 1b04 	str.w	r1, [sl], #4
 80063b2:	d8e6      	bhi.n	8006382 <__mdiff+0x7e>
 80063b4:	1b73      	subs	r3, r6, r5
 80063b6:	3b15      	subs	r3, #21
 80063b8:	f023 0303 	bic.w	r3, r3, #3
 80063bc:	3515      	adds	r5, #21
 80063be:	3304      	adds	r3, #4
 80063c0:	42ae      	cmp	r6, r5
 80063c2:	bf38      	it	cc
 80063c4:	2304      	movcc	r3, #4
 80063c6:	4418      	add	r0, r3
 80063c8:	4443      	add	r3, r8
 80063ca:	461e      	mov	r6, r3
 80063cc:	4605      	mov	r5, r0
 80063ce:	4575      	cmp	r5, lr
 80063d0:	d30e      	bcc.n	80063f0 <__mdiff+0xec>
 80063d2:	f10e 0103 	add.w	r1, lr, #3
 80063d6:	1a09      	subs	r1, r1, r0
 80063d8:	f021 0103 	bic.w	r1, r1, #3
 80063dc:	3803      	subs	r0, #3
 80063de:	4586      	cmp	lr, r0
 80063e0:	bf38      	it	cc
 80063e2:	2100      	movcc	r1, #0
 80063e4:	440b      	add	r3, r1
 80063e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ea:	b189      	cbz	r1, 8006410 <__mdiff+0x10c>
 80063ec:	6117      	str	r7, [r2, #16]
 80063ee:	e7a3      	b.n	8006338 <__mdiff+0x34>
 80063f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80063f4:	fa1f f188 	uxth.w	r1, r8
 80063f8:	4461      	add	r1, ip
 80063fa:	140c      	asrs	r4, r1, #16
 80063fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006400:	b289      	uxth	r1, r1
 8006402:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006406:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800640a:	f846 1b04 	str.w	r1, [r6], #4
 800640e:	e7de      	b.n	80063ce <__mdiff+0xca>
 8006410:	3f01      	subs	r7, #1
 8006412:	e7e8      	b.n	80063e6 <__mdiff+0xe2>
 8006414:	08007142 	.word	0x08007142
 8006418:	08007153 	.word	0x08007153

0800641c <__d2b>:
 800641c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641e:	2101      	movs	r1, #1
 8006420:	4617      	mov	r7, r2
 8006422:	461c      	mov	r4, r3
 8006424:	9e08      	ldr	r6, [sp, #32]
 8006426:	f7ff fcd7 	bl	8005dd8 <_Balloc>
 800642a:	4605      	mov	r5, r0
 800642c:	b930      	cbnz	r0, 800643c <__d2b+0x20>
 800642e:	4602      	mov	r2, r0
 8006430:	f240 310f 	movw	r1, #783	; 0x30f
 8006434:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <__d2b+0xa4>)
 8006436:	4823      	ldr	r0, [pc, #140]	; (80064c4 <__d2b+0xa8>)
 8006438:	f000 fa80 	bl	800693c <__assert_func>
 800643c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006440:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006444:	bb24      	cbnz	r4, 8006490 <__d2b+0x74>
 8006446:	2f00      	cmp	r7, #0
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	d026      	beq.n	800649a <__d2b+0x7e>
 800644c:	4668      	mov	r0, sp
 800644e:	9700      	str	r7, [sp, #0]
 8006450:	f7ff fd8a 	bl	8005f68 <__lo0bits>
 8006454:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006458:	b1e8      	cbz	r0, 8006496 <__d2b+0x7a>
 800645a:	f1c0 0320 	rsb	r3, r0, #32
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	430b      	orrs	r3, r1
 8006464:	40c2      	lsrs	r2, r0
 8006466:	616b      	str	r3, [r5, #20]
 8006468:	9201      	str	r2, [sp, #4]
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2102      	movne	r1, #2
 8006472:	2101      	moveq	r1, #1
 8006474:	61ab      	str	r3, [r5, #24]
 8006476:	6129      	str	r1, [r5, #16]
 8006478:	b1bc      	cbz	r4, 80064aa <__d2b+0x8e>
 800647a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800647e:	4404      	add	r4, r0
 8006480:	6034      	str	r4, [r6, #0]
 8006482:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	6018      	str	r0, [r3, #0]
 800648a:	4628      	mov	r0, r5
 800648c:	b003      	add	sp, #12
 800648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006494:	e7d7      	b.n	8006446 <__d2b+0x2a>
 8006496:	6169      	str	r1, [r5, #20]
 8006498:	e7e7      	b.n	800646a <__d2b+0x4e>
 800649a:	a801      	add	r0, sp, #4
 800649c:	f7ff fd64 	bl	8005f68 <__lo0bits>
 80064a0:	9b01      	ldr	r3, [sp, #4]
 80064a2:	2101      	movs	r1, #1
 80064a4:	616b      	str	r3, [r5, #20]
 80064a6:	3020      	adds	r0, #32
 80064a8:	e7e5      	b.n	8006476 <__d2b+0x5a>
 80064aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064ae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80064b2:	6030      	str	r0, [r6, #0]
 80064b4:	6918      	ldr	r0, [r3, #16]
 80064b6:	f7ff fd37 	bl	8005f28 <__hi0bits>
 80064ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064be:	e7e2      	b.n	8006486 <__d2b+0x6a>
 80064c0:	08007142 	.word	0x08007142
 80064c4:	08007153 	.word	0x08007153

080064c8 <__ssputs_r>:
 80064c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064cc:	461f      	mov	r7, r3
 80064ce:	688e      	ldr	r6, [r1, #8]
 80064d0:	4682      	mov	sl, r0
 80064d2:	42be      	cmp	r6, r7
 80064d4:	460c      	mov	r4, r1
 80064d6:	4690      	mov	r8, r2
 80064d8:	680b      	ldr	r3, [r1, #0]
 80064da:	d82c      	bhi.n	8006536 <__ssputs_r+0x6e>
 80064dc:	898a      	ldrh	r2, [r1, #12]
 80064de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064e2:	d026      	beq.n	8006532 <__ssputs_r+0x6a>
 80064e4:	6965      	ldr	r5, [r4, #20]
 80064e6:	6909      	ldr	r1, [r1, #16]
 80064e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ec:	eba3 0901 	sub.w	r9, r3, r1
 80064f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064f4:	1c7b      	adds	r3, r7, #1
 80064f6:	444b      	add	r3, r9
 80064f8:	106d      	asrs	r5, r5, #1
 80064fa:	429d      	cmp	r5, r3
 80064fc:	bf38      	it	cc
 80064fe:	461d      	movcc	r5, r3
 8006500:	0553      	lsls	r3, r2, #21
 8006502:	d527      	bpl.n	8006554 <__ssputs_r+0x8c>
 8006504:	4629      	mov	r1, r5
 8006506:	f7ff fbdb 	bl	8005cc0 <_malloc_r>
 800650a:	4606      	mov	r6, r0
 800650c:	b360      	cbz	r0, 8006568 <__ssputs_r+0xa0>
 800650e:	464a      	mov	r2, r9
 8006510:	6921      	ldr	r1, [r4, #16]
 8006512:	f000 fa05 	bl	8006920 <memcpy>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	6126      	str	r6, [r4, #16]
 8006524:	444e      	add	r6, r9
 8006526:	6026      	str	r6, [r4, #0]
 8006528:	463e      	mov	r6, r7
 800652a:	6165      	str	r5, [r4, #20]
 800652c:	eba5 0509 	sub.w	r5, r5, r9
 8006530:	60a5      	str	r5, [r4, #8]
 8006532:	42be      	cmp	r6, r7
 8006534:	d900      	bls.n	8006538 <__ssputs_r+0x70>
 8006536:	463e      	mov	r6, r7
 8006538:	4632      	mov	r2, r6
 800653a:	4641      	mov	r1, r8
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	f000 f9c5 	bl	80068cc <memmove>
 8006542:	2000      	movs	r0, #0
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	1b9b      	subs	r3, r3, r6
 8006548:	60a3      	str	r3, [r4, #8]
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	4433      	add	r3, r6
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006554:	462a      	mov	r2, r5
 8006556:	f000 fa35 	bl	80069c4 <_realloc_r>
 800655a:	4606      	mov	r6, r0
 800655c:	2800      	cmp	r0, #0
 800655e:	d1e0      	bne.n	8006522 <__ssputs_r+0x5a>
 8006560:	4650      	mov	r0, sl
 8006562:	6921      	ldr	r1, [r4, #16]
 8006564:	f7ff fb3c 	bl	8005be0 <_free_r>
 8006568:	230c      	movs	r3, #12
 800656a:	f8ca 3000 	str.w	r3, [sl]
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	e7e9      	b.n	8006550 <__ssputs_r+0x88>

0800657c <_svfiprintf_r>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	4698      	mov	r8, r3
 8006582:	898b      	ldrh	r3, [r1, #12]
 8006584:	4607      	mov	r7, r0
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	460d      	mov	r5, r1
 800658a:	4614      	mov	r4, r2
 800658c:	b09d      	sub	sp, #116	; 0x74
 800658e:	d50e      	bpl.n	80065ae <_svfiprintf_r+0x32>
 8006590:	690b      	ldr	r3, [r1, #16]
 8006592:	b963      	cbnz	r3, 80065ae <_svfiprintf_r+0x32>
 8006594:	2140      	movs	r1, #64	; 0x40
 8006596:	f7ff fb93 	bl	8005cc0 <_malloc_r>
 800659a:	6028      	str	r0, [r5, #0]
 800659c:	6128      	str	r0, [r5, #16]
 800659e:	b920      	cbnz	r0, 80065aa <_svfiprintf_r+0x2e>
 80065a0:	230c      	movs	r3, #12
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e0d0      	b.n	800674c <_svfiprintf_r+0x1d0>
 80065aa:	2340      	movs	r3, #64	; 0x40
 80065ac:	616b      	str	r3, [r5, #20]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9309      	str	r3, [sp, #36]	; 0x24
 80065b2:	2320      	movs	r3, #32
 80065b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065b8:	2330      	movs	r3, #48	; 0x30
 80065ba:	f04f 0901 	mov.w	r9, #1
 80065be:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006764 <_svfiprintf_r+0x1e8>
 80065c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ca:	4623      	mov	r3, r4
 80065cc:	469a      	mov	sl, r3
 80065ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d2:	b10a      	cbz	r2, 80065d8 <_svfiprintf_r+0x5c>
 80065d4:	2a25      	cmp	r2, #37	; 0x25
 80065d6:	d1f9      	bne.n	80065cc <_svfiprintf_r+0x50>
 80065d8:	ebba 0b04 	subs.w	fp, sl, r4
 80065dc:	d00b      	beq.n	80065f6 <_svfiprintf_r+0x7a>
 80065de:	465b      	mov	r3, fp
 80065e0:	4622      	mov	r2, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff ff6f 	bl	80064c8 <__ssputs_r>
 80065ea:	3001      	adds	r0, #1
 80065ec:	f000 80a9 	beq.w	8006742 <_svfiprintf_r+0x1c6>
 80065f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f2:	445a      	add	r2, fp
 80065f4:	9209      	str	r2, [sp, #36]	; 0x24
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a1 	beq.w	8006742 <_svfiprintf_r+0x1c6>
 8006600:	2300      	movs	r3, #0
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800660a:	f10a 0a01 	add.w	sl, sl, #1
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006616:	931a      	str	r3, [sp, #104]	; 0x68
 8006618:	4654      	mov	r4, sl
 800661a:	2205      	movs	r2, #5
 800661c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006620:	4850      	ldr	r0, [pc, #320]	; (8006764 <_svfiprintf_r+0x1e8>)
 8006622:	f7fe fc62 	bl	8004eea <memchr>
 8006626:	9a04      	ldr	r2, [sp, #16]
 8006628:	b9d8      	cbnz	r0, 8006662 <_svfiprintf_r+0xe6>
 800662a:	06d0      	lsls	r0, r2, #27
 800662c:	bf44      	itt	mi
 800662e:	2320      	movmi	r3, #32
 8006630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006634:	0711      	lsls	r1, r2, #28
 8006636:	bf44      	itt	mi
 8006638:	232b      	movmi	r3, #43	; 0x2b
 800663a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663e:	f89a 3000 	ldrb.w	r3, [sl]
 8006642:	2b2a      	cmp	r3, #42	; 0x2a
 8006644:	d015      	beq.n	8006672 <_svfiprintf_r+0xf6>
 8006646:	4654      	mov	r4, sl
 8006648:	2000      	movs	r0, #0
 800664a:	f04f 0c0a 	mov.w	ip, #10
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	4621      	mov	r1, r4
 8006652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006656:	3b30      	subs	r3, #48	; 0x30
 8006658:	2b09      	cmp	r3, #9
 800665a:	d94d      	bls.n	80066f8 <_svfiprintf_r+0x17c>
 800665c:	b1b0      	cbz	r0, 800668c <_svfiprintf_r+0x110>
 800665e:	9207      	str	r2, [sp, #28]
 8006660:	e014      	b.n	800668c <_svfiprintf_r+0x110>
 8006662:	eba0 0308 	sub.w	r3, r0, r8
 8006666:	fa09 f303 	lsl.w	r3, r9, r3
 800666a:	4313      	orrs	r3, r2
 800666c:	46a2      	mov	sl, r4
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	e7d2      	b.n	8006618 <_svfiprintf_r+0x9c>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	1d19      	adds	r1, r3, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	9103      	str	r1, [sp, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfbb      	ittet	lt
 800667e:	425b      	neglt	r3, r3
 8006680:	f042 0202 	orrlt.w	r2, r2, #2
 8006684:	9307      	strge	r3, [sp, #28]
 8006686:	9307      	strlt	r3, [sp, #28]
 8006688:	bfb8      	it	lt
 800668a:	9204      	strlt	r2, [sp, #16]
 800668c:	7823      	ldrb	r3, [r4, #0]
 800668e:	2b2e      	cmp	r3, #46	; 0x2e
 8006690:	d10c      	bne.n	80066ac <_svfiprintf_r+0x130>
 8006692:	7863      	ldrb	r3, [r4, #1]
 8006694:	2b2a      	cmp	r3, #42	; 0x2a
 8006696:	d134      	bne.n	8006702 <_svfiprintf_r+0x186>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	3402      	adds	r4, #2
 800669c:	1d1a      	adds	r2, r3, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	9203      	str	r2, [sp, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfb8      	it	lt
 80066a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006768 <_svfiprintf_r+0x1ec>
 80066b0:	2203      	movs	r2, #3
 80066b2:	4650      	mov	r0, sl
 80066b4:	7821      	ldrb	r1, [r4, #0]
 80066b6:	f7fe fc18 	bl	8004eea <memchr>
 80066ba:	b138      	cbz	r0, 80066cc <_svfiprintf_r+0x150>
 80066bc:	2240      	movs	r2, #64	; 0x40
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	eba0 000a 	sub.w	r0, r0, sl
 80066c4:	4082      	lsls	r2, r0
 80066c6:	4313      	orrs	r3, r2
 80066c8:	3401      	adds	r4, #1
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d0:	2206      	movs	r2, #6
 80066d2:	4826      	ldr	r0, [pc, #152]	; (800676c <_svfiprintf_r+0x1f0>)
 80066d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066d8:	f7fe fc07 	bl	8004eea <memchr>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d038      	beq.n	8006752 <_svfiprintf_r+0x1d6>
 80066e0:	4b23      	ldr	r3, [pc, #140]	; (8006770 <_svfiprintf_r+0x1f4>)
 80066e2:	bb1b      	cbnz	r3, 800672c <_svfiprintf_r+0x1b0>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	3307      	adds	r3, #7
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	3308      	adds	r3, #8
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f2:	4433      	add	r3, r6
 80066f4:	9309      	str	r3, [sp, #36]	; 0x24
 80066f6:	e768      	b.n	80065ca <_svfiprintf_r+0x4e>
 80066f8:	460c      	mov	r4, r1
 80066fa:	2001      	movs	r0, #1
 80066fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006700:	e7a6      	b.n	8006650 <_svfiprintf_r+0xd4>
 8006702:	2300      	movs	r3, #0
 8006704:	f04f 0c0a 	mov.w	ip, #10
 8006708:	4619      	mov	r1, r3
 800670a:	3401      	adds	r4, #1
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	4620      	mov	r0, r4
 8006710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006714:	3a30      	subs	r2, #48	; 0x30
 8006716:	2a09      	cmp	r2, #9
 8006718:	d903      	bls.n	8006722 <_svfiprintf_r+0x1a6>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c6      	beq.n	80066ac <_svfiprintf_r+0x130>
 800671e:	9105      	str	r1, [sp, #20]
 8006720:	e7c4      	b.n	80066ac <_svfiprintf_r+0x130>
 8006722:	4604      	mov	r4, r0
 8006724:	2301      	movs	r3, #1
 8006726:	fb0c 2101 	mla	r1, ip, r1, r2
 800672a:	e7f0      	b.n	800670e <_svfiprintf_r+0x192>
 800672c:	ab03      	add	r3, sp, #12
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	462a      	mov	r2, r5
 8006732:	4638      	mov	r0, r7
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <_svfiprintf_r+0x1f8>)
 8006736:	a904      	add	r1, sp, #16
 8006738:	f7fd fe70 	bl	800441c <_printf_float>
 800673c:	1c42      	adds	r2, r0, #1
 800673e:	4606      	mov	r6, r0
 8006740:	d1d6      	bne.n	80066f0 <_svfiprintf_r+0x174>
 8006742:	89ab      	ldrh	r3, [r5, #12]
 8006744:	065b      	lsls	r3, r3, #25
 8006746:	f53f af2d 	bmi.w	80065a4 <_svfiprintf_r+0x28>
 800674a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800674c:	b01d      	add	sp, #116	; 0x74
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	ab03      	add	r3, sp, #12
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	462a      	mov	r2, r5
 8006758:	4638      	mov	r0, r7
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <_svfiprintf_r+0x1f8>)
 800675c:	a904      	add	r1, sp, #16
 800675e:	f7fe f8fd 	bl	800495c <_printf_i>
 8006762:	e7eb      	b.n	800673c <_svfiprintf_r+0x1c0>
 8006764:	080072ac 	.word	0x080072ac
 8006768:	080072b2 	.word	0x080072b2
 800676c:	080072b6 	.word	0x080072b6
 8006770:	0800441d 	.word	0x0800441d
 8006774:	080064c9 	.word	0x080064c9

08006778 <__sflush_r>:
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677c:	4605      	mov	r5, r0
 800677e:	0710      	lsls	r0, r2, #28
 8006780:	460c      	mov	r4, r1
 8006782:	d457      	bmi.n	8006834 <__sflush_r+0xbc>
 8006784:	684b      	ldr	r3, [r1, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	dc04      	bgt.n	8006794 <__sflush_r+0x1c>
 800678a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	dc01      	bgt.n	8006794 <__sflush_r+0x1c>
 8006790:	2000      	movs	r0, #0
 8006792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006796:	2e00      	cmp	r6, #0
 8006798:	d0fa      	beq.n	8006790 <__sflush_r+0x18>
 800679a:	2300      	movs	r3, #0
 800679c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a0:	682f      	ldr	r7, [r5, #0]
 80067a2:	6a21      	ldr	r1, [r4, #32]
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	d032      	beq.n	800680e <__sflush_r+0x96>
 80067a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	075a      	lsls	r2, r3, #29
 80067ae:	d505      	bpl.n	80067bc <__sflush_r+0x44>
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	1ac0      	subs	r0, r0, r3
 80067b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067b6:	b10b      	cbz	r3, 80067bc <__sflush_r+0x44>
 80067b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ba:	1ac0      	subs	r0, r0, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	4602      	mov	r2, r0
 80067c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c2:	4628      	mov	r0, r5
 80067c4:	6a21      	ldr	r1, [r4, #32]
 80067c6:	47b0      	blx	r6
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	d106      	bne.n	80067dc <__sflush_r+0x64>
 80067ce:	6829      	ldr	r1, [r5, #0]
 80067d0:	291d      	cmp	r1, #29
 80067d2:	d82b      	bhi.n	800682c <__sflush_r+0xb4>
 80067d4:	4a28      	ldr	r2, [pc, #160]	; (8006878 <__sflush_r+0x100>)
 80067d6:	410a      	asrs	r2, r1
 80067d8:	07d6      	lsls	r6, r2, #31
 80067da:	d427      	bmi.n	800682c <__sflush_r+0xb4>
 80067dc:	2200      	movs	r2, #0
 80067de:	6062      	str	r2, [r4, #4]
 80067e0:	6922      	ldr	r2, [r4, #16]
 80067e2:	04d9      	lsls	r1, r3, #19
 80067e4:	6022      	str	r2, [r4, #0]
 80067e6:	d504      	bpl.n	80067f2 <__sflush_r+0x7a>
 80067e8:	1c42      	adds	r2, r0, #1
 80067ea:	d101      	bne.n	80067f0 <__sflush_r+0x78>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b903      	cbnz	r3, 80067f2 <__sflush_r+0x7a>
 80067f0:	6560      	str	r0, [r4, #84]	; 0x54
 80067f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f4:	602f      	str	r7, [r5, #0]
 80067f6:	2900      	cmp	r1, #0
 80067f8:	d0ca      	beq.n	8006790 <__sflush_r+0x18>
 80067fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067fe:	4299      	cmp	r1, r3
 8006800:	d002      	beq.n	8006808 <__sflush_r+0x90>
 8006802:	4628      	mov	r0, r5
 8006804:	f7ff f9ec 	bl	8005be0 <_free_r>
 8006808:	2000      	movs	r0, #0
 800680a:	6360      	str	r0, [r4, #52]	; 0x34
 800680c:	e7c1      	b.n	8006792 <__sflush_r+0x1a>
 800680e:	2301      	movs	r3, #1
 8006810:	4628      	mov	r0, r5
 8006812:	47b0      	blx	r6
 8006814:	1c41      	adds	r1, r0, #1
 8006816:	d1c8      	bne.n	80067aa <__sflush_r+0x32>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0c5      	beq.n	80067aa <__sflush_r+0x32>
 800681e:	2b1d      	cmp	r3, #29
 8006820:	d001      	beq.n	8006826 <__sflush_r+0xae>
 8006822:	2b16      	cmp	r3, #22
 8006824:	d101      	bne.n	800682a <__sflush_r+0xb2>
 8006826:	602f      	str	r7, [r5, #0]
 8006828:	e7b2      	b.n	8006790 <__sflush_r+0x18>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	e7ae      	b.n	8006792 <__sflush_r+0x1a>
 8006834:	690f      	ldr	r7, [r1, #16]
 8006836:	2f00      	cmp	r7, #0
 8006838:	d0aa      	beq.n	8006790 <__sflush_r+0x18>
 800683a:	0793      	lsls	r3, r2, #30
 800683c:	bf18      	it	ne
 800683e:	2300      	movne	r3, #0
 8006840:	680e      	ldr	r6, [r1, #0]
 8006842:	bf08      	it	eq
 8006844:	694b      	ldreq	r3, [r1, #20]
 8006846:	1bf6      	subs	r6, r6, r7
 8006848:	600f      	str	r7, [r1, #0]
 800684a:	608b      	str	r3, [r1, #8]
 800684c:	2e00      	cmp	r6, #0
 800684e:	dd9f      	ble.n	8006790 <__sflush_r+0x18>
 8006850:	4633      	mov	r3, r6
 8006852:	463a      	mov	r2, r7
 8006854:	4628      	mov	r0, r5
 8006856:	6a21      	ldr	r1, [r4, #32]
 8006858:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800685c:	47e0      	blx	ip
 800685e:	2800      	cmp	r0, #0
 8006860:	dc06      	bgt.n	8006870 <__sflush_r+0xf8>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e790      	b.n	8006792 <__sflush_r+0x1a>
 8006870:	4407      	add	r7, r0
 8006872:	1a36      	subs	r6, r6, r0
 8006874:	e7ea      	b.n	800684c <__sflush_r+0xd4>
 8006876:	bf00      	nop
 8006878:	dfbffffe 	.word	0xdfbffffe

0800687c <_fflush_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	690b      	ldr	r3, [r1, #16]
 8006880:	4605      	mov	r5, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b913      	cbnz	r3, 800688c <_fflush_r+0x10>
 8006886:	2500      	movs	r5, #0
 8006888:	4628      	mov	r0, r5
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	b118      	cbz	r0, 8006896 <_fflush_r+0x1a>
 800688e:	6a03      	ldr	r3, [r0, #32]
 8006890:	b90b      	cbnz	r3, 8006896 <_fflush_r+0x1a>
 8006892:	f7fe fa11 	bl	8004cb8 <__sinit>
 8006896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f3      	beq.n	8006886 <_fflush_r+0xa>
 800689e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068a0:	07d0      	lsls	r0, r2, #31
 80068a2:	d404      	bmi.n	80068ae <_fflush_r+0x32>
 80068a4:	0599      	lsls	r1, r3, #22
 80068a6:	d402      	bmi.n	80068ae <_fflush_r+0x32>
 80068a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068aa:	f7fe fb1c 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 80068ae:	4628      	mov	r0, r5
 80068b0:	4621      	mov	r1, r4
 80068b2:	f7ff ff61 	bl	8006778 <__sflush_r>
 80068b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068b8:	4605      	mov	r5, r0
 80068ba:	07da      	lsls	r2, r3, #31
 80068bc:	d4e4      	bmi.n	8006888 <_fflush_r+0xc>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	059b      	lsls	r3, r3, #22
 80068c2:	d4e1      	bmi.n	8006888 <_fflush_r+0xc>
 80068c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068c6:	f7fe fb0f 	bl	8004ee8 <__retarget_lock_release_recursive>
 80068ca:	e7dd      	b.n	8006888 <_fflush_r+0xc>

080068cc <memmove>:
 80068cc:	4288      	cmp	r0, r1
 80068ce:	b510      	push	{r4, lr}
 80068d0:	eb01 0402 	add.w	r4, r1, r2
 80068d4:	d902      	bls.n	80068dc <memmove+0x10>
 80068d6:	4284      	cmp	r4, r0
 80068d8:	4623      	mov	r3, r4
 80068da:	d807      	bhi.n	80068ec <memmove+0x20>
 80068dc:	1e43      	subs	r3, r0, #1
 80068de:	42a1      	cmp	r1, r4
 80068e0:	d008      	beq.n	80068f4 <memmove+0x28>
 80068e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ea:	e7f8      	b.n	80068de <memmove+0x12>
 80068ec:	4601      	mov	r1, r0
 80068ee:	4402      	add	r2, r0
 80068f0:	428a      	cmp	r2, r1
 80068f2:	d100      	bne.n	80068f6 <memmove+0x2a>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068fe:	e7f7      	b.n	80068f0 <memmove+0x24>

08006900 <_sbrk_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d05      	ldr	r5, [pc, #20]	; (800691c <_sbrk_r+0x1c>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fa ff8c 	bl	8001828 <_sbrk>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_sbrk_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_sbrk_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20000450 	.word	0x20000450

08006920 <memcpy>:
 8006920:	440a      	add	r2, r1
 8006922:	4291      	cmp	r1, r2
 8006924:	f100 33ff 	add.w	r3, r0, #4294967295
 8006928:	d100      	bne.n	800692c <memcpy+0xc>
 800692a:	4770      	bx	lr
 800692c:	b510      	push	{r4, lr}
 800692e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006932:	4291      	cmp	r1, r2
 8006934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006938:	d1f9      	bne.n	800692e <memcpy+0xe>
 800693a:	bd10      	pop	{r4, pc}

0800693c <__assert_func>:
 800693c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800693e:	4614      	mov	r4, r2
 8006940:	461a      	mov	r2, r3
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <__assert_func+0x2c>)
 8006944:	4605      	mov	r5, r0
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68d8      	ldr	r0, [r3, #12]
 800694a:	b14c      	cbz	r4, 8006960 <__assert_func+0x24>
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <__assert_func+0x30>)
 800694e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006952:	9100      	str	r1, [sp, #0]
 8006954:	462b      	mov	r3, r5
 8006956:	4906      	ldr	r1, [pc, #24]	; (8006970 <__assert_func+0x34>)
 8006958:	f000 f870 	bl	8006a3c <fiprintf>
 800695c:	f000 f880 	bl	8006a60 <abort>
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <__assert_func+0x38>)
 8006962:	461c      	mov	r4, r3
 8006964:	e7f3      	b.n	800694e <__assert_func+0x12>
 8006966:	bf00      	nop
 8006968:	20000064 	.word	0x20000064
 800696c:	080072c7 	.word	0x080072c7
 8006970:	080072d4 	.word	0x080072d4
 8006974:	08007302 	.word	0x08007302

08006978 <_calloc_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	fba1 5402 	umull	r5, r4, r1, r2
 800697e:	b934      	cbnz	r4, 800698e <_calloc_r+0x16>
 8006980:	4629      	mov	r1, r5
 8006982:	f7ff f99d 	bl	8005cc0 <_malloc_r>
 8006986:	4606      	mov	r6, r0
 8006988:	b928      	cbnz	r0, 8006996 <_calloc_r+0x1e>
 800698a:	4630      	mov	r0, r6
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	220c      	movs	r2, #12
 8006990:	2600      	movs	r6, #0
 8006992:	6002      	str	r2, [r0, #0]
 8006994:	e7f9      	b.n	800698a <_calloc_r+0x12>
 8006996:	462a      	mov	r2, r5
 8006998:	4621      	mov	r1, r4
 800699a:	f7fe fa26 	bl	8004dea <memset>
 800699e:	e7f4      	b.n	800698a <_calloc_r+0x12>

080069a0 <__ascii_mbtowc>:
 80069a0:	b082      	sub	sp, #8
 80069a2:	b901      	cbnz	r1, 80069a6 <__ascii_mbtowc+0x6>
 80069a4:	a901      	add	r1, sp, #4
 80069a6:	b142      	cbz	r2, 80069ba <__ascii_mbtowc+0x1a>
 80069a8:	b14b      	cbz	r3, 80069be <__ascii_mbtowc+0x1e>
 80069aa:	7813      	ldrb	r3, [r2, #0]
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	1e10      	subs	r0, r2, #0
 80069b2:	bf18      	it	ne
 80069b4:	2001      	movne	r0, #1
 80069b6:	b002      	add	sp, #8
 80069b8:	4770      	bx	lr
 80069ba:	4610      	mov	r0, r2
 80069bc:	e7fb      	b.n	80069b6 <__ascii_mbtowc+0x16>
 80069be:	f06f 0001 	mvn.w	r0, #1
 80069c2:	e7f8      	b.n	80069b6 <__ascii_mbtowc+0x16>

080069c4 <_realloc_r>:
 80069c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c8:	4680      	mov	r8, r0
 80069ca:	4614      	mov	r4, r2
 80069cc:	460e      	mov	r6, r1
 80069ce:	b921      	cbnz	r1, 80069da <_realloc_r+0x16>
 80069d0:	4611      	mov	r1, r2
 80069d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069d6:	f7ff b973 	b.w	8005cc0 <_malloc_r>
 80069da:	b92a      	cbnz	r2, 80069e8 <_realloc_r+0x24>
 80069dc:	f7ff f900 	bl	8005be0 <_free_r>
 80069e0:	4625      	mov	r5, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e8:	f000 f841 	bl	8006a6e <_malloc_usable_size_r>
 80069ec:	4284      	cmp	r4, r0
 80069ee:	4607      	mov	r7, r0
 80069f0:	d802      	bhi.n	80069f8 <_realloc_r+0x34>
 80069f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069f6:	d812      	bhi.n	8006a1e <_realloc_r+0x5a>
 80069f8:	4621      	mov	r1, r4
 80069fa:	4640      	mov	r0, r8
 80069fc:	f7ff f960 	bl	8005cc0 <_malloc_r>
 8006a00:	4605      	mov	r5, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d0ed      	beq.n	80069e2 <_realloc_r+0x1e>
 8006a06:	42bc      	cmp	r4, r7
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	bf28      	it	cs
 8006a0e:	463a      	movcs	r2, r7
 8006a10:	f7ff ff86 	bl	8006920 <memcpy>
 8006a14:	4631      	mov	r1, r6
 8006a16:	4640      	mov	r0, r8
 8006a18:	f7ff f8e2 	bl	8005be0 <_free_r>
 8006a1c:	e7e1      	b.n	80069e2 <_realloc_r+0x1e>
 8006a1e:	4635      	mov	r5, r6
 8006a20:	e7df      	b.n	80069e2 <_realloc_r+0x1e>

08006a22 <__ascii_wctomb>:
 8006a22:	4603      	mov	r3, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	b141      	cbz	r1, 8006a3a <__ascii_wctomb+0x18>
 8006a28:	2aff      	cmp	r2, #255	; 0xff
 8006a2a:	d904      	bls.n	8006a36 <__ascii_wctomb+0x14>
 8006a2c:	228a      	movs	r2, #138	; 0x8a
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	4770      	bx	lr
 8006a36:	2001      	movs	r0, #1
 8006a38:	700a      	strb	r2, [r1, #0]
 8006a3a:	4770      	bx	lr

08006a3c <fiprintf>:
 8006a3c:	b40e      	push	{r1, r2, r3}
 8006a3e:	b503      	push	{r0, r1, lr}
 8006a40:	4601      	mov	r1, r0
 8006a42:	ab03      	add	r3, sp, #12
 8006a44:	4805      	ldr	r0, [pc, #20]	; (8006a5c <fiprintf+0x20>)
 8006a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	f000 f83d 	bl	8006acc <_vfiprintf_r>
 8006a52:	b002      	add	sp, #8
 8006a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a58:	b003      	add	sp, #12
 8006a5a:	4770      	bx	lr
 8006a5c:	20000064 	.word	0x20000064

08006a60 <abort>:
 8006a60:	2006      	movs	r0, #6
 8006a62:	b508      	push	{r3, lr}
 8006a64:	f000 fa0a 	bl	8006e7c <raise>
 8006a68:	2001      	movs	r0, #1
 8006a6a:	f7fa fe6a 	bl	8001742 <_exit>

08006a6e <_malloc_usable_size_r>:
 8006a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a72:	1f18      	subs	r0, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfbc      	itt	lt
 8006a78:	580b      	ldrlt	r3, [r1, r0]
 8006a7a:	18c0      	addlt	r0, r0, r3
 8006a7c:	4770      	bx	lr

08006a7e <__sfputc_r>:
 8006a7e:	6893      	ldr	r3, [r2, #8]
 8006a80:	b410      	push	{r4}
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	6093      	str	r3, [r2, #8]
 8006a88:	da07      	bge.n	8006a9a <__sfputc_r+0x1c>
 8006a8a:	6994      	ldr	r4, [r2, #24]
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	db01      	blt.n	8006a94 <__sfputc_r+0x16>
 8006a90:	290a      	cmp	r1, #10
 8006a92:	d102      	bne.n	8006a9a <__sfputc_r+0x1c>
 8006a94:	bc10      	pop	{r4}
 8006a96:	f000 b933 	b.w	8006d00 <__swbuf_r>
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	1c58      	adds	r0, r3, #1
 8006a9e:	6010      	str	r0, [r2, #0]
 8006aa0:	7019      	strb	r1, [r3, #0]
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	bc10      	pop	{r4}
 8006aa6:	4770      	bx	lr

08006aa8 <__sfputs_r>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	4614      	mov	r4, r2
 8006ab0:	18d5      	adds	r5, r2, r3
 8006ab2:	42ac      	cmp	r4, r5
 8006ab4:	d101      	bne.n	8006aba <__sfputs_r+0x12>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e007      	b.n	8006aca <__sfputs_r+0x22>
 8006aba:	463a      	mov	r2, r7
 8006abc:	4630      	mov	r0, r6
 8006abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac2:	f7ff ffdc 	bl	8006a7e <__sfputc_r>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d1f3      	bne.n	8006ab2 <__sfputs_r+0xa>
 8006aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006acc <_vfiprintf_r>:
 8006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	4698      	mov	r8, r3
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	b09d      	sub	sp, #116	; 0x74
 8006ada:	b118      	cbz	r0, 8006ae4 <_vfiprintf_r+0x18>
 8006adc:	6a03      	ldr	r3, [r0, #32]
 8006ade:	b90b      	cbnz	r3, 8006ae4 <_vfiprintf_r+0x18>
 8006ae0:	f7fe f8ea 	bl	8004cb8 <__sinit>
 8006ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae6:	07d9      	lsls	r1, r3, #31
 8006ae8:	d405      	bmi.n	8006af6 <_vfiprintf_r+0x2a>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	059a      	lsls	r2, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_vfiprintf_r+0x2a>
 8006af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af2:	f7fe f9f8 	bl	8004ee6 <__retarget_lock_acquire_recursive>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	071b      	lsls	r3, r3, #28
 8006afa:	d501      	bpl.n	8006b00 <_vfiprintf_r+0x34>
 8006afc:	692b      	ldr	r3, [r5, #16]
 8006afe:	b99b      	cbnz	r3, 8006b28 <_vfiprintf_r+0x5c>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f93a 	bl	8006d7c <__swsetup_r>
 8006b08:	b170      	cbz	r0, 8006b28 <_vfiprintf_r+0x5c>
 8006b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0c:	07dc      	lsls	r4, r3, #31
 8006b0e:	d504      	bpl.n	8006b1a <_vfiprintf_r+0x4e>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	b01d      	add	sp, #116	; 0x74
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	89ab      	ldrh	r3, [r5, #12]
 8006b1c:	0598      	lsls	r0, r3, #22
 8006b1e:	d4f7      	bmi.n	8006b10 <_vfiprintf_r+0x44>
 8006b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b22:	f7fe f9e1 	bl	8004ee8 <__retarget_lock_release_recursive>
 8006b26:	e7f3      	b.n	8006b10 <_vfiprintf_r+0x44>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2c:	2320      	movs	r3, #32
 8006b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b32:	2330      	movs	r3, #48	; 0x30
 8006b34:	f04f 0901 	mov.w	r9, #1
 8006b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006cec <_vfiprintf_r+0x220>
 8006b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b44:	4623      	mov	r3, r4
 8006b46:	469a      	mov	sl, r3
 8006b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b4c:	b10a      	cbz	r2, 8006b52 <_vfiprintf_r+0x86>
 8006b4e:	2a25      	cmp	r2, #37	; 0x25
 8006b50:	d1f9      	bne.n	8006b46 <_vfiprintf_r+0x7a>
 8006b52:	ebba 0b04 	subs.w	fp, sl, r4
 8006b56:	d00b      	beq.n	8006b70 <_vfiprintf_r+0xa4>
 8006b58:	465b      	mov	r3, fp
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ffa2 	bl	8006aa8 <__sfputs_r>
 8006b64:	3001      	adds	r0, #1
 8006b66:	f000 80a9 	beq.w	8006cbc <_vfiprintf_r+0x1f0>
 8006b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6c:	445a      	add	r2, fp
 8006b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b70:	f89a 3000 	ldrb.w	r3, [sl]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80a1 	beq.w	8006cbc <_vfiprintf_r+0x1f0>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b84:	f10a 0a01 	add.w	sl, sl, #1
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	9307      	str	r3, [sp, #28]
 8006b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b90:	931a      	str	r3, [sp, #104]	; 0x68
 8006b92:	4654      	mov	r4, sl
 8006b94:	2205      	movs	r2, #5
 8006b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9a:	4854      	ldr	r0, [pc, #336]	; (8006cec <_vfiprintf_r+0x220>)
 8006b9c:	f7fe f9a5 	bl	8004eea <memchr>
 8006ba0:	9a04      	ldr	r2, [sp, #16]
 8006ba2:	b9d8      	cbnz	r0, 8006bdc <_vfiprintf_r+0x110>
 8006ba4:	06d1      	lsls	r1, r2, #27
 8006ba6:	bf44      	itt	mi
 8006ba8:	2320      	movmi	r3, #32
 8006baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bae:	0713      	lsls	r3, r2, #28
 8006bb0:	bf44      	itt	mi
 8006bb2:	232b      	movmi	r3, #43	; 0x2b
 8006bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbe:	d015      	beq.n	8006bec <_vfiprintf_r+0x120>
 8006bc0:	4654      	mov	r4, sl
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f04f 0c0a 	mov.w	ip, #10
 8006bc8:	9a07      	ldr	r2, [sp, #28]
 8006bca:	4621      	mov	r1, r4
 8006bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd0:	3b30      	subs	r3, #48	; 0x30
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	d94d      	bls.n	8006c72 <_vfiprintf_r+0x1a6>
 8006bd6:	b1b0      	cbz	r0, 8006c06 <_vfiprintf_r+0x13a>
 8006bd8:	9207      	str	r2, [sp, #28]
 8006bda:	e014      	b.n	8006c06 <_vfiprintf_r+0x13a>
 8006bdc:	eba0 0308 	sub.w	r3, r0, r8
 8006be0:	fa09 f303 	lsl.w	r3, r9, r3
 8006be4:	4313      	orrs	r3, r2
 8006be6:	46a2      	mov	sl, r4
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	e7d2      	b.n	8006b92 <_vfiprintf_r+0xc6>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	1d19      	adds	r1, r3, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	9103      	str	r1, [sp, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bfbb      	ittet	lt
 8006bf8:	425b      	neglt	r3, r3
 8006bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8006bfe:	9307      	strge	r3, [sp, #28]
 8006c00:	9307      	strlt	r3, [sp, #28]
 8006c02:	bfb8      	it	lt
 8006c04:	9204      	strlt	r2, [sp, #16]
 8006c06:	7823      	ldrb	r3, [r4, #0]
 8006c08:	2b2e      	cmp	r3, #46	; 0x2e
 8006c0a:	d10c      	bne.n	8006c26 <_vfiprintf_r+0x15a>
 8006c0c:	7863      	ldrb	r3, [r4, #1]
 8006c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c10:	d134      	bne.n	8006c7c <_vfiprintf_r+0x1b0>
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	3402      	adds	r4, #2
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	9203      	str	r2, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bfb8      	it	lt
 8006c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006cf0 <_vfiprintf_r+0x224>
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	7821      	ldrb	r1, [r4, #0]
 8006c30:	f7fe f95b 	bl	8004eea <memchr>
 8006c34:	b138      	cbz	r0, 8006c46 <_vfiprintf_r+0x17a>
 8006c36:	2240      	movs	r2, #64	; 0x40
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	eba0 000a 	sub.w	r0, r0, sl
 8006c3e:	4082      	lsls	r2, r0
 8006c40:	4313      	orrs	r3, r2
 8006c42:	3401      	adds	r4, #1
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	2206      	movs	r2, #6
 8006c4c:	4829      	ldr	r0, [pc, #164]	; (8006cf4 <_vfiprintf_r+0x228>)
 8006c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c52:	f7fe f94a 	bl	8004eea <memchr>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d03f      	beq.n	8006cda <_vfiprintf_r+0x20e>
 8006c5a:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <_vfiprintf_r+0x22c>)
 8006c5c:	bb1b      	cbnz	r3, 8006ca6 <_vfiprintf_r+0x1da>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	3307      	adds	r3, #7
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	3308      	adds	r3, #8
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6c:	443b      	add	r3, r7
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	e768      	b.n	8006b44 <_vfiprintf_r+0x78>
 8006c72:	460c      	mov	r4, r1
 8006c74:	2001      	movs	r0, #1
 8006c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c7a:	e7a6      	b.n	8006bca <_vfiprintf_r+0xfe>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f04f 0c0a 	mov.w	ip, #10
 8006c82:	4619      	mov	r1, r3
 8006c84:	3401      	adds	r4, #1
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8e:	3a30      	subs	r2, #48	; 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d903      	bls.n	8006c9c <_vfiprintf_r+0x1d0>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0c6      	beq.n	8006c26 <_vfiprintf_r+0x15a>
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	e7c4      	b.n	8006c26 <_vfiprintf_r+0x15a>
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca4:	e7f0      	b.n	8006c88 <_vfiprintf_r+0x1bc>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4630      	mov	r0, r6
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <_vfiprintf_r+0x230>)
 8006cb0:	a904      	add	r1, sp, #16
 8006cb2:	f7fd fbb3 	bl	800441c <_printf_float>
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	1c78      	adds	r0, r7, #1
 8006cba:	d1d6      	bne.n	8006c6a <_vfiprintf_r+0x19e>
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x202>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x202>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cca:	f7fe f90d 	bl	8004ee8 <__retarget_lock_release_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	065b      	lsls	r3, r3, #25
 8006cd2:	f53f af1d 	bmi.w	8006b10 <_vfiprintf_r+0x44>
 8006cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cd8:	e71c      	b.n	8006b14 <_vfiprintf_r+0x48>
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <_vfiprintf_r+0x230>)
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	f7fd fe39 	bl	800495c <_printf_i>
 8006cea:	e7e4      	b.n	8006cb6 <_vfiprintf_r+0x1ea>
 8006cec:	080072ac 	.word	0x080072ac
 8006cf0:	080072b2 	.word	0x080072b2
 8006cf4:	080072b6 	.word	0x080072b6
 8006cf8:	0800441d 	.word	0x0800441d
 8006cfc:	08006aa9 	.word	0x08006aa9

08006d00 <__swbuf_r>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	460e      	mov	r6, r1
 8006d04:	4614      	mov	r4, r2
 8006d06:	4605      	mov	r5, r0
 8006d08:	b118      	cbz	r0, 8006d12 <__swbuf_r+0x12>
 8006d0a:	6a03      	ldr	r3, [r0, #32]
 8006d0c:	b90b      	cbnz	r3, 8006d12 <__swbuf_r+0x12>
 8006d0e:	f7fd ffd3 	bl	8004cb8 <__sinit>
 8006d12:	69a3      	ldr	r3, [r4, #24]
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	071a      	lsls	r2, r3, #28
 8006d1a:	d525      	bpl.n	8006d68 <__swbuf_r+0x68>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	b31b      	cbz	r3, 8006d68 <__swbuf_r+0x68>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	6922      	ldr	r2, [r4, #16]
 8006d24:	b2f6      	uxtb	r6, r6
 8006d26:	1a98      	subs	r0, r3, r2
 8006d28:	6963      	ldr	r3, [r4, #20]
 8006d2a:	4637      	mov	r7, r6
 8006d2c:	4283      	cmp	r3, r0
 8006d2e:	dc04      	bgt.n	8006d3a <__swbuf_r+0x3a>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff fda2 	bl	800687c <_fflush_r>
 8006d38:	b9e0      	cbnz	r0, 8006d74 <__swbuf_r+0x74>
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	60a3      	str	r3, [r4, #8]
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	6022      	str	r2, [r4, #0]
 8006d46:	701e      	strb	r6, [r3, #0]
 8006d48:	6962      	ldr	r2, [r4, #20]
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d004      	beq.n	8006d5a <__swbuf_r+0x5a>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	07db      	lsls	r3, r3, #31
 8006d54:	d506      	bpl.n	8006d64 <__swbuf_r+0x64>
 8006d56:	2e0a      	cmp	r6, #10
 8006d58:	d104      	bne.n	8006d64 <__swbuf_r+0x64>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fd8d 	bl	800687c <_fflush_r>
 8006d62:	b938      	cbnz	r0, 8006d74 <__swbuf_r+0x74>
 8006d64:	4638      	mov	r0, r7
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 f806 	bl	8006d7c <__swsetup_r>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d0d5      	beq.n	8006d20 <__swbuf_r+0x20>
 8006d74:	f04f 37ff 	mov.w	r7, #4294967295
 8006d78:	e7f4      	b.n	8006d64 <__swbuf_r+0x64>
	...

08006d7c <__swsetup_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	; (8006e28 <__swsetup_r+0xac>)
 8006d80:	4605      	mov	r5, r0
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	460c      	mov	r4, r1
 8006d86:	b118      	cbz	r0, 8006d90 <__swsetup_r+0x14>
 8006d88:	6a03      	ldr	r3, [r0, #32]
 8006d8a:	b90b      	cbnz	r3, 8006d90 <__swsetup_r+0x14>
 8006d8c:	f7fd ff94 	bl	8004cb8 <__sinit>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d96:	0718      	lsls	r0, r3, #28
 8006d98:	d422      	bmi.n	8006de0 <__swsetup_r+0x64>
 8006d9a:	06d9      	lsls	r1, r3, #27
 8006d9c:	d407      	bmi.n	8006dae <__swsetup_r+0x32>
 8006d9e:	2309      	movs	r3, #9
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006da6:	f04f 30ff 	mov.w	r0, #4294967295
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	e034      	b.n	8006e18 <__swsetup_r+0x9c>
 8006dae:	0758      	lsls	r0, r3, #29
 8006db0:	d512      	bpl.n	8006dd8 <__swsetup_r+0x5c>
 8006db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db4:	b141      	cbz	r1, 8006dc8 <__swsetup_r+0x4c>
 8006db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	d002      	beq.n	8006dc4 <__swsetup_r+0x48>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7fe ff0e 	bl	8005be0 <_free_r>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6363      	str	r3, [r4, #52]	; 0x34
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f043 0308 	orr.w	r3, r3, #8
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	b94b      	cbnz	r3, 8006df8 <__swsetup_r+0x7c>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dee:	d003      	beq.n	8006df8 <__swsetup_r+0x7c>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f883 	bl	8006efe <__smakebuf_r>
 8006df8:	89a0      	ldrh	r0, [r4, #12]
 8006dfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dfe:	f010 0301 	ands.w	r3, r0, #1
 8006e02:	d00a      	beq.n	8006e1a <__swsetup_r+0x9e>
 8006e04:	2300      	movs	r3, #0
 8006e06:	60a3      	str	r3, [r4, #8]
 8006e08:	6963      	ldr	r3, [r4, #20]
 8006e0a:	425b      	negs	r3, r3
 8006e0c:	61a3      	str	r3, [r4, #24]
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	b943      	cbnz	r3, 8006e24 <__swsetup_r+0xa8>
 8006e12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e16:	d1c4      	bne.n	8006da2 <__swsetup_r+0x26>
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	0781      	lsls	r1, r0, #30
 8006e1c:	bf58      	it	pl
 8006e1e:	6963      	ldrpl	r3, [r4, #20]
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	e7f4      	b.n	8006e0e <__swsetup_r+0x92>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e7f7      	b.n	8006e18 <__swsetup_r+0x9c>
 8006e28:	20000064 	.word	0x20000064

08006e2c <_raise_r>:
 8006e2c:	291f      	cmp	r1, #31
 8006e2e:	b538      	push	{r3, r4, r5, lr}
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	d904      	bls.n	8006e40 <_raise_r+0x14>
 8006e36:	2316      	movs	r3, #22
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e42:	b112      	cbz	r2, 8006e4a <_raise_r+0x1e>
 8006e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e48:	b94b      	cbnz	r3, 8006e5e <_raise_r+0x32>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f830 	bl	8006eb0 <_getpid_r>
 8006e50:	462a      	mov	r2, r5
 8006e52:	4601      	mov	r1, r0
 8006e54:	4620      	mov	r0, r4
 8006e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5a:	f000 b817 	b.w	8006e8c <_kill_r>
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d00a      	beq.n	8006e78 <_raise_r+0x4c>
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	d103      	bne.n	8006e6e <_raise_r+0x42>
 8006e66:	2316      	movs	r3, #22
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7e7      	b.n	8006e3e <_raise_r+0x12>
 8006e6e:	2400      	movs	r4, #0
 8006e70:	4628      	mov	r0, r5
 8006e72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e76:	4798      	blx	r3
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e7e0      	b.n	8006e3e <_raise_r+0x12>

08006e7c <raise>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <raise+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f7ff bfd3 	b.w	8006e2c <_raise_r>
 8006e86:	bf00      	nop
 8006e88:	20000064 	.word	0x20000064

08006e8c <_kill_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4d06      	ldr	r5, [pc, #24]	; (8006eac <_kill_r+0x20>)
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	f7fa fc42 	bl	8001722 <_kill>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d102      	bne.n	8006ea8 <_kill_r+0x1c>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	b103      	cbz	r3, 8006ea8 <_kill_r+0x1c>
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000450 	.word	0x20000450

08006eb0 <_getpid_r>:
 8006eb0:	f7fa bc30 	b.w	8001714 <_getpid>

08006eb4 <__swhatbuf_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	4615      	mov	r5, r2
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	461e      	mov	r6, r3
 8006ec2:	b096      	sub	sp, #88	; 0x58
 8006ec4:	da0c      	bge.n	8006ee0 <__swhatbuf_r+0x2c>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ece:	bf0c      	ite	eq
 8006ed0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ed4:	2340      	movne	r3, #64	; 0x40
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	6031      	str	r1, [r6, #0]
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	b016      	add	sp, #88	; 0x58
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	466a      	mov	r2, sp
 8006ee2:	f000 f849 	bl	8006f78 <_fstat_r>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	dbed      	blt.n	8006ec6 <__swhatbuf_r+0x12>
 8006eea:	9901      	ldr	r1, [sp, #4]
 8006eec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ef0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ef4:	4259      	negs	r1, r3
 8006ef6:	4159      	adcs	r1, r3
 8006ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efc:	e7eb      	b.n	8006ed6 <__swhatbuf_r+0x22>

08006efe <__smakebuf_r>:
 8006efe:	898b      	ldrh	r3, [r1, #12]
 8006f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f02:	079d      	lsls	r5, r3, #30
 8006f04:	4606      	mov	r6, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	d507      	bpl.n	8006f1a <__smakebuf_r+0x1c>
 8006f0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	2301      	movs	r3, #1
 8006f14:	6163      	str	r3, [r4, #20]
 8006f16:	b002      	add	sp, #8
 8006f18:	bd70      	pop	{r4, r5, r6, pc}
 8006f1a:	466a      	mov	r2, sp
 8006f1c:	ab01      	add	r3, sp, #4
 8006f1e:	f7ff ffc9 	bl	8006eb4 <__swhatbuf_r>
 8006f22:	9900      	ldr	r1, [sp, #0]
 8006f24:	4605      	mov	r5, r0
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7fe feca 	bl	8005cc0 <_malloc_r>
 8006f2c:	b948      	cbnz	r0, 8006f42 <__smakebuf_r+0x44>
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	059a      	lsls	r2, r3, #22
 8006f34:	d4ef      	bmi.n	8006f16 <__smakebuf_r+0x18>
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	f043 0302 	orr.w	r3, r3, #2
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	e7e3      	b.n	8006f0a <__smakebuf_r+0xc>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	6020      	str	r0, [r4, #0]
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	81a3      	strh	r3, [r4, #12]
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	6120      	str	r0, [r4, #16]
 8006f50:	6163      	str	r3, [r4, #20]
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	b15b      	cbz	r3, 8006f6e <__smakebuf_r+0x70>
 8006f56:	4630      	mov	r0, r6
 8006f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5c:	f000 f81e 	bl	8006f9c <_isatty_r>
 8006f60:	b128      	cbz	r0, 8006f6e <__smakebuf_r+0x70>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	431d      	orrs	r5, r3
 8006f72:	81a5      	strh	r5, [r4, #12]
 8006f74:	e7cf      	b.n	8006f16 <__smakebuf_r+0x18>
	...

08006f78 <_fstat_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d06      	ldr	r5, [pc, #24]	; (8006f98 <_fstat_r+0x20>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	f7fa fc2a 	bl	80017de <_fstat>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d102      	bne.n	8006f94 <_fstat_r+0x1c>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b103      	cbz	r3, 8006f94 <_fstat_r+0x1c>
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop
 8006f98:	20000450 	.word	0x20000450

08006f9c <_isatty_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4d05      	ldr	r5, [pc, #20]	; (8006fb8 <_isatty_r+0x1c>)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa fc28 	bl	80017fc <_isatty>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_isatty_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_isatty_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000450 	.word	0x20000450

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
